Search.setIndex({"docnames": ["api/generated/qcodes_contrib_drivers.drivers", "api/generated/qcodes_contrib_drivers.drivers.Advantech", "api/generated/qcodes_contrib_drivers.drivers.Agilent", "api/generated/qcodes_contrib_drivers.drivers.AimTTi", "api/generated/qcodes_contrib_drivers.drivers.Andor", "api/generated/qcodes_contrib_drivers.drivers.Attocube", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", "api/generated/qcodes_contrib_drivers.drivers.Aviosys", "api/generated/qcodes_contrib_drivers.drivers.Bilt", "api/generated/qcodes_contrib_drivers.drivers.BlueFors", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain", "api/generated/qcodes_contrib_drivers.drivers.Cryocon", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic", "api/generated/qcodes_contrib_drivers.drivers.DaylightSolutions", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave", "api/generated/qcodes_contrib_drivers.drivers.Gentec", "api/generated/qcodes_contrib_drivers.drivers.Holzworth", "api/generated/qcodes_contrib_drivers.drivers.Horiba", "api/generated/qcodes_contrib_drivers.drivers.Horiba.private", "api/generated/qcodes_contrib_drivers.drivers.Keysight", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore", "api/generated/qcodes_contrib_drivers.drivers.LighthousePhotonics", "api/generated/qcodes_contrib_drivers.drivers.M2", "api/generated/qcodes_contrib_drivers.drivers.MontanaInstruments", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments", "api/generated/qcodes_contrib_drivers.drivers.Newport", "api/generated/qcodes_contrib_drivers.drivers.Oxford", "api/generated/qcodes_contrib_drivers.drivers.QDevil", "api/generated/qcodes_contrib_drivers.drivers.QuTech", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private", "api/generated/qcodes_contrib_drivers.drivers.Shamrock", "api/generated/qcodes_contrib_drivers.drivers.SignalCore", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header", "api/generated/qcodes_contrib_drivers.drivers.Standa", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems", "api/generated/qcodes_contrib_drivers.drivers.Tektronix", "api/generated/qcodes_contrib_drivers.drivers.Thermotek", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.private", "api/generated/qcodes_contrib_drivers.drivers.Vaunix", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments", "examples/Agilent_N9000A", "examples/AimTTi_EL320P", "examples/Andor_DU401", "examples/Attocube_ANC300", "examples/Aviosys_IP_Power_9258S", "examples/BlueFors", "examples/CopperMountain_M5180", "examples/ERASynth", "examples/Gentec_Maestro", "examples/HP/HP8594E", "examples/Holzworth_HS900", "examples/Horiba_FHR", "examples/ITest", "examples/Keithley_6430", "examples/Keysight_M3202A", "examples/Keysight_M3202A with digitizer", "examples/Lakeshore_311", "examples/Lakeshore_625", "examples/NationalInstruments_DAQ", "examples/NationalInstruments_PXIe_2597", "examples/NationalInstruments_RFSG", "examples/Newport_AG-UC8", "examples/OxfordTriton", "examples/QDevil/QDAC1/QCodes example with QDevil_QDAC", "examples/QDevil/QDAC1/index", "examples/QDevil/QDAC2/AWG", "examples/QDevil/QDAC2/Chaining", "examples/QDevil/QDAC2/DC_Constant", "examples/QDevil/QDAC2/Debugging", "examples/QDevil/QDAC2/GateLeakage", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs", "examples/QDevil/QDAC2/List", "examples/QDevil/QDAC2/MultiGenerator", "examples/QDevil/QDAC2/PyvisaAwg", "examples/QDevil/QDAC2/Scan", "examples/QDevil/QDAC2/Scan2DDiode", "examples/QDevil/QDAC2/Sine", "examples/QDevil/QDAC2/Square", "examples/QDevil/QDAC2/Sweep", "examples/QDevil/QDAC2/SyncMultipleQDACs", "examples/QDevil/QDAC2/Triangle", "examples/QDevil/QDAC2/VirtualGates", "examples/QDevil/QDAC2/do2dScan", "examples/QDevil/QDAC2/index", "examples/QDevil/index", "examples/Rohde_Schwarz_HMC8043", "examples/Rohde_Schwarz_HMP4040", "examples/Rohde_Schwarz_SMW200A", "examples/SR844", "examples/Shamrock_SR750", "examples/SignalCore", "examples/SingleQuantum", "examples/Standa_10MWA168", "examples/Tektronix_AFG3000_series", "examples/Tektronix_Keithley_6500", "examples/Thorlabs_K10CR1", "examples/Thorlabs_KLS1550", "examples/Thorlabs_MFF10x", "examples/Thorlabs_PRM1Z8", "examples/Vaunix_LDA", "examples/ZVL13", "examples/ZurichInstruments_HF2LI", "examples/index", "index"], "filenames": ["api/generated/qcodes_contrib_drivers.drivers.rst", "api/generated/qcodes_contrib_drivers.drivers.Advantech.rst", "api/generated/qcodes_contrib_drivers.drivers.Agilent.rst", "api/generated/qcodes_contrib_drivers.drivers.AimTTi.rst", "api/generated/qcodes_contrib_drivers.drivers.Andor.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.rst", "api/generated/qcodes_contrib_drivers.drivers.Aviosys.rst", "api/generated/qcodes_contrib_drivers.drivers.Bilt.rst", "api/generated/qcodes_contrib_drivers.drivers.BlueFors.rst", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryocon.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic.rst", "api/generated/qcodes_contrib_drivers.drivers.DaylightSolutions.rst", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave.rst", "api/generated/qcodes_contrib_drivers.drivers.Gentec.rst", "api/generated/qcodes_contrib_drivers.drivers.Holzworth.rst", "api/generated/qcodes_contrib_drivers.drivers.Horiba.rst", "api/generated/qcodes_contrib_drivers.drivers.Horiba.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common.rst", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore.rst", "api/generated/qcodes_contrib_drivers.drivers.LighthousePhotonics.rst", "api/generated/qcodes_contrib_drivers.drivers.M2.rst", "api/generated/qcodes_contrib_drivers.drivers.MontanaInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.Newport.rst", "api/generated/qcodes_contrib_drivers.drivers.Oxford.rst", "api/generated/qcodes_contrib_drivers.drivers.QDevil.rst", "api/generated/qcodes_contrib_drivers.drivers.QuTech.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Shamrock.rst", "api/generated/qcodes_contrib_drivers.drivers.SignalCore.rst", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header.rst", "api/generated/qcodes_contrib_drivers.drivers.Standa.rst", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems.rst", "api/generated/qcodes_contrib_drivers.drivers.Tektronix.rst", "api/generated/qcodes_contrib_drivers.drivers.Thermotek.rst", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.rst", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Vaunix.rst", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments.rst", "examples/Agilent_N9000A.ipynb", "examples/AimTTi_EL320P.ipynb", "examples/Andor_DU401.ipynb", "examples/Attocube_ANC300.ipynb", "examples/Aviosys_IP_Power_9258S.ipynb", "examples/BlueFors.ipynb", "examples/CopperMountain_M5180.ipynb", "examples/ERASynth.ipynb", "examples/Gentec_Maestro.ipynb", "examples/HP/HP8594E.ipynb", "examples/Holzworth_HS900.ipynb", "examples/Horiba_FHR.ipynb", "examples/ITest.ipynb", "examples/Keithley_6430.ipynb", "examples/Keysight_M3202A.ipynb", "examples/Keysight_M3202A with digitizer.ipynb", "examples/Lakeshore_311.ipynb", "examples/Lakeshore_625.ipynb", "examples/NationalInstruments_DAQ.ipynb", "examples/NationalInstruments_PXIe_2597.ipynb", "examples/NationalInstruments_RFSG.ipynb", "examples/Newport_AG-UC8.ipynb", "examples/OxfordTriton.ipynb", "examples/QDevil/QDAC1/QCodes example with QDevil_QDAC.ipynb", "examples/QDevil/QDAC1/index.rst", "examples/QDevil/QDAC2/AWG.ipynb", "examples/QDevil/QDAC2/Chaining.ipynb", "examples/QDevil/QDAC2/DC_Constant.ipynb", "examples/QDevil/QDAC2/Debugging.ipynb", "examples/QDevil/QDAC2/GateLeakage.ipynb", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs.ipynb", "examples/QDevil/QDAC2/List.ipynb", "examples/QDevil/QDAC2/MultiGenerator.ipynb", "examples/QDevil/QDAC2/PyvisaAwg.ipynb", "examples/QDevil/QDAC2/Scan.ipynb", "examples/QDevil/QDAC2/Scan2DDiode.ipynb", "examples/QDevil/QDAC2/Sine.ipynb", "examples/QDevil/QDAC2/Square.ipynb", "examples/QDevil/QDAC2/Sweep.ipynb", "examples/QDevil/QDAC2/SyncMultipleQDACs.ipynb", "examples/QDevil/QDAC2/Triangle.ipynb", "examples/QDevil/QDAC2/VirtualGates.ipynb", "examples/QDevil/QDAC2/do2dScan.ipynb", "examples/QDevil/QDAC2/index.rst", "examples/QDevil/index.rst", "examples/Rohde_Schwarz_HMC8043.ipynb", "examples/Rohde_Schwarz_HMP4040.ipynb", "examples/Rohde_Schwarz_SMW200A.ipynb", "examples/SR844.ipynb", "examples/Shamrock_SR750.ipynb", "examples/SignalCore.ipynb", "examples/SingleQuantum.ipynb", "examples/Standa_10MWA168.ipynb", "examples/Tektronix_AFG3000_series.ipynb", "examples/Tektronix_Keithley_6500.ipynb", "examples/Thorlabs_K10CR1.ipynb", "examples/Thorlabs_KLS1550.ipynb", "examples/Thorlabs_MFF10x.ipynb", "examples/Thorlabs_PRM1Z8.ipynb", "examples/Vaunix_LDA.ipynb", "examples/ZVL13.ipynb", "examples/ZurichInstruments_HF2LI.ipynb", "examples/index.rst", "index.rst"], "titles": ["qcodes_contrib_drivers.drivers package", "qcodes_contrib_drivers.drivers.Advantech package", "qcodes_contrib_drivers.drivers.Agilent package", "qcodes_contrib_drivers.drivers.AimTTi package", "qcodes_contrib_drivers.drivers.Andor package", "qcodes_contrib_drivers.drivers.Attocube package", "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package", "qcodes_contrib_drivers.drivers.Aviosys package", "qcodes_contrib_drivers.drivers.Bilt package", "qcodes_contrib_drivers.drivers.BlueFors package", "qcodes_contrib_drivers.drivers.CopperMountain package", "qcodes_contrib_drivers.drivers.Cryocon package", "qcodes_contrib_drivers.drivers.Cryogenic package", "qcodes_contrib_drivers.drivers.DaylightSolutions package", "qcodes_contrib_drivers.drivers.ERAInstruments package", "qcodes_contrib_drivers.drivers.GeneralMicrowave package", "qcodes_contrib_drivers.drivers.Gentec package", "qcodes_contrib_drivers.drivers.Holzworth package", "qcodes_contrib_drivers.drivers.Horiba package", "qcodes_contrib_drivers.drivers.Horiba.private package", "qcodes_contrib_drivers.drivers.Keysight package", "qcodes_contrib_drivers.drivers.Keysight.SD_common package", "qcodes_contrib_drivers.drivers.Lakeshore package", "qcodes_contrib_drivers.drivers.LighthousePhotonics package", "qcodes_contrib_drivers.drivers.M2 package", "qcodes_contrib_drivers.drivers.MontanaInstruments package", "qcodes_contrib_drivers.drivers.NationalInstruments package", "qcodes_contrib_drivers.drivers.Newport package", "qcodes_contrib_drivers.drivers.Oxford package", "qcodes_contrib_drivers.drivers.QDevil package", "qcodes_contrib_drivers.drivers.QuTech package", "qcodes_contrib_drivers.drivers.RohdeSchwarz package", "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package", "qcodes_contrib_drivers.drivers.Shamrock package", "qcodes_contrib_drivers.drivers.SignalCore package", "qcodes_contrib_drivers.drivers.SingleQuantum package", "qcodes_contrib_drivers.drivers.Spectrum package", "qcodes_contrib_drivers.drivers.Spectrum.py_header package", "qcodes_contrib_drivers.drivers.Standa package", "qcodes_contrib_drivers.drivers.StanfordResearchSystems package", "qcodes_contrib_drivers.drivers.Tektronix package", "qcodes_contrib_drivers.drivers.Thermotek package", "qcodes_contrib_drivers.drivers.Thorlabs package", "qcodes_contrib_drivers.drivers.Thorlabs.private package", "qcodes_contrib_drivers.drivers.Vaunix package", "qcodes_contrib_drivers.drivers.ZurichInstruments package", "Example with the Agilent N9000A", "Example notebook for AimTTi EL320P", "Qcodes example with Andor DU401 BU2", "QCoDeS example with Attocube ANC300", "Qcodes example with Aviosys IP Power 9258S", "Example with the BlueFors", "Example with CopperMountain Model M5180 vector network analyzer", "Example with ERASynth", "QCoDeS Example with Gentec Maestro", "QCoDeS Example with HP8594E", "Example notebook for the Holzworth HS900B RF synthesizer", "Example for Horiba FHR", "Example with the iTest from Bilt", "Example notebook for Keithley 6430 SMU", "Keysight M3202A AWG", "Keysight M3202A AWG example with digitizer", "Qcodes example with Lakeshore 311", "Example with Lakeshore Model 625 Superconducting Magnet power supply", "National Instruments Multifunction DAQ example", "Qcodes example for National Instruments PXIe-2597 RF Switch", "Qcodes example with the NI RFSG signal generator driver", "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller", "Example of the oxford triton driver", "QCoDeS Example with QDevil_QDAC", "QCoDeS examples of how to use QDAC-I", "QDAC-II arbitrary-waveform generator", "QDAC-II trigger chaining", "QDAC-II constant voltage", "QDAC-II debugging", "Gate Leakage Test", "Gate Leakage using multiple QDAC-IIs", "QDAC-II voltage lists", "QDAC-II multiple generators per channel", "PyVisa direct use of QDAC-II", "QDAC-II 1D &amp; 2D scan", "QDAC-II 2D diode scan", "QDAC-II sine waves", "QDAC-II square waves", "QDAC-II voltage sweep", "Synchronise multiple QDAC-IIs", "QDAC-II triangle waves", "QDAC-II virtual gates", "QDAC-II 2D diode scan", "QCoDeS examples of how to use QDAC-II", "QDevil drivers", "QCoDeS Example with R&amp;S HMC 8043 Power Supply", "QCoDeS Example with R&amp;S HMP4040 Power Supply", "QCoDeS example with Rohe&amp;Schwarz SMW200A", "Changing the Sensitivity", "Qcodes example with Shamrock SR750", "Example with the microwave source SC5521A from Signal Core", "Example for Single Quantum SNSPD", "Qcodes example with Standa 10MWA168", "Tektronix AFG3000 series arbitrary function generator", "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500", "Qcodes example with Thorlabs K10CR1", "QCoDeS example with Thorlabs KLS1550 laser source", "Qcodes example with Thorlabs MFF10x", "Qcodes example with Thorlabs PRM1Z8", "Qcodes example for Vaunix LDA step attenuator", "Rohde &amp; Schwarz ZVL13 Vector Network Analyzer example", "Zurich Instruments HF2LI example", "Examples of how to use drivers", "Welcome to QCoDeS Contributed Drivers\u2019s documentation!"], "terms": {"advantech": 0, "pcie_1751": 0, "daqnaviexcept": [0, 1], "daqnaviwarn": [0, 1], "advantech_pcie_1751": [0, 1], "check": [0, 1, 5, 6, 13, 18, 26, 28, 35, 39, 40, 43, 49, 56, 65, 102, 108], "close": [0, 1, 4, 5, 6, 18, 20, 21, 26, 28, 31, 33, 35, 36, 44, 49, 57, 59, 60, 61, 65, 69, 93, 97, 99, 101, 102, 108], "get_idn": [0, 1, 4, 5, 7, 12, 13, 14, 16, 18, 20, 23, 25, 26, 27, 28, 30, 33, 34, 36, 39, 41, 42, 44, 67, 96], "port_count": [0, 1], "read_pin": [0, 1], "read_port": [0, 1], "write_pin": [0, 1], "write_port": [0, 1], "errormsg": [0, 1], "agil": [0, 20, 108, 109], "agilent_n9000a": [0, 46], "__init__": [0, 2, 5, 6, 8, 9, 10, 14, 17, 20, 21, 26, 28, 29, 30, 31, 34, 36, 39, 40, 44, 45, 94], "power_pars": [0, 2], "aimtti": [0, 108, 109], "el320p": [0, 108, 109], "andor": [0, 108, 109], "du401": [0, 108, 109], "andor_du401": [0, 4, 48], "serial_numb": [0, 4, 21, 33, 42, 43, 44, 55, 102], "head_model": [0, 4], "firmware_vers": [0, 4, 16], "firmware_build": [0, 4], "x_pixel": [0, 4], "y_pixel": [0, 4], "spectrum": [0, 2, 4, 10, 55, 94, 108], "get_raw": [0, 4, 10, 15, 26, 29, 31, 35, 39, 44, 94], "set_raw": [0, 4, 15, 26, 39, 44], "atmcd64d": [0, 4], "verbos": [0, 4, 20, 21, 24, 29, 33, 36, 38, 42, 43], "dll": [0, 1, 4, 5, 6, 13, 18, 26, 33, 34, 42, 43, 44, 57, 96, 101, 102, 105], "cooler_off": [0, 4], "cooler_on": [0, 4], "error_check": [0, 4, 18, 33, 38, 42, 43], "get_acquired_data": [0, 4], "get_acquisition_tim": [0, 4], "get_camera_handl": [0, 4], "get_camera_serial_numb": [0, 4], "get_detector": [0, 4], "get_filter_mod": [0, 4], "get_hardware_vers": [0, 4, 20, 21, 36], "get_head_model": [0, 4], "get_statu": [0, 4, 20, 21, 24, 38], "get_temperatur": [0, 4, 9, 28], "get_temperature_rang": [0, 4], "initi": [0, 1, 4, 6, 18, 19, 21, 26, 28, 29, 33, 39, 40, 43, 57, 63, 65, 67, 69, 108], "is_cooler_on": [0, 4], "set_accumulation_cycle_tim": [0, 4], "set_acquisition_mod": [0, 4], "set_current_camera": [0, 4], "set_exposure_tim": [0, 4], "set_filter_mod": [0, 4], "set_number_accumul": [0, 4], "set_read_mod": [0, 4], "set_shutt": [0, 4], "set_temperatur": [0, 4, 48], "set_trigger_mod": [0, 4, 20, 21], "shut_down": [0, 4], "start_acquisit": [0, 4, 36], "wait_for_acquisit": [0, 4], "attocub": [0, 108, 109], "anc350lib": [0, 5], "interfac": [0, 1, 5, 18, 21, 29], "anc350liberror": [0, 5, 6], "messag": [0, 5, 6, 12, 23, 25, 29, 30, 36, 39], "code": [0, 4, 5, 6, 12, 18, 21, 27, 31, 33, 36, 38, 43, 100, 102], "check_error": [0, 5, 6, 35, 61], "success_cod": [0, 5, 6], "warning_cod": [0, 5, 6], "anc350libactuatortyp": [0, 5, 6], "goniomet": [0, 5, 6], "linear": [0, 5, 6, 10, 18, 31], "rotat": [0, 5, 6, 18, 42, 43, 67, 108], "anc350libamplitudecontrolmod": [0, 5, 6], "amplitud": [0, 5, 6, 14, 21, 27, 31, 49, 53, 67, 107, 108], "speed": [0, 5, 6, 18, 27], "stepsiz": [0, 5, 6, 30], "anc350libdevicetyp": [0, 5, 6], "fp": [0, 5, 6, 37], "noth": [0, 5, 6, 26, 39], "num": [0, 5, 6, 39], "re": [0, 5, 6, 36, 59, 69, 99, 100], "anc350libexternaltriggermod": [0, 5, 6], "disabl": [0, 5, 6, 14, 21, 23, 36, 43, 45, 63, 66, 69], "quadratur": [0, 5, 6, 107], "trigger": [0, 5, 6, 14, 20, 21, 29, 31, 36, 39, 40, 69, 71, 74, 77, 80, 81, 82, 85, 86, 87, 89, 90, 97, 99, 108], "anc350libsignaledg": [0, 5, 6], "fall": [0, 5, 6, 21, 31], "rise": [0, 5, 6, 21, 31], "anc350libtriggerinputmod": [0, 5, 6], "coars": [0, 5, 6], "anc350libtriggeroutputmod": [0, 5, 6], "ichau": [0, 5, 6], "posit": [0, 5, 6, 18, 21, 27, 29, 36, 38, 43, 45, 49, 57, 67, 108], "anc350libtriggerpolar": [0, 5, 6], "high": [0, 5, 6, 21, 29, 31, 36, 66, 69, 73, 93], "low": [0, 5, 6, 14, 21, 29, 31, 36, 69, 73], "v3": [0, 5], "anc350v3liberror": [0, 5, 6], "anc350v3lib": [0, 5, 6], "configure_a_quad_b_in": [0, 5, 6], "configure_a_quad_b_out": [0, 5, 6], "configure_duty_cycl": [0, 5, 6], "configure_ext_trigg": [0, 5, 6], "configure_nsl_trigg": [0, 5, 6], "configure_nsl_trigger_axi": [0, 5, 6], "configure_rng_trigg": [0, 5, 6], "configure_rng_trigger_ep": [0, 5, 6], "configure_rng_trigger_pol": [0, 5, 6], "connect": [0, 5, 6, 14, 15, 16, 17, 25, 26, 28, 29, 30, 31, 33, 34, 35, 39, 42, 43, 45, 46, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 97, 98, 99, 101, 103, 104, 105, 108, 109], "disconnect": [0, 5, 6, 18, 26, 65, 99, 108], "discov": [0, 5, 6], "enable_ref_auto_reset": [0, 5, 6], "enable_ref_auto_upd": [0, 5, 6], "enable_sensor": [0, 5, 6], "get_actuator_nam": [0, 5, 6], "get_actuator_typ": [0, 5, 6], "get_amplitud": [0, 5, 6], "get_axis_statu": [0, 5, 6], "get_device_config": [0, 5, 6], "get_device_info": [0, 5, 6], "get_firmware_vers": [0, 5, 6, 20, 21, 36], "get_frequ": [0, 5, 6], "get_posit": [0, 5, 6, 38], "get_ref_posit": [0, 5, 6], "measure_capacit": [0, 5, 6], "move_refer": [0, 5, 6], "reset_posit": [0, 5, 6], "save_param": [0, 5, 6], "select_actu": [0, 5, 6], "set_amplitud": [0, 5, 6], "set_axis_output": [0, 5, 6], "set_dc_voltag": [0, 5, 6], "set_frequ": [0, 5, 6], "set_target_posit": [0, 5, 6], "set_target_rang": [0, 5, 6], "start_auto_mov": [0, 5, 6], "start_continuous_mov": [0, 5, 6], "start_single_step": [0, 5, 6], "default_path_to_dl": [0, 5, 6], "v4": [0, 5], "anc350v4lib": [0, 5, 6], "get_dc_voltag": [0, 5, 6], "get_lut_nam": [0, 5, 6], "load_lut_fil": [0, 5, 6], "register_external_ip": [0, 5, 6], "set_target_ground": [0, 5, 6], "anc300": [0, 108, 109], "ask_raw": [0, 5, 14, 23, 41], "getal": [0, 5, 31], "stopal": [0, 5], "version": [0, 1, 4, 5, 6, 12, 13, 14, 16, 20, 21, 23, 25, 26, 28, 29, 30, 31, 39, 40, 42, 43, 57, 101, 103, 104], "write_raw": [0, 5, 14, 23, 27, 41], "anc300axi": [0, 5], "frequenc": [0, 5, 6, 10, 14, 21, 29, 30, 31, 34, 39, 40, 44, 49, 52, 55, 56, 93, 94, 96, 100, 107, 108], "voltag": [0, 5, 6, 8, 14, 21, 26, 29, 30, 31, 36, 39, 40, 47, 53, 58, 59, 63, 64, 66, 70, 72, 75, 76, 80, 89, 90, 91, 92, 99, 100, 108], "offset": [0, 5, 18, 21, 29, 31, 43, 54, 57], "filter": [0, 5, 21, 29, 36, 48, 73], "mode": [0, 1, 4, 5, 6, 8, 10, 14, 18, 21, 23, 26, 28, 29, 30, 31, 36, 39, 40, 41, 45, 46, 49, 52, 55, 56, 57, 59, 63, 68, 70, 74, 79, 81, 90, 93, 96, 99, 108], "ac": [0, 5, 21, 36], "dc": [0, 5, 6, 18, 20, 21, 29, 31, 36, 39, 40, 42, 47, 57, 58, 59, 64, 69, 73, 74, 79, 100], "move": [0, 5, 6, 27, 43, 49, 57, 67, 108], "start": [0, 1, 5, 6, 8, 10, 20, 21, 26, 27, 28, 29, 30, 31, 36, 39, 40, 43, 46, 48, 52, 56, 57, 60, 61, 64, 66, 68, 69, 71, 74, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 96, 101, 102, 106, 108], "triggerup": [0, 5], "triggerdown": [0, 5], "stopmov": [0, 5, 49], "waitmov": [0, 5, 49], "anc300triggerout": [0, 5], "state": [0, 1, 5, 6, 10, 14, 21, 24, 26, 29, 31, 35, 42, 46, 48, 52, 56, 57, 68, 69, 81, 91, 92, 93, 96], "anc300sim": 0, "mockvisa": [0, 5, 31], "set_address": [0, 5, 17, 31], "mockvisahandl": [0, 5, 31, 93], "ask": [0, 5, 12, 14, 23, 27, 29, 30, 31, 39, 41, 93, 100], "clear": [0, 5, 6, 8, 14, 29, 31, 39, 40, 54, 61, 94], "queri": [0, 5, 12, 24, 26, 27, 29, 31, 39, 52, 67, 69, 79, 108], "read": [0, 1, 5, 6, 10, 14, 21, 26, 28, 29, 30, 31, 36, 39, 40, 48, 49, 56, 61, 63, 70, 90, 92, 93, 95, 100, 101, 102, 108, 109], "write": [0, 1, 5, 12, 14, 18, 21, 23, 26, 27, 29, 30, 31, 39, 41, 45, 64, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 93, 109], "cmddef": [0, 5, 31], "anc350": [0, 6], "anc350axi": [0, 5], "statu": [0, 5, 6, 13, 14, 20, 21, 23, 25, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 53, 62, 67, 94, 96, 102, 108], "target_posit": [0, 5], "target_rang": [0, 5, 6], "actuat": [0, 5, 6, 67], "actuator_nam": [0, 5], "capacit": [0, 5, 6], "disable_auto_mov": [0, 5], "enable_auto_mov": [0, 5], "multiple_step": [0, 5], "single_step": [0, 5], "stop_continuous_mov": [0, 5], "aviosi": [0, 108, 109], "ip_power_9258": [0, 50], "aviosys_ip_power_9258": [0, 7, 50], "address": [0, 2, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40, 42, 49, 50, 52, 56, 58, 62, 63, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 97, 99, 108], "powerchannel": [0, 7], "channel_id": [0, 7], "channel_nam": [0, 7, 44, 56, 105], "bilt": [0, 108, 109], "itest": [0, 108, 109], "chan_to_": [0, 8], "chan_to_id": [0, 8], "print_dac_voltag": [0, 8], "set_dacs_zero": [0, 8, 30], "itestchannel": [0, 8], "clear_alarm": [0, 8], "stop": [0, 1, 4, 5, 6, 8, 10, 18, 21, 26, 27, 29, 31, 33, 39, 40, 43, 44, 49, 52, 64, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 99, 101, 102, 106, 108], "itestmultichannelparamet": [0, 8], "bluefor": [0, 3, 108, 109], "get_pressur": [0, 9, 28], "coppermountain": [0, 108, 109], "m5180": [0, 108, 109], "frequencysweepmagphas": [0, 10, 31], "set_sweep": [0, 10, 31], "get_": [0, 10, 52], "reset_averag": [0, 10], "update_lin_trac": [0, 10], "pointiq": [0, 10], "pointmagphas": [0, 10], "s5048": 0, "tracenotreadi": [0, 10], "invalidate_trac": [0, 10], "reset": [0, 6, 10, 14, 21, 26, 27, 29, 30, 31, 36, 39, 40, 55, 67, 70, 71, 72, 73, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 94, 108], "run_n_tim": [0, 10], "run_contin": [0, 10], "startup": [0, 10, 20, 21, 29, 30, 31, 49, 69, 93], "cmts5048trace": [0, 10], "prepare_trac": [0, 10], "cmtintpars": [0, 10], "cryocon": 0, "cryocon_26": 0, "cryogen": 0, "cryogenicsms120c": 0, "default_current_ramp_limit": [0, 12], "default_max_current_ramp_limit": [0, 12], "daylightsolut": 0, "mircat": 0, "drsdaylightsolutions_mircat": [0, 13], "arm": [0, 13, 36, 40], "check_tun": [0, 13], "disarm": [0, 13], "get_limit": [0, 13], "get_pulse_paramet": [0, 13], "get_rang": [0, 13], "set_pulse_paramet": [0, 13], "dll_path": [0, 4, 13, 26, 33, 34, 38, 42, 43, 44, 105], "erainstru": [0, 53], "erasynth": [0, 108, 109], "reference_tcxo_ocxo": [0, 14, 53], "erasynthbas": [0, 14], "clear_read_buff": [0, 14], "esp8266_upload_mod": [0, 14], "factory_reset": [0, 14], "get_configur": [0, 14], "get_diagnostic_statu": [0, 14], "off": [0, 5, 6, 7, 8, 14, 20, 21, 23, 28, 29, 30, 31, 36, 40, 45, 47, 53, 56, 62, 66, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 108], "preset": [0, 5, 6, 14], "print_pyvisa_resourc": [0, 14, 53], "run_self_test": [0, 14, 20, 21, 31, 53], "wifi_off": [0, 14], "wifi_on": [0, 14], "current": [0, 1, 5, 6, 9, 12, 13, 14, 21, 23, 27, 28, 29, 30, 31, 35, 39, 40, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 56, 57, 59, 64, 67, 68, 70, 81, 88, 90, 91, 92, 93, 96, 97, 100, 101, 102, 105, 108], "debug_messages_en": [0, 14, 53], "embedded_vers": [0, 14, 53], "modulation_am_depth": [0, 14, 53], "modulation_en": [0, 14, 53], "modulation_fm_devi": [0, 14, 53], "modulation_freq": [0, 14, 53], "modulation_pulse_period": [0, 14, 53], "modulation_pulse_width": [0, 14, 53], "modulation_signal_waveform": [0, 14, 53], "modulation_sourc": [0, 14, 53], "modulation_typ": [0, 14, 21, 53], "pll_lmx1_statu": [0, 14, 53], "pll_lmx2_statu": [0, 14, 53], "pll_xtal_statu": [0, 14, 53], "power": [0, 2, 3, 5, 6, 7, 12, 14, 20, 22, 23, 28, 29, 31, 42, 44, 46, 52, 53, 56, 66, 69, 96, 105, 106, 108, 109], "ref_osc_sourc": [0, 14, 53, 99], "sweep_dwel": [0, 14, 53], "sweep_en": [0, 14, 53], "sweep_trigg": [0, 14, 53], "synthesizer_mod": [0, 14, 53], "temperatur": [0, 4, 9, 11, 14, 28, 29, 48, 51, 53, 56, 70, 90, 96, 108], "wifi_gateway_address": [0, 14, 53], "wifi_hotspot_password": [0, 14, 53], "wifi_hotspot_ssid": [0, 14, 53], "wifi_ip_address": [0, 14, 53], "wifi_mod": [0, 14, 53], "wifi_rssi": [0, 14, 53], "wifi_station_password": [0, 14, 53], "wifi_station_ssid": [0, 14, 53], "wifi_subnet_address": [0, 14, 53], "erasynthplu": [0, 14, 53], "erasynthplusplu": [0, 14, 53], "generalmicrowav": 0, "gm349": 0, "pin_map": [0, 15], "gm349attenu": [0, 15], "gentec": [0, 108, 109], "gentec_maestro": [0, 54], "model": [0, 1, 4, 5, 7, 11, 12, 13, 14, 16, 18, 20, 22, 23, 26, 27, 28, 31, 33, 34, 36, 39, 41, 42, 43, 44, 48, 53, 55, 56, 65, 66, 67, 94, 96, 99, 108, 109], "clear_zero_offset": [0, 16, 54], "set_zero_offset": [0, 16, 54], "holzworth": [0, 108, 109], "hs900": [0, 56], "hs900channel": [0, 17], "hs9008b": 0, "hs9008bchannel": [0, 17], "horiba": [0, 108, 109], "privat": [0, 18, 31, 42], "fhr_client": [0, 18], "fhrclient": [0, 18, 19], "createsp": [0, 18, 19], "deletesp": [0, 18, 19], "specommand": [0, 18, 19], "specommandiniparam": [0, 18, 19], "specommandsetup": [0, 18, 19], "fhr_server": [0, 18], "fhrserver": [0, 18, 19], "horiba_fhr": [0, 57], "speerror": [0, 18], "dcchannel": [0, 18], "dispatch": [0, 18, 19], "gratingchannel": [0, 18], "set_ini_param": [0, 18], "unit": [0, 5, 6, 8, 10, 14, 18, 20, 21, 22, 23, 29, 30, 39, 48, 50, 54, 62, 63, 67, 69, 94, 95, 104, 107], "horibafhr": [0, 18, 57], "motorchannel": [0, 18], "get_id": [0, 18, 31, 93], "set_id": [0, 18], "type": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 41, 42, 43, 44, 53, 61, 108], "portchannel": [0, 18], "is_open": [0, 18], "open": [0, 1, 6, 18, 21, 28, 57, 61, 102, 109], "set_baud_r": [0, 18], "set_timeout": [0, 18, 20, 21], "precisionmotorchannel": [0, 18], "init": [0, 12, 18, 26, 40, 57, 74, 79], "set_setup": [0, 18], "slitchannel": [0, 18, 57], "keysight": [0, 108, 109], "sd_common": [0, 20], "sd_awg": [0, 20], "awg_config_external_trigg": [0, 20, 21, 60, 61], "awg_flush": [0, 20, 21], "awg_from_arrai": [0, 20, 21], "awg_from_fil": [0, 20, 21], "awg_is_run": [0, 20, 21], "awg_jump_next_waveform": [0, 20, 21], "awg_paus": [0, 20, 21], "awg_pause_multipl": [0, 20, 21], "awg_queue_config": [0, 20, 21, 60, 61], "awg_queue_waveform": [0, 20, 21, 60, 61], "awg_resum": [0, 20, 21], "awg_resume_multipl": [0, 20, 21], "awg_start": [0, 20, 21], "awg_start_multipl": [0, 20, 21, 60, 61], "awg_stop": [0, 20, 21], "awg_stop_multipl": [0, 20, 21], "awg_trigg": [0, 20, 21], "awg_trigger_multipl": [0, 20, 21], "config_amplitude_modul": [0, 20, 21], "config_angle_modul": [0, 20, 21], "config_clock_io": [0, 20, 21], "config_fpga_trigg": [0, 20, 21], "config_trigger_io": [0, 20, 21], "convert_prescaler_to_sample_r": [0, 20, 21], "convert_sample_rate_to_prescal": [0, 20, 21], "flush_waveform": [0, 20, 21], "get_clock_frequ": [0, 20, 21], "get_clock_sync_frequ": [0, 20, 21], "get_trigger_io": [0, 20, 21], "get_waveform_statu": [0, 20, 21], "get_waveform_typ": [0, 20, 21], "load_fpga_imag": [0, 20, 21], "load_waveform": [0, 20, 21], "load_waveform_int16": [0, 20, 21], "new_waveform_from_doubl": [0, 20, 21], "new_waveform_from_fil": [0, 20, 21], "new_waveform_from_int": [0, 20, 21], "read_fpga": [0, 20, 21], "read_fpga_arrai": [0, 20, 21], "reload_waveform": [0, 20, 21], "reload_waveform_int16": [0, 20, 21], "reset_channel_phas": [0, 20, 21], "reset_clock_phas": [0, 20, 21], "reset_multiple_channel_phas": [0, 20, 21], "set_channel_amplitud": [0, 20, 21, 60, 61], "set_channel_frequ": [0, 20, 21], "set_channel_offset": [0, 20, 21, 60, 61], "set_channel_phas": [0, 20, 21], "set_channel_wave_shap": [0, 20, 21, 60, 61], "set_clock_frequ": [0, 20, 21], "set_digital_filter_mod": [0, 20, 21], "set_iq_modul": [0, 20, 21], "set_marker_config": [0, 20, 21], "set_trigger_io": [0, 20, 21], "write_fpga": [0, 20, 21], "write_fpga_arrai": [0, 20, 21], "sd_awg_async": [0, 20], "asynchron": [0, 20, 21, 43, 108], "set_asynchron": [0, 20, 21], "set_waveform_limit": [0, 20, 21], "upload_waveform": [0, 20, 21, 40, 45, 60, 61, 99], "uploader_readi": [0, 20, 21], "task": [0, 20, 21, 26, 64], "run": [0, 1, 6, 10, 14, 20, 21, 23, 29, 31, 35, 39, 41, 45, 49, 52, 55, 60, 61, 66, 69, 71, 73, 77, 78, 79, 82, 83, 84, 86, 88, 94, 97, 99, 106, 108, 109], "result": [0, 5, 6, 20, 21, 27, 29, 30, 31, 36, 55, 64, 70, 90, 94, 108], "waveformrefer": [0, 20, 21], "is_upload": [0, 20, 21], "releas": [0, 20, 21, 38], "wait_upload": [0, 20, 21], "awg_nam": [0, 20, 21], "wave_numb": [0, 20, 21], "switchabl": [0, 20, 21], "thread": [0, 20, 21, 30, 35], "sd_dig": [0, 20], "daq_flush": [0, 20, 21], "daq_flush_multipl": [0, 20, 21], "daq_read": [0, 20, 21], "daq_start": [0, 20, 21], "daq_start_multipl": [0, 20, 21], "daq_stop": [0, 20, 21], "daq_stop_multipl": [0, 20, 21], "daq_trigg": [0, 20, 21], "daq_trigger_multipl": [0, 20, 21], "get_coupl": [0, 20, 21], "get_full_scal": [0, 20, 21], "get_imped": [0, 20, 21], "get_prescal": [0, 20, 21], "get_trigger_mod": [0, 20, 21], "get_trigger_threshold": [0, 20, 21], "set_analog_trigger_mask": [0, 20, 21], "set_clksys_frequ": [0, 20, 21], "set_coupl": [0, 20, 21], "set_daq_trigger_delai": [0, 20, 21], "set_daq_trigger_mod": [0, 20, 21], "set_digital_trigger_mod": [0, 20, 21], "set_digital_trigger_sourc": [0, 20, 21], "set_ext_trigger_behaviour": [0, 20, 21], "set_ext_trigger_sourc": [0, 20, 21], "set_full_scal": [0, 20, 21], "set_imped": [0, 20, 21], "set_n_cycl": [0, 20, 21], "set_n_point": [0, 20, 21], "set_points_per_cycl": [0, 20, 21], "set_prescal": [0, 20, 21], "set_trigger_threshold": [0, 20, 21], "sd_modul": [0, 20], "close_soft": [0, 20, 21], "get_chassi": [0, 20, 21], "get_fpga_pc_port": [0, 20, 21], "get_hvi_regist": [0, 20, 21], "get_module_count": [0, 20, 21], "get_open": [0, 20, 21], "get_product_nam": [0, 20, 21], "get_product_name_by_index": [0, 20, 21], "get_product_name_by_slot": [0, 20, 21], "get_pxi_trigg": [0, 20, 21], "get_serial_numb": [0, 20, 21, 33], "get_serial_number_by_index": [0, 20, 21], "get_serial_number_by_slot": [0, 20, 21], "get_slot": [0, 20, 21], "get_typ": [0, 20, 21], "get_type_by_index": [0, 20, 21], "get_type_by_slot": [0, 20, 21], "open_with_serial_numb": [0, 20, 21], "open_with_slot": [0, 20, 21], "set_fpga_pc_port": [0, 20, 21], "set_hvi_regist": [0, 20, 21], "set_pxi_trigg": [0, 20, 21, 60, 61], "result_pars": [0, 20, 21], "memory_manag": [0, 20], "memorymanag": [0, 20, 21], "allocatedslot": [0, 20, 21], "allocation_ref": [0, 20, 21], "number": [0, 1, 4, 5, 6, 8, 10, 12, 14, 20, 21, 24, 26, 27, 28, 29, 30, 31, 33, 35, 36, 39, 40, 42, 43, 44, 45, 48, 49, 60, 61, 67, 69, 87, 95, 97, 102, 105], "alloc": [0, 20, 21, 29, 45], "allocation_st": [0, 20, 21], "get_uninitialized_slot": [0, 20, 21], "mem_usag": [0, 20, 21], "memory_s": [0, 20, 21], "keysight_e36313a": 0, "e36313a": [0, 20], "e36313achannel": [0, 20], "keysight_e8267d": 0, "deg_to_rad": [0, 20], "rad_to_deg": [0, 20], "parse_on_off": [0, 20], "keysight_j7211": 0, "keysight_m3201a": 0, "keysight_m3300a": 0, "m3300a_awg": [0, 20], "m3300a_dig": [0, 20], "m3202a": [0, 21, 108, 109], "lakeshor": [0, 108, 109], "model_331": [0, 62], "sensorchannel": [0, 22], "channel": [0, 1, 5, 7, 8, 9, 10, 14, 17, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 43, 44, 45, 51, 56, 57, 58, 60, 61, 62, 64, 67, 70, 73, 74, 75, 76, 79, 80, 81, 85, 87, 88, 89, 90, 91, 92, 94, 99, 100, 107, 108, 109], "model_625": [0, 63], "lakeshore625": [0, 22, 63], "set_field": [0, 22, 63], "lighthousephoton": 0, "lighthouse_photonics_sprout_g": 0, "lighthousephotonicssproutg": [0, 23], "ramp_up": [0, 23], "device_info": [0, 23], "enabl": [0, 5, 6, 14, 21, 23, 29, 31, 36, 41, 42, 43, 45, 54, 63, 66, 69, 97, 99], "output_mod": [0, 23, 29, 58, 73], "output_pow": [0, 23], "output_setpoint": [0, 23], "work_hour": [0, 23], "m2": [0, 14, 40], "m2_solstis_3": 0, "m2solstis3": [0, 24], "poll_move_wave_t": [0, 24], "poll_wave_m": [0, 24], "send_messag": [0, 24], "snapshot_bas": [0, 24, 29, 45], "stop_move_wave_t": [0, 24], "stop_wave_m": [0, 24], "montanainstru": 0, "cryostat": 0, "montanainstruments_cryost": [0, 25], "set_temp_and_wait": [0, 25], "standbi": [0, 25], "start_cooldown": [0, 25], "start_warmup": [0, 25], "stop_autom": [0, 25], "wait_stabl": [0, 25], "nationalinstru": [0, 64, 65, 66], "daq": [0, 21, 108, 109], "daqanaloginputvoltag": [0, 26], "daqanaloginput": [0, 26, 108], "daqanalogoutputvoltag": [0, 26], "daqanalogoutput": [0, 26, 108], "daqdigitaloutputst": [0, 26], "daqdigitaloutput": [0, 26], "pxie_2597": [0, 65], "ni_pxie_2597": [0, 26, 65], "pxie_5654": [0, 66], "ni_pxie_5654": [0, 26, 66], "nationalinstruments_pxie_5654": [0, 26], "rfsg": [0, 108, 109], "ni_rfsg": [0, 26, 66], "nationalinstruments_rfsg": [0, 26], "abort": [0, 6, 26, 29, 40, 71, 77, 78, 83, 84, 85, 86], "firmwar": [0, 1, 4, 5, 6, 7, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 29, 33, 34, 36, 39, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105], "serial": [0, 1, 4, 5, 6, 7, 12, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 33, 34, 36, 39, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105], "vendor": [0, 1, 4, 5, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 33, 34, 36, 39, 41, 42, 44, 48, 52, 53, 56, 59, 63, 65, 66, 67, 94, 95, 96, 99, 105], "switch": [0, 5, 6, 8, 21, 28, 29, 30, 42, 43, 44, 67, 69, 100, 102, 106, 108, 109], "ni_switch": [0, 26], "disconnect_al": [0, 26, 65], "switchchannel": [0, 26], "connect_to": [0, 26, 65], "disconnect_from": [0, 26], "disconnect_from_al": [0, 26], "dll_wrapper": 0, "attributewrapp": [0, 26], "dtype": [0, 26, 39, 61], "valu": [0, 1, 4, 5, 6, 8, 10, 12, 14, 21, 22, 24, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 42, 43, 44, 45, 48, 52, 53, 56, 57, 59, 61, 63, 65, 66, 69, 71, 93, 94, 95, 96, 99, 100, 102, 105], "nidllwrapp": [0, 26], "error_messag": [0, 26], "get_attribut": [0, 26], "set_attribut": [0, 26], "wrap_dll_funct": [0, 26], "wrap_dll_function_check": [0, 26], "namedargtyp": [0, 26], "argtyp": [0, 26], "name": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40, 42, 43, 44, 45, 49, 50, 54, 56, 57, 58, 62, 63, 66, 68, 69, 71, 76, 85, 93, 94, 102, 105, 107, 108, 109], "c_str": [0, 26], "ni_dll_instru": 0, "nidllinstru": [0, 26], "visa_typ": 0, "newport": [0, 108, 109], "ag_uc8": [0, 67], "newport_ag_uc8_errorcod": [0, 27], "newport_ag_uc8_except": [0, 27], "newport_ag_uc8": [0, 27, 67], "ask_channel": [0, 27, 29], "get_last_error": [0, 27], "write_channel": [0, 27, 29], "command_delai": [0, 27], "default_timeout": [0, 27], "reset_delai": [0, 27], "slow_command_timeout": [0, 27], "newport_ag_uc8_axi": [0, 27], "jog": [0, 27], "measure_posit": [0, 27, 67], "move_ab": [0, 27, 67], "move_limit": [0, 27], "move_rel": [0, 27, 67], "zero_posit": [0, 27, 67], "speed_tabl": [0, 27], "newport_ag_uc8_channel": [0, 27], "oxford": [0, 108, 109], "ilm200": 0, "oxfordinstruments_ilm200": [0, 28], "get_al": [0, 28, 30, 31, 40], "local": [0, 14, 28, 31, 39, 53, 100, 109], "remot": [0, 7, 28, 30, 39, 52, 109], "set_remote_statu": [0, 28], "set_to_fast": [0, 28], "set_to_slow": [0, 28], "ips120": 0, "oxfordinstruments_ips120": [0, 28], "examin": [0, 28], "heater_off": [0, 28], "heater_on": [0, 28], "hold": [0, 10, 17, 26, 28, 74, 94], "identifi": [0, 6, 21, 25, 26, 28, 39, 44, 65], "leave_persistent_mod": [0, 28], "run_to_field": [0, 28], "run_to_field_wait": [0, 28], "set_persist": [0, 28], "to_setpoint": [0, 28], "to_zero": [0, 28], "triton": [0, 108, 109], "vcl2csv": [0, 28], "kelvinox": 0, "oxfordinstruments_kelvinox_igh": [0, 28], "rotate_nvalv": [0, 28], "set_mix_chamber_heater_mod": [0, 28], "set_mix_chamber_heater_power_rang": [0, 28], "qdevil": [0, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 108, 109], "qdac1": [0, 69, 76, 85], "gener": [0, 1, 4, 5, 6, 14, 15, 20, 21, 26, 29, 30, 31, 35, 36, 39, 40, 45, 64, 89, 90, 93, 94, 107, 108, 109], "get_label": [0, 29, 35, 69], "vhigh_ihigh": [0, 29, 69], "vhigh_ilow": [0, 29, 69], "vlow_ilow": [0, 29, 69], "qdac": [0, 24, 29, 75, 90, 108], "clear_read_queu": [0, 29], "connect_messag": [0, 29], "print_overview": [0, 29, 69], "print_slop": [0, 29, 69], "print_sync": [0, 29, 69], "ramp_voltag": [0, 29, 69], "ramp_voltages_2d": [0, 29, 69], "max_status_ag": [0, 29], "qdacchannel": [0, 29], "qdacmultichannelparamet": [0, 29], "waveform": [0, 5, 14, 20, 21, 29, 31, 40, 45, 78, 85, 89, 90, 93, 108], "all_waveform": [0, 29], "sine": [0, 14, 29, 31, 53, 60, 61, 78, 89, 90, 108], "squar": [0, 14, 21, 29, 31, 72, 78, 85, 89, 90, 108], "staircas": [0, 29, 69], "triangl": [0, 14, 29, 31, 78, 89, 90, 108], "qdac2": [0, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88], "arrangement_context": [0, 29], "actual_voltag": [0, 29], "add_correct": [0, 29], "currents_a": [0, 29], "get_trigger_by_nam": [0, 29, 81], "initiate_correct": [0, 29, 87], "leakag": [0, 29, 89, 90, 108], "set_virtual_voltag": [0, 29, 75, 76, 87], "virtual_detun": [0, 29, 80, 87], "virtual_sweep": [0, 29, 80], "virtual_sweep2d": [0, 29, 74, 80, 81, 87], "virtual_voltag": [0, 29], "channel_numb": [0, 21, 27, 29, 44, 45, 105], "contact_nam": [0, 29, 75, 76], "correction_matrix": [0, 29], "shape": [0, 10, 21, 26, 29, 31, 64, 94], "awg_context": [0, 29], "cycles_remain": [0, 29], "end_mark": [0, 29, 72], "period_end_mark": [0, 29, 71, 82], "period_start_mark": [0, 29, 86], "start_mark": [0, 29], "start_on": [0, 29, 72, 81], "start_on_extern": [0, 29, 85], "start_once_on": [0, 29], "start_once_on_extern": [0, 29], "list_context": [0, 29], "append": [0, 29, 46, 48, 52, 56, 57, 59, 60, 61, 68, 77, 81, 96], "point": [0, 10, 21, 26, 28, 29, 30, 31, 39, 40, 45, 64, 71, 77, 84, 94], "values_v": [0, 29], "measurement_context": [0, 29], "available_a": [0, 29, 81], "n_avail": [0, 29], "n_cycles_remain": [0, 29], "peek_a": [0, 29], "allocate_trac": [0, 29, 71], "allocate_trigg": [0, 29, 85], "arrang": [0, 29, 74, 75, 76, 80, 81, 85, 87], "connect_external_trigg": [0, 29, 85], "error": [0, 1, 5, 6, 18, 21, 27, 29, 30, 31, 35, 36, 39, 43, 45, 47, 60, 61, 65, 69, 71, 72, 73, 77, 79, 81, 82, 83, 86, 94, 100], "free_all_trigg": [0, 29], "free_trigg": [0, 29], "get_recorded_scpi_command": [0, 29, 74], "mac": [0, 29], "n_channel": [0, 29], "n_error": [0, 29], "n_external_input": [0, 29], "n_external_output": [0, 29], "n_trigger": [0, 29, 36], "remove_trac": [0, 29, 71], "start_al": [0, 29, 71, 72, 78], "start_recording_scpi": [0, 29, 74], "trace": [0, 10, 29, 36, 55, 71, 108], "write_float": [0, 29], "qdac2channel": [0, 29], "arbitrary_wav": [0, 29, 71], "clear_measur": [0, 29, 81, 88], "dc_list": [0, 29, 72, 77], "dc_sweep": [0, 29, 84], "measur": [0, 5, 6, 8, 10, 26, 27, 29, 31, 35, 36, 39, 40, 54, 63, 65, 67, 69, 75, 76, 81, 91, 92, 97, 106, 108, 109], "sine_wav": [0, 29, 78, 82], "square_wav": [0, 29, 72, 78, 83, 85], "triangle_wav": [0, 29, 78, 86], "write_channel_float": [0, 29], "qdac2externaltrigg": [0, 29], "qdac2trigger_context": [0, 29], "sine_context": [0, 29], "square_context": [0, 29], "sweep_context": [0, 29], "start_v": [0, 29, 80, 84, 87], "stop_v": [0, 29, 84], "time_": [0, 29], "trace_context": [0, 29], "size": [0, 4, 5, 8, 21, 29, 30, 31, 36, 39, 40, 61, 67, 79, 97, 106], "triangle_context": [0, 29], "virtual_sweep_context": [0, 29], "actual_values_v": [0, 29, 87], "comma_sequence_to_list": [0, 29], "comma_sequence_to_list_of_float": [0, 29], "diff_matrix": [0, 29], "floats_to_comma_separated_list": [0, 29], "forward_and_back": [0, 29], "ints_to_comma_separated_list": [0, 29], "split_version_string_into_compon": [0, 29], "qdac2_arrai": [0, 76, 85], "array_arrangement_context": [0, 29], "qdac_nam": [0, 29], "sync": [0, 6, 21, 29, 31, 70, 85, 90, 108], "common_trigger_in": [0, 29, 85], "control": [0, 5, 6, 7, 11, 12, 20, 23, 24, 27, 28, 29, 30, 40, 42, 45, 52, 57, 70, 76, 85, 90, 108, 109], "trigger_out": [0, 29, 85], "qutech": 0, "d4": 0, "get_buffers_en": [0, 30], "get_filter_valu": [0, 30], "get_mod": [0, 30], "d5a": 0, "set_dac_unit": [0, 30], "f1d": 0, "get_remote_set": [0, 30], "ivvi": 0, "adjust_parameter_valid": [0, 30], "get_pol_dac": [0, 30], "linspac": [0, 30, 59, 60, 61, 69, 71, 72, 74, 80, 81, 87, 94], "round_dac": [0, 30], "set_parameter_bound": [0, 30], "set_pol_dacrack": [0, 30], "dac_quata": [0, 30], "full_rang": [0, 30], "half_rang": [0, 30], "resolut": [0, 6, 30, 55], "m2j": 0, "s5i": 0, "optimize_for_frequ": [0, 30], "rohdeschwarz": [0, 91, 92, 93, 106], "hmc804x": [0, 31], "rohdeschwarzhmc804xchannel": [0, 31, 32], "hmp": [0, 31], "rohdeschwarzhmpchannel": [0, 31, 32], "get_max_curr": [0, 31, 32], "send_cmd": [0, 31, 32], "hmc8041": 0, "rohdeschwarzhmc8041": [0, 31], "hmc8042": 0, "rohdeschwarzhmc8042": [0, 31], "hmc8043": [0, 91], "rohdeschwarzhmc8043": [0, 31, 91], "hmp2020": 0, "rohdeschwarzhmp4040": [0, 31, 92], "hmp2030": 0, "hmp4030": 0, "rohdeschwarzhmp4030": [0, 31], "hmp4040": [0, 108, 109], "smb100a": 0, "rohdeschwarz_smb100a": [0, 31], "start_sweep": [0, 31], "smr40": 0, "rohdeschwarz_smr40": [0, 31], "do_get_frequ": [0, 31], "do_get_pow": [0, 31], "do_get_pulse_delai": [0, 31], "do_get_statu": [0, 31], "do_get_status_of_alc": [0, 31], "do_get_status_of_modul": [0, 31], "do_set_frequ": [0, 31], "do_set_pow": [0, 31], "do_set_pulse_delai": [0, 31], "do_set_statu": [0, 31], "do_set_status_of_alc": [0, 31], "do_set_status_of_modul": [0, 31], "off_modul": [0, 31], "on_modul": [0, 31], "set_ext_trig": [0, 31], "smw200a": [0, 108, 109], "amplitudemodul": [0, 31], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 54, 56, 58, 59, 66, 93, 108, 109], "depth": [0, 14, 31], "total_depth": [0, 31], "coupling_mod": [0, 31], "deviation_ratio": [0, 31, 93], "sensit": [0, 31, 39, 66, 108, 109], "frequencymodul": [0, 31], "deviat": [0, 14, 31, 93], "total_devi": [0, 31], "iqchannel": [0, 31], "level": [0, 5, 6, 20, 28, 30, 31, 36, 39, 45, 55, 66, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 97], "coupl": [0, 21, 31, 36], "i_bia": [0, 31], "q_bia": [0, 31], "i_offset": [0, 31], "q_offset": [0, 31], "iqmodul": [0, 31], "gain": [0, 5, 21, 30, 31, 69], "swap": [0, 31], "crest_factor": [0, 31], "wideband": [0, 31], "lfoutputchannel": [0, 31], "bandwidth": [0, 31, 55, 106], "source_path": [0, 31], "period": [0, 6, 14, 21, 29, 31, 35, 39, 60, 61], "freq_manu": [0, 31], "freq_min": [0, 31], "freq_max": [0, 31], "shape_duty_cycl": [0, 31], "shape_period": [0, 31], "shape_width": [0, 31], "trapez_fal": [0, 31], "trapez_height": [0, 31], "trapez_period": [0, 31], "trapez_ris": [0, 31], "triangle_period": [0, 31], "triangle_ris": [0, 31], "lfoutputsweep": [0, 31], "dwell": [0, 14, 31], "execut": [0, 1, 19, 21, 28, 30, 31, 35, 36, 39, 40, 69], "retrac": [0, 31], "space": [0, 29, 30, 31, 45, 94], "log_step": [0, 31], "lin_step": [0, 31], "outputchannel": [0, 31], "sweep_cent": [0, 31], "sweep_span": [0, 31], "sweep_start": [0, 31], "sweep_stop": [0, 31], "losc_input": [0, 31], "losc_mod": [0, 31], "losc_output": [0, 31], "losc_stat": [0, 31], "outputfrequencysweep": [0, 31], "outputlevelsweep": [0, 31], "attenu": [0, 15, 20, 31, 44, 55, 69, 108, 109], "phasemodul": [0, 31], "ratio": [0, 31], "pulsegener": [0, 31], "polar": [0, 6, 21, 30, 31, 42, 43, 71, 77, 104], "output": [0, 1, 2, 5, 6, 12, 14, 15, 21, 23, 26, 28, 29, 30, 31, 36, 39, 40, 44, 45, 46, 47, 48, 52, 53, 56, 57, 60, 61, 62, 64, 66, 68, 70, 74, 80, 81, 82, 87, 90, 94, 96, 107, 108], "pulsemodul": [0, 31], "transition_typ": [0, 31], "video_polar": [0, 31], "imped": [0, 21, 31], "trigger_imped": [0, 31], "double_delai": [0, 31], "double_width": [0, 31], "trigger_mod": [0, 20, 21, 31, 48, 60, 61, 99], "width": [0, 6, 13, 14, 29, 31, 33, 57, 95], "delai": [0, 8, 12, 21, 29, 30, 31, 39, 60, 61, 67, 69, 106], "rohdeschwarz_smw200a": [0, 31, 93], "gen_trigger_puls": [0, 31], "get_error": [0, 31], "get_opt": [0, 31, 93], "smw200asim": 0, "zvl13": [0, 108, 109], "complexsweep": [0, 31], "frequencysweep": [0, 31], "safrequencysweep": [0, 31], "calibr": [0, 12, 23, 29, 31, 35, 39, 106, 108], "na_mod": [0, 31], "sa_mod": [0, 31], "update_trac": [0, 31], "shamrock": [0, 108, 109], "sr750": [0, 108, 109], "shamrockcif": [0, 33], "get_calibr": [0, 33], "get_grat": [0, 33], "get_grating_info": [0, 33], "get_number_devic": [0, 33], "get_number_gr": [0, 33], "get_number_pixel": [0, 33], "get_pixel_width": [0, 33], "get_slit": [0, 33], "get_wavelength": [0, 33], "get_wavelength_limit": [0, 33], "set_grat": [0, 33], "set_number_pixel": [0, 33], "set_pixel_width": [0, 33], "set_slit": [0, 33], "set_wavelength": [0, 33], "shamrock_sr750": [0, 33, 95], "device_id": [0, 33, 38, 42, 45], "number_gr": [0, 33], "signalcor": [0, 96], "deviceinfot": [0, 34], "device_interfac": [0, 34], "firmware_revis": [0, 34], "hardware_revis": [0, 34], "man_dat": [0, 34], "product_serial_numb": [0, 34], "devicerfparamst": [0, 34], "atten_valu": [0, 34], "buffer_point": [0, 34], "level_dac_valu": [0, 34], "power_level": [0, 34, 66], "rf_phase_offset": [0, 34], "sweep_cycl": [0, 34], "sweep_dwell_tim": [0, 34], "sweep_start_freq": [0, 34], "sweep_step_freq": [0, 34], "sweep_stop_freq": [0, 34], "devicestatust": [0, 34], "list_mode_t": [0, 34], "operate_status_t": [0, 34], "pll_status_t": [0, 34], "hwtriggert": [0, 34], "edg": [0, 6, 21, 34, 36, 55, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "pxi_en": [0, 34], "pxi_lin": [0, 34], "listmodet": [0, 34], "hw_trigger": [0, 34], "return_to_start": [0, 34], "step_on_hw_trig": [0, 34], "sweep_dir": [0, 34], "sweep_mod": [0, 34], "tri_waveform": [0, 34], "trig_out_en": [0, 34], "trig_out_on_cycl": [0, 34], "mandat": [0, 34], "dai": [0, 9, 34, 55], "hour": [0, 23, 34], "month": [0, 34], "year": [0, 34], "operatestatust": [0, 34], "auto_pwr_dis": [0, 34], "device_access": [0, 34], "device_standbi": [0, 34], "ext_ref_detect": [0, 34], "ext_ref_lock_en": [0, 34], "harmonic_ss": [0, 34], "list_mode_run": [0, 34], "output_en": [0, 34, 59, 66, 102], "over_temp": [0, 34], "pci_clk_en": [0, 34], "ref_out_select": [0, 34], "rf1_lock_mod": [0, 34], "rf1_loop_gain": [0, 34], "rf_mode": [0, 34, 96], "pllstatust": [0, 34], "crs_aux_pll_ld": [0, 34], "crs_pll_ld": [0, 34], "crs_ref_pll_ld": [0, 34], "fine_pll_ld": [0, 34], "ref_100_pll_ld": [0, 34], "ref_10_pll_ld": [0, 34], "sum_pll_ld": [0, 34], "sc5521a": [0, 34, 108, 109], "singlequantum": [0, 97], "channelarrai": [0, 35], "communicationhandl": [0, 35], "acquire_cnts_t": [0, 35], "auto_cali_bias_curr": [0, 35], "auto_cali_finish": [0, 35], "enable_detector": [0, 35], "get_bias_curr": [0, 35], "get_bias_voltag": [0, 35], "get_measurement_period": [0, 35], "get_number_of_detector": [0, 35], "get_trigger_level": [0, 35], "set_bias_curr": [0, 35], "set_dark_counts_auto_iv": [0, 35], "set_measurement_period": [0, 35], "set_trigger_level": [0, 35], "sqcount": [0, 35], "get_n": [0, 35], "sqtalk": [0, 35], "add_labelprop": [0, 35], "get_all_label": [0, 35], "send": [0, 5, 14, 19, 23, 27, 29, 30, 35, 39, 40, 41, 66, 94], "sub_json": [0, 35], "timearrai": [0, 35], "websqcontrolqcod": [0, 35, 97], "py_head": [0, 36], "h2py": [0, 36], "main": [0, 26, 31, 36, 37, 40, 57, 65], "process": [0, 36, 37], "pytifi": [0, 36, 37], "reg": [0, 36], "giga": [0, 36, 37], "giga_b": [0, 36, 37], "kilo": [0, 36, 37], "kilo_b": [0, 36, 37], "mega": [0, 36, 37], "mega_b": [0, 36, 37], "spcerr": [0, 36], "m4i": 0, "active_channel": [0, 36], "blockavg_hardware_trigger_acquisit": [0, 36], "convert_to_voltag": [0, 36], "gated_trigger_acquisit": [0, 36], "get_card_memori": [0, 36], "get_card_typ": [0, 36], "get_data": [0, 36], "get_error_info32bit": [0, 36], "get_max_sample_r": [0, 36], "initialize_channel": [0, 36], "multiple_trigger_acquisit": [0, 36], "retrieve_data": [0, 36], "set_channel_or_trigger_set": [0, 36], "set_channel_set": [0, 36], "set_ext0_or_trigger_set": [0, 36], "setup_multi_record": [0, 36], "single_software_trigger_acquisit": [0, 36], "single_software_trigger_acquisition_boxcar": [0, 36], "single_trigger_acquisit": [0, 36], "start_trigg": [0, 29, 36, 85], "wait_readi": [0, 36], "sztypetonam": [0, 36], "standa": [0, 108, 109], "standa_10mwa168": [0, 98], "deviceinform": [0, 38], "major": [0, 38], "manufactur": [0, 38], "manufacturerid": [0, 38], "minor": [0, 38, 75, 76], "productdescript": [0, 38], "getposit": [0, 38], "encposit": [0, 38], "uposit": [0, 38], "cmdbuffreespac": [0, 38], "curposit": [0, 38], "curspe": [0, 38], "curt": [0, 38], "encst": [0, 38], "flag": [0, 4, 6, 29, 30, 31, 33, 38, 43, 45, 69], "gpioflag": [0, 38], "ipwr": [0, 38], "iusb": [0, 38], "movest": [0, 38], "mvcmdst": [0, 38], "pwrst": [0, 38], "upwr": [0, 38], "uusb": [0, 38], "windst": [0, 38], "ucurposit": [0, 38], "ucurspe": [0, 38], "libximc": [0, 38], "command_mov": [0, 38], "enumerate_devic": [0, 38], "get_device_nam": [0, 38], "open_devic": [0, 38], "stanfordresearchsystem": [0, 94], "cs580": 0, "get_overload": [0, 39], "dg645": 0, "save_set": [0, 39, 44, 105], "self_calibr": [0, 39, 40], "self_test": [0, 39, 40], "wait": [0, 5, 8, 10, 21, 22, 23, 28, 29, 31, 36, 39, 40, 43, 49, 60, 61, 69, 101], "channel_map": [0, 39], "display_map": [0, 39], "output_map": [0, 39, 45], "polarity_map": [0, 39], "prescale_map": [0, 39], "trigger_map": [0, 39], "sim928": 0, "ask_modul": [0, 39], "byte_to_bit": [0, 39], "check_module_error": [0, 39], "find_modul": [0, 39], "get_module_idn": [0, 39], "get_module_statu": [0, 39], "get_voltag": [0, 39], "reset_modul": [0, 39], "set_smooth": [0, 39], "set_voltag": [0, 39, 91, 92], "write_modul": [0, 39], "sr844": [0, 94], "channeltrac": [0, 39], "get_buffer_length": [0, 39], "parse_binari": [0, 39], "poll_raw_binary_data": [0, 39], "update_unit": [0, 39], "generatedsetpoint": [0, 39], "update_units_if_constant_sample_r": [0, 39], "decrement_sensit": [0, 39, 94], "get_display_valu": [0, 39], "increment_sensit": [0, 39, 94], "set_sweep_paramet": [0, 39, 94], "snap": [0, 39, 94], "update_ch_unit": [0, 39], "snap_paramet": [0, 39, 94], "sensitivity_value_map": [0, 39], "value_sensitivity_map": [0, 39], "tektronix": [0, 59, 108, 109], "afg3000": [0, 108, 109], "recal": [0, 40], "reset_edit_memori": [0, 40], "save": [0, 4, 5, 6, 29, 39, 40, 44, 46, 48, 52, 56, 57, 68, 81, 96, 106, 108], "synchronize_phas": [0, 40], "afg3252": [0, 40, 99], "awg520": [0, 109], "tektronix_awg520": [0, 40], "change_fold": [0, 40], "clear_waveform": [0, 40], "delete_all_waveforms_from_list": [0, 40], "force_logicjump": [0, 40], "force_trigg": [0, 40], "get_current_folder_nam": [0, 40], "get_filenam": [0, 40], "get_folder_cont": [0, 40], "get_jumpmod": [0, 40], "get_stat": [0, 40], "goto_root": [0, 40], "load_and_set_sequ": [0, 40], "make_directori": [0, 40], "resend_waveform": [0, 40], "return_self": [0, 40], "send_pattern": [0, 40], "send_sequ": [0, 40], "send_sequence2": [0, 40], "send_waveform": [0, 40], "set_current_folder_nam": [0, 40], "set_jumpmod": [0, 40], "set_sequ": [0, 40], "set_setup_filenam": [0, 40], "keithley_2000_scan": [0, 100], "keithley_2000_scan_channel": [0, 40], "keithley_2700": 0, "set_default": [0, 40], "set_mod": [0, 40], "set_mode_volt_dc": [0, 40], "bool_to_str": [0, 40], "parsebool": [0, 40], "parseint": [0, 40], "parsestr": [0, 40], "keithley_6430": [0, 59], "set_trigger_immedi": [0, 40], "keithley_6500": [0, 100], "keithley_sens": [0, 40], "thermotek": 0, "thermotek_t255p": 0, "thermotekt255p": [0, 41], "alarm_st": [0, 41], "thorlab": [0, 108, 109], "apt": [0, 42, 101, 103, 104], "thorlabsexcept": [0, 42, 43], "thorlabshwtyp": [0, 42, 43], "bbd10x": [0, 42, 43], "bdc101": [0, 42, 43], "bsc001": [0, 42, 43], "bsc002": [0, 42, 43], "bsc101": [0, 42, 43], "dcc001": [0, 42, 43], "k10cr1": [0, 43, 108, 109], "kdc101": [0, 43], "l490mz": [0, 42, 43], "ltsxxx": [0, 42, 43], "mff10x": [0, 43, 108, 109], "mst601": [0, 42, 43], "odc001": [0, 42, 43], "ost001": [0, 42, 43], "prm1z8": [0, 43, 108, 109], "scc001": [0, 42, 43], "tdc001": [0, 43, 104], "tst001": [0, 42, 43], "thorlabs_apt": [0, 42, 43, 101, 103, 104], "apt_clean_up": [0, 42, 43, 101, 103, 104], "apt_init": [0, 42, 43], "disable_hw_channel": [0, 42, 43], "enable_event_dlg": [0, 42, 43], "enable_hw_channel": [0, 42, 43], "get_hw_info": [0, 42, 43], "get_hw_serial_num_ex": [0, 42, 43], "init_hw_devic": [0, 42, 43], "list_available_devic": [0, 42, 43], "mot_get_home_paramet": [0, 42, 43], "mot_get_posit": [0, 42, 43], "mot_get_status_bit": [0, 42, 43], "mot_get_velocity_paramet": [0, 42, 43], "mot_move_absolute_ex": [0, 42, 43], "mot_move_hom": [0, 42, 43], "mot_move_jog": [0, 42, 43], "mot_move_veloc": [0, 42, 43], "mot_set_home_paramet": [0, 42, 43], "mot_set_velocity_paramet": [0, 42, 43], "mot_stop_profil": [0, 42, 43], "cc": [0, 42], "l": [0, 6, 31, 42, 95], "kinesi": [0, 42, 102], "homelimitswitch": [0, 42], "forward": [0, 5, 6, 29, 42, 43], "revers": [0, 18, 29, 42, 43, 57], "rotationdirect": [0, 42], "thorlabs_k10cr1": [0, 42, 101], "thorlabs_kdc101": [0, 42], "kls1550": [0, 108, 109], "thorlabs_kls1550": [0, 42, 102], "thorlabs_mff10x": [0, 42, 103], "pm100d": 0, "thorlab_pm100d": [0, 42], "thorlabs_prm1z8": [0, 42, 104], "thorlabs_tdc001": [0, 42], "vaunix": [0, 108, 109], "lda": [0, 108, 109], "ldaattenu": [0, 44], "scale": [0, 21, 29, 44, 71, 94, 99], "ldachannel": [0, 44], "ldaparamet": [0, 44], "ldaworkingfrequ": [0, 44], "get_valid": [0, 44], "vaunix_lda": [0, 44, 105], "zurichinstru": [0, 107], "hf2li": [0, 108, 109], "sampl": [0, 21, 26, 30, 36, 39, 45, 55, 60, 61, 64, 74, 80, 87, 94, 97, 106], "zihdawg8": 0, "compilererror": [0, 45], "create_parameters_from_node_tre": [0, 45], "disable_channel": [0, 45], "download_device_node_tre": [0, 45], "enable_channel": [0, 36, 45], "generate_csv_sequence_program": [0, 45], "set_channel_group": [0, 45], "snapshot": [0, 14, 24, 29, 39, 45, 53, 108], "start_awg": [0, 45], "stop_awg": [0, 45], "upload_sequence_program": [0, 45], "waveform_to_csv": [0, 45], "waveform_to_wav": [0, 45], "except": [1, 6, 10, 18, 21, 23, 26, 27, 39, 40, 41, 43, 45, 56, 60, 61, 63, 65, 69, 100, 109], "base": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 52, 66, 108], "rais": [1, 5, 6, 18, 21, 23, 26, 27, 29, 30, 39, 41, 45, 60, 61, 75, 76, 93, 100], "one": [1, 5, 6, 10, 12, 14, 18, 21, 26, 27, 29, 30, 31, 34, 44, 45, 57, 60, 61, 65, 66, 67, 70, 78, 90, 93, 94, 100, 108], "": [1, 6, 8, 10, 12, 13, 14, 15, 21, 22, 26, 28, 29, 30, 31, 35, 39, 43, 44, 45, 48, 52, 53, 54, 56, 57, 59, 60, 61, 62, 66, 67, 69, 94, 99, 101, 107, 108], "daqnavi": 1, "librari": [1, 4, 5, 6, 13, 21, 26, 28, 33, 43, 60, 61, 102], "function": [1, 5, 6, 12, 14, 17, 19, 21, 26, 27, 28, 29, 30, 31, 35, 36, 40, 43, 44, 45, 49, 56, 60, 61, 64, 69, 79, 94, 108, 109], "encount": 1, "an": [1, 4, 5, 6, 7, 13, 14, 16, 18, 20, 21, 23, 26, 27, 29, 30, 31, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 48, 52, 54, 56, 57, 60, 61, 64, 65, 66, 67, 69, 80, 85, 93, 94, 95, 100, 101, 102, 107, 108, 109], "warn": [1, 6, 8, 23, 26, 45], "condit": [1, 35, 40, 69], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 69, 93, 94, 101], "arg": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 100], "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 54, 56, 57, 59, 60, 61, 69, 91, 92], "kwarg": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 100], "instrument": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 53, 56, 59, 69, 85, 91, 92, 93, 94, 97, 100, 102, 108, 109], "dio": 1, "card": [1, 8, 20, 21, 36, 40, 108], "from": [1, 2, 4, 5, 6, 8, 9, 10, 12, 14, 18, 20, 21, 26, 28, 29, 30, 31, 35, 36, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109], "The": [1, 4, 5, 6, 7, 8, 12, 14, 15, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 35, 36, 39, 40, 41, 43, 44, 45, 47, 48, 51, 53, 55, 56, 57, 60, 61, 63, 64, 65, 66, 67, 70, 87, 90, 92, 93, 94, 96, 99, 100, 101, 102, 105, 107, 108, 109], "ha": [1, 4, 5, 6, 12, 14, 21, 22, 26, 29, 31, 33, 34, 35, 39, 40, 43, 44, 45, 57, 63, 65, 66, 67, 69, 94, 100, 105, 109], "six": [1, 69], "8255": 1, "ppi": 1, "c": [1, 5, 6, 7, 8, 13, 26, 28, 34, 35, 39, 46, 48, 50, 52, 53, 55, 56, 57, 60, 61, 68, 94, 96, 100, 105], "di": 1, "o": [1, 21, 26, 64], "port": [1, 5, 14, 18, 21, 24, 25, 26, 27, 29, 31, 49, 53, 57, 65, 66, 67, 69, 97, 106], "each": [1, 5, 8, 26, 27, 29, 30, 31, 39, 40, 43, 44, 53, 57, 67, 69, 75, 76, 85, 94, 95, 99, 109], "contain": [1, 2, 4, 5, 6, 7, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 29, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 57, 107, 109], "8": [1, 20, 21, 29, 30, 31, 36, 39, 45, 48, 49, 52, 53, 54, 55, 56, 58, 60, 61, 62, 63, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 95, 97, 99, 100, 104, 106], "pin": [1, 15], "can": [1, 5, 6, 7, 9, 10, 14, 20, 21, 24, 26, 28, 29, 30, 31, 36, 43, 45, 47, 52, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 91, 92, 93, 94, 100, 101, 103, 104, 105, 108, 109], "configur": [1, 6, 14, 18, 21, 26, 29, 31, 36, 39, 53, 65, 93, 99, 108], "either": [1, 4, 17, 21, 26, 31, 35, 39, 44, 59, 69, 94], "input": [1, 5, 6, 14, 21, 26, 28, 29, 30, 31, 36, 39, 40, 44, 46, 48, 52, 55, 56, 57, 61, 62, 64, 68, 81, 96, 100], "group": [1, 15, 23, 29, 45, 69], "four": [1, 7], "have": [1, 4, 6, 10, 12, 18, 21, 24, 26, 29, 30, 33, 36, 39, 40, 44, 45, 53, 56, 57, 65, 66, 67, 69, 108], "instal": [1, 6, 12, 21, 30, 31, 39, 45, 49, 52, 53, 93, 96, 102], "so": [1, 4, 5, 7, 10, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 41, 42, 44, 45, 64, 69, 94, 99, 101], "biodaq": 1, "access": [1, 6, 29, 56, 105], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 48, 49, 52, 55, 56, 57, 60, 61, 63, 64, 65, 66, 67, 69, 91, 92, 93, 94, 96, 100, 101, 107, 108, 109], "qcode": [1, 2, 3, 5, 8, 9, 10, 13, 14, 15, 17, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 34, 35, 39, 40, 42, 43, 44, 45, 46, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 68, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 94, 96, 97, 106, 108], "us": [1, 4, 5, 6, 8, 10, 12, 14, 15, 17, 18, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 33, 35, 36, 39, 40, 42, 43, 44, 45, 53, 55, 60, 61, 62, 63, 65, 66, 67, 69, 85, 88, 90, 99, 107, 109], "python": [1, 2, 6, 8, 9, 10, 21, 26, 28, 30, 34, 36, 40, 53, 60, 61, 65, 100], "foreign": 1, "cffi": 1, "call": [1, 4, 5, 6, 12, 17, 21, 23, 26, 27, 28, 29, 30, 31, 35, 39, 41, 43, 57, 69, 100], "necessari": [1, 5, 6, 29, 31], "dynam": [1, 31, 69], "link": [1, 109], "automat": [1, 4, 5, 6, 26, 27, 29, 31, 35, 39, 44, 94, 96, 106], "load": [1, 6, 21, 31, 40, 44, 60, 61, 94, 105, 108], "declar": 1, "_bdaqctrl": 1, "h": [1, 39], "file": [1, 4, 6, 9, 13, 18, 21, 26, 28, 30, 31, 33, 35, 40, 43, 45, 51, 52, 60, 61, 65, 96], "onli": [1, 5, 6, 10, 14, 18, 20, 21, 24, 26, 29, 30, 31, 34, 39, 40, 43, 44, 45, 56, 63, 64, 66, 67, 69, 100, 102], "preprocessor": 1, "header": 1, "includ": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 29, 33, 34, 35, 36, 39, 40, 41, 42, 44], "gcc": 1, "d_bdaq_c_interfac": 1, "e": [1, 6, 17, 21, 26, 29, 39, 40, 45, 60, 61, 65, 69, 94, 95, 100, 107], "bdaqctrl": 1, "befor": [1, 5, 6, 10, 14, 21, 28, 29, 36, 39, 40, 56, 57, 67, 69, 94, 101], "abov": [1, 5, 28, 35, 63, 67, 69], "command": [1, 5, 6, 12, 14, 19, 20, 23, 27, 28, 29, 30, 31, 35, 36, 39, 40, 41, 43, 49, 53, 67, 69, 100, 101], "win32": 1, "_win32": 1, "should": [1, 4, 5, 12, 17, 18, 21, 23, 26, 27, 28, 31, 33, 35, 39, 40, 41, 44, 45, 56, 57, 61, 63, 65, 66, 69, 91, 92, 94, 105, 109], "undefin": [1, 65], "stdlib": 1, "comment": [1, 5, 31], "out": [1, 5, 28, 29, 35, 36, 56, 69, 71, 77, 86, 87, 92, 94, 101], "implement": [1, 14, 18, 21, 26, 28, 31, 44, 100, 109], "instant": [1, 39], "digit": [1, 15, 20, 21, 26, 31, 36, 39, 40, 44, 59, 60, 64, 69, 108, 109], "buffer": [1, 14, 36, 39, 108, 109], "interrupt": 1, "counter": [1, 27, 35, 61, 67, 97], "ar": [1, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 49, 53, 55, 56, 57, 63, 65, 67, 69, 93, 94, 99, 100, 105, 108, 109], "test": [1, 4, 5, 6, 12, 14, 20, 25, 26, 29, 30, 31, 33, 34, 39, 43, 44, 45, 55, 57, 64, 76, 89, 90, 93, 97, 106, 108, 109], "3": [1, 5, 6, 7, 8, 12, 14, 18, 20, 21, 27, 28, 29, 31, 39, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107], "1": [1, 5, 6, 7, 8, 10, 14, 18, 20, 21, 26, 27, 28, 29, 30, 31, 36, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107], "10": [1, 5, 14, 25, 26, 30, 36, 39, 40, 46, 48, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 99, 100, 101, 106], "0": [1, 5, 6, 8, 10, 12, 13, 14, 15, 18, 20, 21, 23, 26, 27, 28, 29, 30, 31, 35, 36, 39, 40, 41, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107], "ddl": 1, "12": [1, 12, 39, 43, 46, 48, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 67, 71, 72, 73, 80, 81, 82, 83, 84, 85, 86, 87, 92, 96, 100, 105, 106], "errorcod": 1, "occur": [1, 6, 30, 36, 39, 43, 45, 69], "irreversibli": [1, 4, 18, 26, 33, 44], "free": [1, 4, 18, 21, 26, 29, 33, 35, 44, 52], "its": [1, 4, 6, 12, 18, 21, 26, 31, 33, 39, 40, 44, 62, 67, 69, 95, 101, 108], "resourc": [1, 4, 5, 8, 17, 18, 21, 25, 26, 29, 31, 33, 39, 42, 43, 44, 65, 66, 108], "subclass": [1, 4, 18, 23, 26, 27, 31, 33, 35, 41, 44], "overrid": [1, 4, 5, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 29, 33, 34, 35, 36, 41, 42, 44, 45, 69], "thei": [1, 4, 5, 6, 18, 26, 30, 33, 44, 45, 60, 61, 69, 105], "other": [1, 4, 5, 6, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 29, 33, 34, 35, 36, 39, 41, 42, 44, 52, 56, 57, 64, 66, 67, 69, 100, 108], "specif": [1, 4, 5, 15, 18, 21, 26, 28, 29, 30, 33, 44, 49, 58, 66, 93], "pars": [1, 2, 4, 7, 12, 13, 14, 16, 18, 20, 21, 23, 26, 27, 33, 34, 36, 41, 42, 44], "standard": [1, 4, 7, 12, 13, 14, 16, 18, 20, 23, 26, 27, 29, 31, 33, 34, 35, 36, 39, 41, 42, 44], "visa": [1, 4, 5, 7, 8, 10, 13, 14, 16, 17, 18, 20, 22, 23, 26, 27, 29, 31, 33, 34, 36, 39, 40, 41, 42, 44, 65, 67, 69, 79], "idn": [1, 4, 7, 12, 13, 14, 16, 18, 20, 23, 26, 27, 28, 29, 30, 31, 33, 34, 36, 41, 42, 44, 48, 52, 53, 56, 59, 63, 65, 66, 79, 94, 95, 96, 99, 105], "respons": [1, 4, 5, 7, 10, 13, 14, 16, 18, 20, 23, 26, 27, 29, 33, 34, 36, 39, 41, 42, 44], "id": [1, 4, 6, 7, 13, 14, 16, 18, 20, 22, 23, 26, 27, 33, 34, 36, 39, 41, 42, 43, 44, 52, 55, 88, 93, 94], "dict": [1, 4, 5, 7, 13, 14, 16, 18, 20, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 36, 39, 41, 42, 44, 45, 65, 105, 107], "even": [1, 4, 5, 7, 13, 14, 16, 18, 20, 21, 23, 24, 26, 27, 29, 30, 33, 34, 36, 41, 42, 44, 69], "though": [1, 4, 7, 12, 13, 14, 16, 18, 20, 23, 26, 27, 33, 34, 36, 41, 42, 44], "i": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 48, 51, 52, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 87, 90, 93, 94, 95, 97, 99, 100, 101, 102, 105, 107, 108], "appli": [1, 4, 6, 7, 13, 14, 16, 18, 20, 21, 23, 26, 27, 31, 33, 34, 36, 41, 42, 44, 47, 56, 63], "variou": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 33, 34, 36, 41, 42, 44, 57], "well": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 33, 34, 36, 41, 42, 44, 63, 69, 91, 92, 100, 109], "ipinstru": [1, 4, 7, 13, 14, 16, 18, 20, 23, 24, 25, 26, 27, 33, 34, 36, 41, 42, 44], "here": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 29, 31, 33, 34, 36, 40, 41, 42, 44, 46, 52, 58, 67, 69, 93, 94, 96, 109], "your": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 33, 34, 36, 41, 42, 44, 61, 66, 93, 94, 96, 97, 109], "doe": [1, 4, 7, 9, 12, 13, 14, 16, 18, 20, 23, 26, 27, 28, 29, 30, 31, 33, 34, 36, 40, 41, 42, 44, 45, 57, 69, 79, 105], "support": [1, 4, 7, 13, 14, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 33, 34, 36, 41, 42, 44, 45, 47, 57, 64, 69, 94, 105, 109], "return": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 60, 61, 65, 67, 69, 94, 100], "nonstandard": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 33, 34, 36, 41, 42, 44], "string": [1, 2, 4, 6, 7, 10, 13, 14, 15, 16, 18, 20, 23, 26, 27, 28, 29, 31, 33, 34, 35, 36, 39, 40, 41, 42, 44, 57], "suppos": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 33, 34, 36, 41, 42, 44], "comma": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 29, 33, 34, 36, 41, 42, 44], "separ": [1, 4, 7, 12, 13, 14, 16, 18, 19, 20, 23, 26, 27, 28, 29, 33, 34, 36, 41, 42, 44, 45, 67], "list": [1, 4, 6, 7, 13, 14, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 36, 39, 40, 41, 42, 43, 44, 45, 53, 65, 66, 69, 74, 79, 81, 89, 90, 94, 108], "semicolon": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 33, 34, 36, 41, 42, 44], "colon": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 33, 34, 36, 41, 42, 44], "also": [1, 4, 7, 13, 14, 16, 18, 20, 21, 23, 26, 27, 28, 29, 31, 33, 34, 36, 40, 41, 42, 44, 54, 55, 56, 57, 65, 67, 69, 94, 100, 102], "common": [1, 4, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 31, 33, 34, 36, 40, 41, 42, 44, 65], "we": [1, 4, 7, 10, 13, 14, 16, 18, 20, 23, 26, 27, 28, 29, 33, 34, 36, 41, 42, 44, 48, 50, 54, 55, 56, 58, 62, 63, 65, 66, 67, 69, 93, 94, 95, 99, 103, 104, 109], "accept": [1, 4, 6, 7, 13, 14, 16, 18, 20, 23, 26, 27, 28, 33, 34, 36, 41, 42, 44], "them": [1, 4, 5, 7, 8, 13, 14, 15, 16, 18, 20, 23, 26, 27, 28, 31, 33, 34, 36, 40, 41, 42, 44, 69, 108], "A": [1, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 62, 63, 67, 107], "devic": [1, 5, 6, 7, 8, 14, 15, 18, 20, 21, 22, 23, 26, 27, 28, 30, 31, 33, 42, 43, 44, 45, 48, 49, 64, 65, 66, 67, 69, 93, 102, 105, 106, 107, 108, 109], "n": [1, 2, 5, 10, 21, 28, 30, 35, 39, 40, 55, 69, 79], "For": [1, 5, 6, 14, 18, 21, 26, 30, 36, 44, 53, 56, 57, 63, 64, 66, 69, 75, 76, 94, 100, 109], "singl": [1, 5, 6, 8, 10, 12, 21, 29, 31, 35, 36, 39, 45, 55, 63, 70, 90, 107, 108, 109], "integ": [1, 18, 21, 29, 39, 45], "which": [1, 6, 8, 9, 10, 14, 17, 20, 21, 23, 26, 27, 28, 29, 31, 35, 36, 39, 40, 42, 43, 44, 45, 55, 56, 57, 63, 65, 66, 69, 75, 76, 94, 101, 102, 109], "encod": [1, 24, 29], "bit": [1, 6, 15, 18, 19, 21, 30, 39, 43, 44, 105], "set": [1, 4, 5, 6, 8, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 33, 35, 36, 39, 40, 42, 43, 44, 45, 48, 49, 52, 56, 57, 59, 60, 61, 62, 63, 65, 66, 70, 90, 91, 92, 93, 94, 95, 97, 99, 101, 103, 104, 106, 107, 108, 109], "otherwis": [1, 6, 19, 21, 35, 39, 43], "If": [1, 4, 5, 6, 8, 17, 20, 21, 24, 26, 29, 30, 31, 33, 36, 39, 43, 44, 45, 49, 56, 66, 67, 69, 93, 100, 105, 109], "binari": [1, 18, 21, 28, 29, 57], "represent": [1, 5, 29, 31], "len": [1, 60, 61, 71, 75, 76, 79, 81], "respect": [1, 6, 21, 35, 40, 44, 69, 105], "oper": [1, 4, 12, 18, 21, 26, 31, 35, 39, 47, 69], "complet": [1, 5, 6, 21, 31, 36, 40, 57, 67, 93], "successfulli": 1, "2684354560": 1, "avail": [1, 5, 6, 14, 20, 21, 26, 29, 30, 31, 40, 43, 44, 49, 52, 56, 65, 66, 81, 93, 94], "2684354561": 1, "paramet": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 39, 40, 41, 42, 43, 44, 45, 48, 53, 56, 57, 59, 65, 66, 67, 70, 90, 93, 94, 95, 97, 99, 100, 102, 108, 109], "rang": [1, 5, 6, 8, 13, 15, 21, 26, 27, 29, 30, 31, 36, 40, 45, 55, 58, 60, 61, 62, 64, 67, 70, 73, 90, 93, 97, 99, 108], "2684354562": 1, "properti": [1, 18, 21, 26, 29, 36, 56, 67], "2684354563": 1, "2684354564": 1, "conflict": 1, "2684354565": 1, "all": [1, 5, 6, 8, 10, 13, 14, 20, 21, 24, 26, 28, 29, 30, 31, 35, 39, 40, 43, 44, 49, 52, 56, 59, 60, 61, 63, 65, 69, 79, 93, 102, 108], "same": [1, 5, 6, 21, 26, 29, 31, 36, 39, 56, 66, 67, 69, 85, 100, 102, 107], "4": [1, 5, 6, 7, 14, 20, 21, 27, 28, 29, 30, 31, 36, 39, 40, 43, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 108], "20ma": 1, "pci": 1, "1724": 1, "3758096384": 1, "handl": [1, 5, 6, 18, 19, 26, 28, 30, 31, 35, 36], "null": 1, "doesn": [1, 5, 6, 36, 40, 65], "t": [1, 5, 6, 12, 22, 36, 40, 42, 46, 48, 52, 56, 57, 63, 65, 66, 68, 81, 96, 99, 107], "match": [1, 28, 39], "requir": [1, 6, 10, 13, 14, 21, 26, 29, 30, 31, 44, 45, 51, 53, 56, 102, 105], "3758096385": 1, "3758096386": 1, "3758096387": 1, "format": [1, 2, 12, 15, 28, 47, 58, 63, 64, 100, 106], "expect": [1, 26, 29, 36, 39, 60, 61, 64, 109], "3758096388": 1, "Not": [1, 5, 40, 44, 52, 65, 93, 94], "enough": [1, 28, 60, 61, 99], "memori": [1, 5, 6, 21, 24, 29, 36, 40, 44, 45, 99], "3758096389": 1, "data": [1, 4, 5, 6, 10, 12, 18, 21, 26, 29, 30, 31, 35, 36, 39, 40, 45, 55, 60, 64, 69, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 94, 99, 106, 108], "3758096390": 1, "too": [1, 30], "small": [1, 10, 26, 69], "3758096391": 1, "length": [1, 4, 21, 29, 31, 35, 45, 99], "exceed": 1, "limit": [1, 12, 13, 21, 27, 30, 35, 42, 43, 63, 66, 67, 69], "3758096392": 1, "3758096393": 1, "event": [1, 4, 21, 31, 33, 35, 39, 40, 43], "3758096394": 1, "3758096395": 1, "3758096396": 1, "specifi": [1, 6, 21, 27, 29, 30, 31, 36, 39, 40, 43, 56, 63, 67, 93], "3758096397": 1, "3758096398": 1, "3758096399": 1, "hasn": 1, "own": [1, 29], "privileg": 1, "user": [1, 28, 31, 39, 40, 45, 46, 48, 52, 53, 55, 56, 57, 58, 68, 69, 81, 94, 96, 99, 100], "want": [1, 20, 21, 24, 26, 29, 35, 45, 63, 65, 107], "3758096400": 1, "becaus": [1, 5, 14, 21], "someon": 1, "els": [1, 21, 26, 44, 47, 60, 61, 100], "had": 1, "3758096401": 1, "wa": [1, 5, 21, 26, 39, 43, 45, 54, 56, 57, 63, 64, 94], "found": [1, 5, 6, 14, 26, 30, 64, 105, 108, 109], "3758096402": 1, "mismatch": [1, 29], "3758096403": 1, "count": [1, 10, 29, 35, 48, 67, 97], "3758096404": 1, "3758096405": 1, "exist": [1, 21, 29, 30, 36, 65, 109], "3758096406": 1, "unrecogn": 1, "3758096407": 1, "lost": 1, "unavail": 1, "3758096408": 1, "3758096409": 1, "busi": 1, "3758096410": 1, "3758096411": 1, "dma": [1, 21], "3758096412": 1, "time": [1, 5, 6, 8, 10, 12, 14, 21, 25, 26, 28, 29, 30, 31, 35, 36, 39, 48, 55, 56, 58, 65, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 97, 99, 101], "when": [1, 5, 6, 12, 21, 26, 27, 28, 29, 30, 31, 34, 36, 39, 43, 45, 66, 70, 90, 105, 108], "3758096413": 1, "given": [1, 5, 13, 21, 26, 31, 35, 39, 44, 45], "signatur": [1, 26], "3758096414": 1, "cannot": [1, 5, 21, 26, 40, 65, 93], "while": [1, 5, 8, 31, 61, 67, 69, 99, 101, 109], "ai": 1, "3758096415": 1, "end": [1, 6, 21, 29, 30, 31, 40, 60, 61, 81, 88], "3758161919": 1, "visainstru": [2, 3, 5, 8, 10, 11, 12, 14, 16, 17, 20, 22, 23, 27, 28, 29, 30, 31, 39, 40, 41, 42], "cxa": 2, "n9000a": [2, 108, 109], "analyz": [2, 10, 43, 55, 108, 109], "str": [2, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 39, 40, 41, 43, 44, 45, 64], "termin": [2, 10, 20, 29, 36, 39, 40, 42, 108], "option": [2, 5, 6, 10, 13, 20, 21, 23, 25, 26, 29, 30, 31, 36, 39, 40, 44, 69, 93, 105], "default": [2, 4, 5, 6, 8, 10, 12, 13, 14, 15, 18, 21, 23, 26, 28, 29, 30, 31, 33, 36, 39, 40, 42, 43, 45, 48, 63, 65, 69, 96, 97], "charact": [2, 10, 20, 40], "repli": [2, 10], "val": [2, 14, 21, 23, 31, 40, 94], "float": [2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 21, 22, 23, 25, 26, 28, 29, 30, 31, 35, 36, 39, 40, 43, 44, 45, 81], "strin": 2, "psd": 2, "depend": [2, 5, 6, 21, 29, 31, 39, 40, 67, 69, 99, 109], "spectral": [2, 46], "desir": [2, 4, 5, 6, 15, 26, 31, 33, 35, 39, 42, 45], "dbm": [2, 14, 30, 31, 46, 52, 53, 55, 56, 66, 94, 96, 106], "densiti": [2, 46, 95], "hz": [2, 5, 6, 10, 13, 14, 21, 26, 31, 40, 46, 52, 53, 56, 64, 66, 94, 96, 99, 105, 106, 107], "aim": 3, "thurlbi": 3, "thandar": 3, "suppli": [3, 4, 12, 15, 20, 22, 26, 28, 31, 35, 39, 55, 105, 108, 109], "4k": [3, 9, 12, 28], "warmup": [3, 108], "heater": [3, 28, 108], "bu2": [4, 108, 109], "ccd": [4, 33, 95], "path": [4, 6, 9, 13, 26, 28, 31, 33, 34, 36, 42, 43, 44, 51, 57, 60, 61, 96], "atmcd64": 4, "camera_id": 4, "setup": [4, 18, 36, 48, 60, 61, 67, 69, 94, 108, 109], "true": [4, 5, 6, 8, 14, 21, 22, 23, 24, 26, 28, 29, 30, 33, 35, 36, 39, 40, 43, 44, 45, 46, 48, 50, 52, 53, 55, 56, 57, 58, 59, 61, 63, 66, 68, 69, 75, 76, 81, 88, 94, 96, 97, 99, 102, 105, 106], "some": [4, 5, 6, 12, 14, 26, 36, 39, 48, 53, 60, 61, 66, 69, 93], "sent": [4, 12, 27, 28, 29, 40, 66], "head": [4, 109], "build": 4, "pixel": [4, 33, 48, 95], "x": [4, 29, 39, 45, 48, 57, 69, 79, 81, 94, 106, 107], "axi": [4, 5, 6, 27, 67, 94, 99, 108], "y": [4, 29, 39, 45, 69, 79, 94, 106, 107], "none": [4, 5, 6, 8, 9, 10, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 43, 44, 45, 50, 51, 54, 55, 58, 59, 65, 66, 68, 75, 76, 94, 95, 98], "taken": [4, 35, 36, 48, 94], "being": [4, 12, 21, 56], "int": [4, 5, 6, 8, 9, 10, 13, 14, 16, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 35, 36, 39, 40, 43, 44, 45, 53, 61, 93, 99], "perform": [4, 5, 6, 26, 30, 31, 35, 39, 55, 67, 69, 80, 87, 93, 108], "actual": [4, 5, 17, 26, 29, 30, 31, 35, 39, 40, 47, 57, 67, 99, 101], "acquisit": [4, 26, 31, 35, 36, 39, 69, 94, 108], "method": [4, 20, 21, 23, 26, 27, 29, 30, 31, 35, 36, 39, 41, 45, 63, 65, 69, 94], "overwritten": [4, 26, 31, 35, 39], "altern": [4, 26, 31, 35, 39, 69, 100], "suitabl": [4, 26, 30, 31, 35, 39], "get_cmd": [4, 14, 23, 31, 35, 39, 41], "constructor": [4, 26, 30, 31, 35, 39, 93], "wrap": [4, 21, 23, 26, 27, 29, 31, 35, 39, 41], "provid": [4, 5, 6, 14, 21, 26, 28, 29, 31, 35, 36, 39, 45, 48, 50, 65, 69], "get": [4, 5, 6, 9, 10, 13, 18, 21, 26, 27, 28, 30, 31, 35, 39, 40, 44, 48, 49, 50, 55, 56, 62, 63, 69, 92, 94, 97, 99, 100, 102, 103, 104, 106, 108], "instanc": [4, 5, 6, 14, 17, 21, 26, 30, 31, 35, 39, 40, 44, 45, 60, 61, 100, 101, 102, 107], "set_cmd": [4, 10, 14, 23, 26, 39, 41], "bool": [4, 5, 6, 8, 18, 21, 22, 23, 24, 26, 28, 29, 30, 33, 36, 39, 40, 41, 43, 44, 45], "fals": [4, 5, 6, 8, 14, 18, 20, 21, 24, 26, 28, 29, 30, 33, 35, 36, 38, 39, 40, 42, 43, 44, 46, 48, 50, 52, 53, 56, 57, 58, 59, 61, 63, 66, 68, 69, 71, 81, 88, 96, 99, 102, 105], "object": [4, 5, 6, 8, 18, 21, 26, 29, 30, 31, 33, 35, 38, 43, 94, 102], "wrapper": [4, 5, 6, 10, 15, 26, 28, 30, 31, 33, 43, 101, 102], "been": [4, 5, 6, 12, 14, 21, 29, 33, 34, 36, 43, 46, 48, 52, 53, 56, 57, 68, 69, 81, 96, 109], "idu": 4, "behaviour": [4, 21, 33, 43], "success": [4, 18, 27, 33, 43, 45], "print": [4, 8, 14, 21, 29, 33, 36, 43, 46, 47, 48, 49, 50, 51, 53, 54, 55, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 76, 77, 79, 81, 84, 85, 87, 91, 92, 93, 95, 101, 102, 104, 105, 108], "windll": [4, 33, 43], "function_nam": [4, 33, 38, 43], "tupl": [4, 6, 8, 10, 13, 19, 26, 29, 39, 40, 43, 45], "camera_index": 4, "directori": [4, 6, 18, 40, 42, 44, 45], "cycle_tim": 4, "camera_handl": 4, "exposure_tim": [4, 48], "typ": 4, "closing_tim": 4, "opening_tim": 4, "simul": [5, 31, 42, 44], "py": [5, 26, 31, 53, 55, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 100], "reason": [5, 31, 63], "answer": [5, 29, 30, 31], "request": [5, 21, 30, 31, 39, 102], "thing": [5, 31], "chang": [5, 15, 17, 26, 29, 30, 31, 39, 49, 55, 56, 59, 61, 63, 64, 67, 70, 90, 93, 108, 109], "two": [5, 10, 26, 28, 29, 31, 39, 45, 50, 56, 67, 69, 76, 80, 81, 85, 87, 88, 94, 100, 107, 108], "shown": [5, 31, 94, 102], "below": [5, 8, 12, 18, 28, 31, 65, 66, 69, 94, 99, 108, 109], "real": [5, 21, 31], "attent": [5, 52], "feedback": [5, 6], "motor": [5, 6, 18, 19, 27, 42, 43, 57, 101], "That": 5, "mean": [5, 26, 27, 29, 31, 53, 57, 59, 69, 99], "known": [5, 14, 24, 29, 69], "behav": 5, "like": [5, 18, 20, 26, 40, 56], "author": [5, 6, 13, 14, 25, 31, 35, 39, 42, 43], "michael": [5, 31], "wagen": [5, 31], "fzj": 5, "zea": [5, 6, 31], "2": [5, 6, 7, 10, 13, 14, 18, 20, 21, 26, 27, 28, 29, 30, 31, 36, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 109], "m": [5, 6, 13, 14, 21, 29, 31, 35, 37, 39, 42, 53, 66, 69, 94, 97, 99, 101], "fz": [5, 6, 31], "juelich": [5, 6, 31], "de": [5, 6, 31], "Be": [5, 30, 93], "care": [5, 14], "correct": [5, 12, 29, 30, 35, 63, 87, 93], "usb": [5, 6, 12, 26, 46, 49, 58, 64, 67, 92, 100], "finish": [5, 21, 22, 27, 31, 35, 69, 101], "commun": [5, 8, 14, 15, 18, 20, 23, 27, 30, 31, 35, 39, 40, 41, 44, 67, 108, 109], "done": [5, 6, 14, 26, 28, 31, 46, 53, 58, 67], "usag": [5, 28, 30, 31, 36, 40, 70, 90, 93, 108], "experi": [5, 31, 55, 94, 106, 108], "yet": [5, 29, 31], "cmd": [5, 10, 14, 23, 27, 29, 31, 39, 41], "runtimeerror": [5, 93, 100], "submod": [5, 31], "retun": [5, 31], "caller": [5, 31], "scan": [5, 26, 29, 31, 40, 49, 64, 70, 89, 90, 108], "new": [5, 8, 19, 21, 23, 27, 29, 31, 40, 41, 45, 67, 109], "kei": [5, 12, 18, 31, 39, 45, 94], "modulenam": [5, 31], "parameternam": [5, 31], "routin": [5, 39], "regardless": [5, 66], "possibl": [5, 6, 14, 30, 31, 36, 40, 48, 58, 69], "inform": [5, 6, 14, 36, 42, 43, 45, 57, 93, 102, 109], "until": [5, 8, 21, 22, 28, 29, 43, 49, 53, 67, 93, 101], "ok": [5, 47], "come": [5, 44, 105], "back": [5, 6, 28, 29, 67, 69, 81, 87, 88], "parent": [5, 7, 8, 17, 18, 20, 21, 22, 26, 27, 29, 31, 32, 40, 44], "sn": 5, "instrumentchannel": [5, 7, 8, 17, 18, 20, 22, 26, 27, 29, 31, 32, 40, 44], "creat": [5, 6, 14, 19, 21, 28, 29, 30, 35, 44, 45, 49, 52, 60, 61, 91, 92, 94, 100, 101, 102], "piezo": [5, 6, 27, 108, 109], "up": [5, 6, 7, 14, 19, 21, 27, 29, 30, 31, 39, 43, 49, 53, 65, 66, 69, 74, 81, 93, 94, 96, 100, 102, 108], "7": [5, 39, 40, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 62, 63, 65, 67, 69, 71, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 97, 99, 100, 103, 104], "intern": [5, 6, 14, 17, 21, 29, 31, 39, 40, 45, 48, 53, 56, 69, 81, 85, 93, 94, 96, 99], "belong": [5, 21, 26, 29], "itself": [5, 40], "index": [5, 8, 15, 21, 26, 29, 30, 43, 45, 69, 107, 109], "featur": [5, 6, 26, 31], "signal": [5, 6, 14, 15, 20, 21, 26, 31, 34, 36, 39, 45, 60, 69, 93, 107, 108, 109], "maximum": [5, 12, 21, 26, 27, 30, 31, 39, 43, 69], "restrict": [5, 35, 94], "combin": [5, 29, 31, 45, 59, 69], "readonli": [5, 31], "step": [5, 6, 8, 18, 21, 27, 29, 30, 31, 39, 49, 60, 61, 67, 70, 79, 80, 87, 90, 108, 109], "add": [5, 20, 21, 30, 31, 39, 40, 60, 61, 87], "constant": [5, 12, 26, 30, 39, 42, 45, 47, 63, 66, 69, 89, 90, 94, 108], "150": [5, 57, 101], "v": [5, 6, 8, 12, 14, 21, 29, 30, 31, 35, 36, 40, 47, 53, 58, 59, 63, 69, 94, 99, 107], "pass": [5, 20, 21, 26, 30, 35, 36, 40, 43, 60, 61, 102], "anm150": [5, 108], "attribut": [5, 17, 24, 26, 29, 31, 44, 45, 69, 94], "present": [5, 6, 29, 39, 66, 69, 94], "anm200": 5, "anm300": 5, "differ": [5, 8, 14, 21, 24, 29, 30, 31, 40, 51, 56, 66, 100, 107, 108], "allow": [5, 6, 10, 21, 28, 30, 31, 39, 57, 69, 94, 100], "certain": [5, 22, 24, 29, 43, 53, 69, 108], "typic": [5, 69], "gnd": 5, "diabl": 5, "chassi": [5, 20, 21, 60, 61], "mass": 5, "inp": [5, 31], "In": [5, 6, 29, 46, 50, 55, 66, 67, 69, 94, 109], "IN": [5, 21, 31, 35, 61, 66], "cap": [5, 75, 76], "afterward": [5, 95], "It": [5, 6, 9, 13, 21, 26, 28, 31, 39, 44, 57, 58, 65, 69], "need": [5, 12, 19, 21, 29, 31, 36, 40, 45, 50, 53, 55, 56, 63, 66, 80, 94, 96, 102, 103, 104], "stp": [5, 49], "modifi": [5, 12, 35, 69, 93], "would": [5, 19, 21, 29], "turn": [5, 7, 14, 28, 29, 45, 47, 48, 52, 57, 62, 66, 75, 76, 91, 92, 108], "addit": [5, 21, 28, 29, 39, 45, 69, 80, 109], "ad": [5, 21, 29, 45, 56, 109], "subtract": [5, 29], "vac": 5, "amplif": 5, "bnc": [5, 69], "frontplat": 5, "15": [5, 52, 53, 56, 58, 63, 71, 73, 74, 77, 80, 82, 87, 96], "movement": [5, 27, 49, 67], "neg": [5, 21, 27, 29, 30, 36, 66, 73], "contin": [5, 6, 10, 40], "direct": [5, 6, 18, 21, 27, 29, 42, 43, 67, 89, 90, 108], "down": [5, 26, 39, 64, 69], "global": [5, 27, 29], "timeout": [5, 10, 18, 21, 25, 26, 39, 42, 52, 53, 56, 57, 59, 63, 94, 99, 106], "commandinterfac": 5, "stepw": 5, "after": [5, 6, 8, 14, 21, 26, 27, 28, 29, 35, 36, 48, 49, 56, 66, 67, 69, 93, 94, 101], "hang": 5, "former": 5, "pyseri": 5, "work": [5, 6, 10, 20, 21, 26, 30, 31, 36, 40, 44, 63, 64, 66, 67, 79, 93, 105, 109], "fine": [5, 30], "But": [5, 29], "throw": [5, 21, 43, 65], "didn": 5, "To": [5, 6, 28, 29, 31, 35, 36, 57, 69, 94, 100, 108], "avoid": [5, 28, 69, 94], "zero": [5, 6, 8, 18, 21, 27, 28, 29, 30, 43, 54, 57, 60, 61, 69, 101], "between": [5, 6, 8, 12, 15, 21, 26, 28, 29, 31, 39, 40, 45, 67, 70, 75, 76, 80, 87, 90, 108], "second": [5, 6, 8, 12, 14, 21, 26, 27, 28, 29, 30, 31, 39, 53, 67, 69, 94, 107], "block": [5, 8, 21, 22, 30, 36, 43, 53, 63, 101], "motion": [5, 6, 108, 109], "three": [5, 29, 69], "dure": [5, 26, 31, 35, 36, 40, 44, 45, 47, 69], "wai": [5, 24, 29, 40, 58, 65, 66, 94], "our": [5, 26, 54, 56, 67], "lab": 5, "just": [5, 17, 24, 26, 29, 30, 31, 56, 80], "you": [5, 6, 17, 20, 21, 24, 28, 29, 31, 35, 53, 55, 65, 66, 69, 91, 92, 94, 101, 107, 108, 109], "wish": [5, 17, 31], "backend": [5, 17, 31], "self": [5, 14, 17, 21, 23, 26, 28, 29, 31, 35, 39, 40, 41, 94, 100, 108], "visalib": [5, 17, 31, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "api": [5, 26, 31, 34, 44, 45, 64, 96, 109], "synchron": [5, 20, 21, 26, 29, 31, 58, 64], "geta": 5, "000000": 5, "wrong": [5, 36, 60, 61, 100], "5": [5, 12, 21, 26, 27, 28, 29, 31, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106], "6": [5, 14, 21, 26, 30, 31, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105], "getaci": 5, "acin": 5, "getc": 5, "nf": 5, "getcser": 5, "anc300b": 5, "1514": 5, "3006076": 5, "getdci": 5, "dcin": 5, "getf": 5, "210": [5, 49, 53], "getm": 5, "getser": 5, "anm150a": 5, "1545": 5, "3010045": 5, "3010041": 5, "gettd": 5, "gettu": 5, "getv": 5, "20": [5, 14, 21, 28, 31, 36, 49, 52, 53, 59, 60, 61, 67, 71, 77, 79, 80, 86, 97, 99, 106], "stepd": 5, "stepu": 5, "ver": [5, 56], "1304": 5, "2013": 5, "17": [5, 52, 53, 56, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 105], "08": [5, 58, 82, 96], "16": [5, 8, 30, 36, 52, 53, 54, 56, 58, 60, 61, 71, 73, 77], "anc150": 5, "compatibil": [5, 40], "consol": [5, 36, 42], "fit": [5, 30, 35, 59], "appropri": [5, 26, 66], "inst_no": 5, "sequenc": [5, 6, 13, 24, 26, 29, 40, 45], "first": [5, 6, 10, 21, 26, 29, 31, 35, 54, 56, 67, 69, 93, 103, 104], "becom": [5, 6, 28], "invalid": [5, 6, 24, 29], "dictionari": [5, 15, 36, 39, 45], "about": [5, 6, 12, 14, 19, 29, 45, 67, 69, 109], "persist": [5, 6, 28], "flash": [5, 6, 57], "next": [5, 6, 21, 29, 31, 35], "everi": [5, 6, 21, 31, 39, 45, 69, 99, 101], "attach": [5, 8, 17, 20, 21, 29, 39], "position": 5, "ax": [5, 6, 27, 52, 55, 67, 75, 76, 81, 94, 97, 106], "adjust": [5, 6, 15, 30, 31, 66, 69, 99], "1hz": [5, 31], "5khz": 5, "2khz": 5, "drive": [5, 15, 27, 102], "bychang": 5, "vari": 5, "sawtooth": [5, 6, 31, 60, 61], "loop": [5, 6, 8, 26, 53, 58, 102], "activ": [5, 6, 13, 21, 28, 31, 35, 36, 43, 45, 46, 48, 52, 56, 57, 68, 81, 93, 96, 108], "target": [5, 6, 27, 35, 43, 63, 67, 101], "degre": [5, 6, 21, 39, 43, 56, 57, 99, 107], "defin": [5, 6, 19, 21, 23, 26, 27, 29, 30, 31, 39, 40, 41, 52, 56, 69, 99], "around": [5, 6, 10, 26, 29, 101], "where": [5, 6, 10, 20, 21, 26, 28, 29, 30, 35, 39, 40, 45, 60, 61, 69, 100], "consid": [5, 6, 23], "reach": [5, 6, 8, 23, 35, 39, 43, 63, 101], "select": [5, 6, 21, 27, 31, 35, 41, 57, 95], "take": [5, 6, 14, 21, 27, 29, 36, 53, 69, 100, 108], "few": [5, 6, 14, 53], "rel": [5, 6, 27, 67], "interpret": [5, 6, 55], "absolut": [5, 6, 27, 43, 67], "multipl": [5, 6, 20, 21, 26, 29, 30, 36, 40, 45, 70, 89, 90, 108], "sign": 5, "backward": [5, 6, 29, 30, 31], "indic": [5, 12, 21, 36, 43, 56], "besid": 5, "continu": [5, 6, 21, 29, 39, 43, 66, 69, 99], "kind": [5, 6, 29, 35], "collect": [6, 21, 29, 36], "share": [6, 21, 60, 61], "luka": [6, 31], "lank": [6, 31], "forschungszentrum": 6, "j\u00fclich": 6, "gmbh": [6, 36], "abc": [6, 18], "anc350v": 6, "lib": [6, 13, 53, 55, 100], "classmethod": [6, 18, 44], "Then": [6, 67, 69, 93, 103, 104], "neither": 6, "both": [6, 12, 21, 26, 28, 31, 36, 40, 45, 62, 80, 102], "case": [6, 21, 28, 35, 45, 55, 67, 91, 92, 100], "intenum": 6, "enumer": [6, 43], "anc350v2lib": 6, "set_amplitude_control_mod": 6, "compon": [6, 21, 31, 107], "set_external_step_input_edg": 6, "set_input_trigger_mod": 6, "set_output_trigger_mod": 6, "set_trigger_polar": 6, "anc350v3": 6, "libusb0": 6, "disc": 6, "find": [6, 30, 35, 55, 93], "32": [6, 18, 19, 21, 36, 39, 44, 52, 62, 105], "64": [6, 18, 36, 44, 52, 100, 105], "folder": [6, 9, 26, 40, 109], "anc350_librari": 6, "pleas": [6, 12, 29, 55, 109], "instanti": [6, 8, 14, 20, 29, 53], "path_to_dl": 6, "adapt": [6, 30], "store": [6, 21, 26, 40, 42, 51, 57, 94, 99], "dev_handl": 6, "c_void_p": 6, "axis_no": 6, "quad": 6, "b": [6, 7, 12, 31, 35, 39, 50, 59, 62], "meter": [6, 28, 42], "nm": [6, 54, 95], "fail": 6, "clock": [6, 21, 26, 29, 40, 66, 85], "40n": 6, "3m": 6, "20n": [6, 31], "off_tim": 6, "duti": [6, 31, 99], "cycl": [6, 21, 29, 31], "sensor": [6, 29, 70, 90, 108], "applic": 6, "extern": [6, 13, 14, 21, 29, 31, 36, 53, 60, 61, 74, 80, 85, 87, 93], "nsl": 6, "lower": [6, 23], "upper": [6, 23], "nanomet": 6, "epsilon": 6, "hysteresi": 6, "per": [6, 10, 12, 20, 21, 26, 29, 30, 31, 36, 53, 60, 61, 69, 89, 90, 108], "millidegre": 6, "dev_no": 6, "variabl": [6, 12], "must": [6, 19, 21, 28, 29, 31, 36, 40, 45, 79, 102], "smaller": [6, 21, 30, 39], "than": [6, 12, 21, 31, 39, 44, 45, 53, 69], "last": [6, 9, 15, 21, 26, 28, 29, 40, 93, 100], "search_usb": 6, "search_tcp": 6, "search": [6, 18, 43, 109], "anc350r": 6, "lan": 6, "structur": [6, 12, 19, 34, 38], "arw": 6, "anoth": [6, 26, 29, 31, 36, 95], "pc": [6, 21, 24], "long": [6, 10, 69], "subsequ": [6, 21], "less": [6, 31, 39, 69], "tcp": 6, "ip": [6, 7, 14, 24, 25, 28, 93, 97, 108, 109], "auto": [6, 21, 31, 35, 39, 46, 48, 52, 56, 57, 68, 74, 81, 96, 99], "refer": [6, 12, 14, 21, 26, 29, 30, 53, 55, 60, 61, 69, 109], "mark": [6, 29, 39, 45, 74], "hit": 6, "ignor": [6, 21, 28, 45], "updat": [6, 10, 14, 24, 28, 29, 31, 35, 36, 39, 40, 45, 52, 53, 56, 59, 63, 66, 69, 96, 97, 99, 105, 109], "later": [6, 29, 69, 109], "volt": [6, 8, 21, 30, 31, 39, 40, 59, 74, 79, 81, 100], "eot_fwd": 6, "travel": [6, 27, 67], "detect": [6, 14, 54, 100, 108], "eot_bwd": 6, "static": [6, 14, 20, 21, 29, 39, 45], "ethernet": [6, 40, 91], "lockin": [6, 39, 45, 94], "loss": 6, "app": 6, "io": [6, 21, 26, 64], "don": [6, 99, 107], "pointer": [6, 19, 21], "mai": [6, 27, 29, 35, 39, 40, 53, 55, 56, 65, 69], "anc_discov": 6, "dev_typ": 6, "program": [6, 26, 45, 60, 61, 96, 100], "hardwar": [6, 12, 21, 23, 27, 30, 31, 36, 41, 42, 43, 96, 107], "dot": 6, "decim": 6, "notat": [6, 10, 69], "alreadi": [6, 21, 26, 29, 39, 53, 69], "retriev": [6, 14, 21, 29, 31, 36, 108], "hertz": [6, 39, 56], "valid": [6, 9, 14, 28, 30, 31, 36, 40, 44, 51, 65, 94], "farad": 6, "f": [6, 14, 21, 39, 55, 61, 66, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 100], "approach": 6, "see": [6, 14, 18, 26, 27, 29, 30, 31, 36, 40, 53, 56, 63, 64, 66, 67, 69, 85, 99], "follow": [6, 12, 14, 21, 31, 35, 60, 61, 94, 100, 101, 109], "affect": [6, 30, 67], "ground": 6, "255": [6, 48], "1mv": 6, "auto_dis": 6, "deactiv": [6, 30, 31, 43, 45], "mv": [6, 30, 36, 75, 76, 94, 97, 107], "although": [6, 10, 65], "doubl": [6, 30, 31], "\u00b5": [6, 39, 53], "anc350v4": 6, "compat": [6, 24, 29, 30, 31, 56, 66], "more": [6, 12, 29, 30, 36, 44, 45, 56, 57, 61, 65, 70, 90, 108], "lut": 6, "look": [6, 44, 56, 94, 108, 109], "tabl": [6, 26, 27, 40], "file_nam": 6, "lookup": 6, "hostnam": 6, "regist": [6, 9, 21, 26, 28, 36, 39, 69], "network": [6, 7, 10, 14, 26, 40, 108, 109], "abl": [6, 69], "via": [6, 21, 29, 40, 60, 61, 67, 69, 92, 100], "segment": [6, 36], "through": [6, 8, 18, 28, 55, 94], "router": 6, "reachabl": [6, 28], "rout": [6, 29], "those": [6, 21, 24, 29], "prior": [6, 39], "sever": [6, 26, 28, 29, 69], "succe": 6, "guarante": [6, 30], "couldn": 6, "resolv": 6, "target_ground": 6, "determin": [6, 27, 31, 99], "action": [6, 35], "0v": [6, 8, 29, 66, 69], "9258": [7, 108, 109], "With": [7, 66, 93], "non": [7, 21, 29, 31, 58, 63, 65, 69, 108], "smart": 7, "http": [7, 13, 14, 15, 25, 26, 30, 31, 36, 39, 42, 43, 50, 52, 53, 64, 96, 102, 108], "login_nam": [7, 50], "login": [7, 50], "login_password": [7, 50], "password": [7, 14, 50], "socket": [7, 56, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 108], "alphabet": 7, "d": [7, 39, 50], "enum": [7, 23, 29, 42, 43, 69], "num_chan": [8, 69], "init_start": [8, 58], "synchronous_en": [8, 58], "synchronous_delai": 8, "synchronous_threshold": 8, "1e": [8, 14, 29, 31, 39, 52, 59, 72, 74, 77, 82, 83, 99, 102, 106, 107], "05": [8, 27, 29, 39, 44, 45, 52, 58, 59, 63, 69, 74, 78, 82, 83, 84, 86, 87, 92, 94, 99], "v_inter_delai": 8, "005": [8, 31, 63, 75, 76, 79, 92, 93, 94], "v_post_delai": 8, "045": 8, "v_step": 8, "02": [8, 28, 55, 60, 61, 69, 77, 87, 99, 103], "assign": [8, 21, 29, 31, 44, 65, 69, 85], "12v": [8, 58], "exponenti": [8, 10], "simpl": [8, 15, 29, 36, 47, 64, 94, 97, 108], "iter": [8, 26, 39, 94], "threshold": [8, 21, 28], "unblock": 8, "5e": [8, 66, 71, 73, 77, 96, 99], "final": [8, 26, 54, 55, 91, 92], "45e": [8, 58], "max": [8, 12, 26, 29, 30, 36, 64, 65, 66, 106], "20e": [8, 72, 80, 81, 84, 87, 88], "chan": [8, 20, 29], "convers": [8, 28, 40, 100, 108], "ix": 8, "param": [8, 16, 21, 30, 32, 35, 40], "cmdl": 8, "ramp": [8, 12, 14, 18, 22, 29, 58, 70, 90, 108], "chan_num": [8, 58], "question": [8, 20], "alarm": 8, "param_nam": [8, 29], "multichannelinstrumentparamet": [8, 29], "extract": [9, 12, 28], "pressur": [9, 28, 51], "fridg": [9, 28, 47], "folder_path": [9, 51], "channel_vacuum_can": [9, 51], "channel_pumping_lin": [9, 51], "channel_compressor_outlet": [9, 51], "channel_compressor_inlet": [9, 51], "channel_mixture_tank": [9, 51], "channel_venting_lin": [9, 51], "channel_50k_pl": [9, 51], "channel_4k_pl": [9, 51], "channel_stil": [9, 51], "channel_mixing_chamb": [9, 51], "channel_magnet": [9, 51], "log": [9, 21, 28, 31, 35, 46, 48, 51, 52, 56, 57, 60, 61, 68, 81, 96], "interact": [9, 14, 28], "electron": [9, 28], "toward": [9, 28, 34, 51], "vacuum": 9, "pump": 9, "line": [9, 12, 14, 15, 21, 26, 29, 39, 59, 99], "compressor": 9, "outlet": 9, "inlet": 9, "mixtur": 9, "tank": 9, "vent": 9, "50k": 9, "plate": 9, "still": [9, 30, 31, 67, 69, 102], "mix": [9, 26, 28], "chamber": [9, 28], "magnet": [9, 12, 22, 28, 68, 108, 109], "mbar": 9, "kelvin": [9, 28], "npt": [10, 31, 35, 52, 61, 97, 106], "multiparamet": [10, 31], "sweep": [10, 14, 28, 29, 30, 31, 44, 52, 55, 56, 67, 74, 80, 81, 87, 89, 90, 94, 97, 106, 108], "magnitud": [10, 27, 52, 107], "phase": [10, 14, 18, 21, 30, 31, 39, 52, 56, 94, 107, 108], "bound": 10, "paramrawdatatyp": 10, "setpoint": [10, 22, 23, 25, 35, 39, 62, 65, 69, 94], "vna": [10, 52, 106], "copper": 10, "mountain": 10, "100000": [10, 21, 44, 55], "purpos": [10, 35, 44, 69, 94], "ndarrai": [10, 21, 29, 39, 45], "db": [10, 20, 31, 55, 94, 105, 108, 109], "rad": [10, 31, 52], "ghz": [10, 46, 55, 66, 106], "s11": [10, 52, 106], "s12": [10, 52], "s21": [10, 52], "s22": [10, 52], "np": [10, 29, 59, 60, 61, 69, 74, 75, 76, 80, 81, 85, 87, 88, 94, 99, 106], "averag": [10, 26, 29, 31, 36, 40, 52, 64, 106], "sxx": [10, 108, 109], "term": 10, "q": [10, 31], "cw": [10, 13, 31, 99], "cmts5048": [10, 109], "make": [10, 14, 21, 26, 28, 30, 35, 40, 45, 53, 65, 69, 85, 94, 107], "readi": [10, 21, 36, 67, 94], "factori": [10, 14], "arrayparamet": [10, 26, 31], "label": [10, 14, 18, 26, 35, 39, 41, 50, 54, 62, 75, 76, 94, 95, 104, 106, 108, 109], "custom": [10, 24, 26, 29], "parser": [10, 21, 39], "cryo": 11, "con": 11, "26": [11, 43, 46, 53], "sms120c": 12, "manual": [12, 20, 21, 29, 30, 31, 45, 48, 63, 76, 85, 94], "further": [12, 26, 29], "detail": [12, 26, 53], "p": [12, 28, 39, 91, 92, 94], "scpi": [12, 29, 40, 99], "compliant": 12, "note": [12, 18, 21, 26, 28, 29, 40, 43, 45, 53, 55, 60, 61, 65, 66, 67, 69, 99, 102], "unidirect": 12, "eg": 12, "rather": 12, "ftdi": 12, "chip": [12, 13], "d2xx": 12, "sms60c": 12, "argument": [12, 21, 26, 29, 35, 40, 56, 102], "latter": 12, "coil_const": [12, 22, 63], "current_r": 12, "accompani": 12, "slightli": 12, "60": [12, 14, 26, 46, 47, 48, 93], "exampl": [12, 14, 18, 20, 21, 26, 27, 30, 36, 39, 45, 60, 90, 94, 109], "2t": 12, "0380136": 12, "52": 12, "61": [12, 58, 93], "hard": 12, "safeti": [12, 102], "correspond": [12, 18, 29, 30, 39, 40, 44, 45, 67, 94], "overwrit": [12, 30, 40], "proper": [12, 30], "msg": [12, 35], "do": [12, 14, 26, 29, 30, 31, 35, 36, 39, 43, 52, 69], "regexp": 12, "uniqu": 12, "unus": 12, "0506": 12, "psu": [12, 28], "12t": 12, "105": 12, "84a": 12, "5v": [12, 29, 30, 99], "com": [12, 13, 14, 15, 25, 26, 31, 36, 39, 42, 43, 52, 53, 65, 96, 102, 108], "coil": [12, 22, 63], "tesla": [12, 28, 63], "amper": [12, 29], "fix": [12, 21, 28, 31], "113375t": 12, "rate": [12, 13, 16, 18, 21, 22, 26, 29, 30, 36, 39, 42, 64, 69, 94, 99, 108], "current_ramp_limit": 12, "50mk": 12, "0506a": 12, "737e": 12, "34422t": 12, "min": [12, 22, 29, 30, 61, 63], "usual": [12, 15, 26, 29, 53], "12a": 12, "013605": 12, "8163": 12, "recommend": 12, "minimum": [12, 26, 30, 31, 39, 43], "200m": 12, "dr": 13, "daylight": 13, "solut": 13, "ultra": 13, "broadli": 13, "tunabl": 13, "mid": 13, "ir": 13, "caviti": 13, "puls": [13, 14, 21, 29, 31, 70, 90, 99, 108], "laser": [13, 23, 24, 41, 42, 108, 109], "system": [13, 21, 39, 44, 52, 97], "product": [13, 21, 23, 25, 31, 39, 61], "reli": 13, "mircatsdk": 13, "window": [13, 36, 44, 105], "julien": [13, 25, 31, 39, 42, 43], "barrier": [13, 25, 31, 39, 42, 43], "julienbarri": [13, 25, 31, 39, 42, 43], "eu": [13, 25, 31, 39, 42, 43], "repres": [13, 25, 26, 27, 31, 35, 39, 42, 57, 60, 61, 67, 107], "qcl": 13, "beta": [13, 20, 21, 25, 31, 39, 40, 42], "wavelength": [13, 33, 95, 108], "boundari": 13, "tune": [13, 30], "pulse_rate_max": 13, "pulse_width_max": 13, "duty_cycle_max": 13, "current_max": 13, "pulse_r": 13, "pulse_width": 13, "pf_min_rang": 13, "pf_max_rang": 13, "mircat_las": 13, "x64": [13, 34, 96], "victor": 14, "neg\u00eerneac": 14, "vnegirneac": 14, "qblox": [14, 53], "offici": [14, 26], "visit": 14, "github": [14, 26, 42, 43, 108], "val_map": [14, 18, 23, 41], "tcxo": 14, "ocxo": [14, 53], "ra": 14, "_cmd_to_json_map": 14, "p5": 14, "nb": [14, 29], "6ghz": 14, "import": [14, 35, 39, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "lo": [14, 31, 53], "asrl": [14, 16, 30, 108], "dev": [14, 31, 53, 65, 93], "cu": 14, "usbmodem14101": 14, "instr": [14, 28, 46, 47, 52, 53, 54, 55, 58, 62, 63, 69, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 99, 100, 106], "onc": [14, 21, 29, 52, 53], "sure": [14, 28, 35, 40, 53, 69, 93, 94], "date": [14, 53, 106], "print_readable_snapshot": [14, 48, 52, 53, 56, 59, 63, 65, 66, 94, 95, 96, 99, 105], "oscil": [14, 31, 53], "7e9": [14, 53, 56], "raw": [14, 26, 30, 46, 48, 52, 56, 57, 59, 68, 81, 96], "doc": [14, 18, 30, 64, 108, 109], "blob": [14, 26], "master": [14, 26, 91, 92, 108], "pdf": 14, "visa_handl": [14, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "directli": [14, 20, 67, 94, 100, 108], "pyvisa": [14, 53, 89, 90, 106, 108, 109], "prefix": [14, 26], "discard": 14, "special": [14, 31], "conveni": [14, 26], "individu": [14, 30, 31, 67, 69, 109], "getter": 14, "most": [14, 20, 26, 31, 40, 66, 100, 106], "often": [14, 43], "entir": [14, 94], "esp8266": 14, "upload": [14, 20, 21, 40, 45, 60, 61, 108], "par_nam": 14, "json": [14, 24, 29, 35, 39, 106], "diagnost": [14, 69], "rf": [14, 17, 26, 30, 31, 52, 108, 109], "ON": [14, 21, 31, 40, 47, 56, 69, 91, 92, 93, 94], "1ghz": 14, "util": [14, 52, 55, 60, 61, 88, 94, 100], "settabl": [14, 26, 31, 56], "serv": [14, 15], "readabl": 14, "confirm": [14, 53, 54], "wifi": 14, "correctli": [14, 53], "rd": 14, "drawn": [14, 21], "initial_cache_valu": 14, "pd": 14, "debug": [14, 60, 61, 89, 90, 108], "embed": 14, "em": 14, "am": [14, 31, 66], "min_valu": [14, 18, 30], "max_valu": [14, 18, 30], "100": [14, 21, 27, 29, 30, 31, 35, 39, 50, 53, 55, 57, 59, 62, 64, 66, 75, 76, 93, 95, 96, 99, 107], "m5": 14, "get_pars": [14, 23], "set_pars": [14, 23], "lambda": [14, 41, 81], "fm": [14, 31, 93], "20e9": 14, "m4": [14, 36], "freq": [14, 31, 39, 49, 94, 106], "m3": 14, "m6": 14, "1e6": [14, 21, 52, 64, 75, 76], "m7": 14, "microphon": [14, 53], "m1": [14, 40], "narrowband_fm": 14, "wideband_fm": [14, 53], "m0": 14, "pll": 14, "lmx1": 14, "lock": [14, 28, 30, 31, 39, 53, 94, 107], "unlock": [14, 28, 31], "lock_lmx1": 14, "lmx2": 14, "lock_lmx2": 14, "xtal": 14, "lock_xtal": 14, "2f": [14, 23, 47], "_set_pow": 14, "ext": [14, 29, 31], "p1": [14, 91, 92], "mhz": [14, 21, 30, 36, 46, 60, 61, 64, 96, 107], "ref": [14, 56, 109], "connector": [14, 15, 21, 66], "rfoutput": 14, "_set_statu": 14, "s4": 14, "1e3": 14, "freerun": [14, 53], "ss": 14, "s0": 14, "low_spuri": [14, 53], "low_phase_nois": 14, "p9": 14, "synthes": [14, 17, 108, 109], "spuriou": [14, 31], "nois": [14, 30, 31], "u00b0c": 14, "peg": 14, "gatewai": 14, "pep1": 14, "hotspot": 14, "pes1": 14, "ssid": 14, "pei": 14, "station": [14, 21, 39, 60, 61, 65, 69, 97, 108, 109], "pew": 14, "rssi": 14, "receiv": [14, 21, 29, 39, 93], "pep0": 14, "pes0": 14, "pen": 14, "subnet": 14, "mask": [14, 21, 61], "choos": [14, 30, 40, 53], "krato": 15, "microwav": [15, 31, 108, 109], "seri": [15, 21, 40, 56, 108, 109], "349": 15, "349h": 15, "These": [15, 108, 109], "passiv": 15, "j3": 15, "www": [15, 25, 31, 39, 42, 96, 102], "kratosm": 15, "gmcatalog": 15, "octav": 15, "band": [15, 31], "11": [15, 30, 39, 43, 46, 48, 52, 53, 54, 55, 56, 58, 63, 67, 71, 72, 73, 75, 76, 79, 80, 82, 83, 84, 85, 86, 87, 99, 100, 105], "diod": [15, 89, 90, 108], "_summary_": 15, "driver_dev": 15, "physic": [15, 44, 69], "map": [15, 18, 26, 29, 39, 40, 57, 81, 94], "63": [15, 43, 62, 100], "97": 15, "maestro": [16, 108, 109], "powermet": [16, 42], "baud_rat": [16, 18], "baud": [16, 18, 39], "identif": [16, 21, 29, 31], "ressourc": 17, "ch1": [17, 26, 39, 40, 56, 65, 91, 92, 94, 99, 100, 105], "ch2": [17, 39, 40, 56, 65, 91, 92, 94, 105], "colloqui": 17, "instrumentbas": 18, "cli": 18, "liter": 18, "metadata": [18, 39], "9223372036854775807": 18, "grate": [18, 19, 33, 57, 95], "min_spe": 18, "50": [18, 21, 29, 31, 36, 43, 55, 57, 66, 67, 83, 93, 99, 105, 107], "max_spe": 18, "600": [18, 57, 95], "minim": [18, 26, 64], "maxim": [18, 69], "acceler": [18, 43, 57], "fhr": [18, 108, 109], "msl": 18, "loadlib": 18, "server": [18, 42, 43, 45, 52, 101, 102, 103, 104], "client": 18, "dll_dir": [18, 42, 57], "path_lik": 18, "specontrol": 18, "config_fil": [18, 57], "dc_val_map": [18, 57], "mirror": [18, 42, 43, 57, 103], "mirror2": [18, 57], "front": [18, 21, 29, 30, 39, 57, 66, 94, 100], "side": [18, 57], "ini": [18, 57], "section": [18, 29, 76, 85], "spectromet": [18, 19, 33, 57, 108], "grating1": [18, 57], "etc": [18, 21, 29, 105], "slit1": [18, 57], "mirror1": 18, "notebook": [18, 48, 55, 99, 106, 108, 109], "addr": 18, "labspec6": 18, "raise_except": 18, "errabort": 18, "upon": [18, 39], "manag": [18, 21, 26, 28, 29, 30, 42], "115200": [18, 57], "pot": 18, "90000": [18, 55], "millisecond": [18, 39, 69], "precis": [18, 30], "optic": [18, 27, 42], "order": [18, 29, 39, 50, 54, 57, 66, 69], "650": [18, 95], "backlash": [18, 57], "500": [18, 30, 36, 57, 60, 61, 67, 69], "2000": [18, 30, 36, 40, 49, 53, 57, 60, 61, 108], "picomet": 18, "invers": [18, 99], "abstract": 18, "slit": [18, 57, 95], "client64": 19, "h_spe": 19, "delet": [19, 21, 29], "a_dsp": 19, "a_fun": 19, "apar": 19, "_simplecdata": 19, "a_par": 19, "field": [19, 22, 26, 28, 108], "treat": [19, 45], "sinc": [19, 26, 28, 40, 57, 63], "speiniparam": 19, "know": [19, 102], "spesetup": 19, "server32": 19, "_spesetup": 19, "_speiniparam": 19, "ctype": [19, 26], "c_int": 19, "programm": 20, "todo": [20, 30], "e8527d": 20, "ones": [20, 31, 40, 45, 60, 61], "commonli": [20, 31, 40], "angle_deg": 20, "angle_rad": 20, "stat": [20, 31, 93], "j7211": 20, "j7211b": 20, "alia": [20, 26, 40, 44, 65], "m3201a": [20, 21], "awg": [20, 21, 29, 40, 45, 66, 71, 79, 108, 109], "pxie": [20, 21, 26, 66, 108, 109], "locat": [20, 21, 26, 39, 40, 69], "slot": [20, 21, 39, 60, 61, 99], "plug": [20, 69], "m3300a": [20, 21], "dig": 20, "deriv": [20, 21], "concurr": [20, 21], "sychron": 20, "awg1": [20, 21, 60, 61], "ref_1": [20, 21], "wave1": [20, 21], "keysightsd1": [20, 21, 60, 61], "sd_triggermod": [20, 21, 60, 61], "exttrig": [20, 21, 60, 61], "rubric": 20, "m3202a_sync": 20, "legacy_channel_numb": [20, 21], "among": 21, "m32xxa": 21, "m33xxa": 21, "written": [21, 26, 45, 64], "inherit": [21, 31, 40], "g": [21, 23, 26, 29, 37, 39, 40, 41, 45, 52, 56, 59, 69, 100, 107], "mind": 21, "part": [21, 29, 36, 101], "sd1": [21, 60, 61], "softwar": [21, 29, 35, 40, 45, 52, 57, 96, 102, 107], "01": [21, 30, 31, 39, 55, 59, 63, 66, 69, 75, 76, 79, 80, 82, 83, 87, 94, 99, 101], "00": [21, 50, 51, 59, 68, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 105], "particularli": [21, 39], "whether": [21, 22, 26, 28, 29, 35, 39], "legaci": 21, "awg_numb": [21, 45], "external_sourc": 21, "trigger_behaviour": 21, "queu": 21, "th": 21, "pxi": [21, 26, 60, 61, 65], "4000": [21, 30, 60, 61], "empti": [21, 29, 52, 61, 65, 107], "queue": [21, 29], "remov": [21, 29, 30, 40, 48, 54, 69, 106], "onboard": [21, 66], "ram": 21, "start_delai": 21, "prescal": [21, 60, 61], "waveform_typ": 21, "waveform_data_a": 21, "waveform_data_b": 21, "padding_mod": 21, "arrai": [21, 26, 29, 30, 36, 39, 45, 52, 55, 79, 94, 97], "launch": 21, "hvi": 21, "wf": [21, 40, 99, 105], "10n": 21, "repeat": [21, 50, 54, 79, 87, 95, 99, 103, 104], "infinit": [21, 29], "reduc": [21, 60, 61], "eff": 21, "waveform_fil": 21, "forc": [21, 40, 69], "jump": [21, 30, 40], "paus": [21, 31], "leav": [21, 26, 36], "incom": 21, "resum": 21, "awg_mask": 21, "lsb": 21, "cyclic": [21, 60, 61], "One": [21, 45, 93], "shot": [21, 29, 39], "waveform_numb": 21, "begin": [21, 29], "immedi": [21, 40, 67], "least": [21, 29, 31], "vi": 21, "deviation_gain": 21, "No": [21, 29, 30, 71, 72, 73, 77, 79, 81, 82, 83, 86], "boolean": [21, 40], "clock_config": 21, "clk": 21, "clkref": 21, "copi": [21, 30, 35, 40], "sd_triggerexternalsourc": [21, 60, 61], "sd_fpgatriggerdirect": 21, "sd_triggerpolar": 21, "active_high": 21, "sync_mod": 21, "sd_syncmod": 21, "sync_non": 21, "fpga": 21, "inout": 21, "active_low": 21, "sync_clk10": 21, "clk10": 21, "effect": [21, 29, 39], "sample_r": 21, "flush": [21, 29, 39], "clksy": 21, "clksync": 21, "sd_wave": 21, "filenam": [21, 40, 46, 48, 52, 56, 57, 68, 81, 96], "imag": [21, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "waveform_object": 21, "relat": [21, 31], "data_raw": 21, "reg_nam": 21, "data_s": 21, "fixed_address": 21, "sequenti": [21, 35], "consecut": [21, 29], "replac": [21, 31, 45, 69], "equal": [21, 45, 94, 97], "total": [21, 27, 29, 31, 36, 60, 61, 69], "accumul": [21, 67, 108], "trigger_sourc": [21, 52, 59, 99], "skew": 21, "pxi_clk10": 21, "channel_mask": 21, "simultan": [21, 29, 45, 64, 70, 90, 94, 108], "wave_shap": 21, "hiz": 21, "sinusoid": 21, "triangular": 21, "arbitrari": [21, 29, 40, 45, 60, 61, 89, 90, 108, 109], "partner": 21, "ch": [21, 29, 60, 61, 65, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 105], "wave": [21, 29, 36, 45, 60, 61, 66, 85, 89, 90, 108], "hw": [21, 43], "filter_mod": [21, 48], "sd_digitalfiltermod": 21, "aou_filter_off": 21, "aou_filter_flat": 21, "aou_filter_fifteen_tap": 21, "anti": 21, "ring": 21, "iq": [21, 30, 31], "markermod": 21, "trgpximask": 21, "trgiomask": 21, "markervalu": 21, "syncmod": 21, "marker": [21, 45], "On": 21, "panel": [21, 30, 39, 66, 94, 100], "syncron": 21, "10mhz": 21, "tigger": 21, "sd": 21, "reusabl": 21, "smallest": [21, 36], "By": [21, 29, 41, 69], "increas": [21, 55, 97], "1e8": 21, "cost": [21, 30], "longer": [21, 31, 39, 45, 53], "restor": 21, "behavior": [21, 69], "old": [21, 94], "sw_awg_async": 21, "awg2": [21, 60, 61, 71], "awg3": 21, "background": [21, 54], "ref_2": 21, "wave2": 21, "ref_3": 21, "wave3": 21, "waveform_size_limit": 21, "waveform_ref": 21, "_waveformreferenceintern": 21, "enqueu": [21, 108], "requested_waveform_size_limit": 21, "reserv": [21, 29, 94], "undon": 21, "keyword": [21, 26, 35, 40], "till": 21, "reus": [21, 80], "callabl": [21, 26, 35, 44], "decor": 21, "invok": [21, 35], "decoractor": 21, "signadyn": 21, "m32": 21, "33xx": 21, "initialis": [21, 29, 70, 90, 108], "daq_mask": 21, "compos": 21, "bitmask": 21, "daq_0": 21, "daq_1": 21, "n_point": [21, 39], "acquir": [21, 26, 35, 36, 64], "observ": [21, 69], "full": [21, 31, 48, 67, 94], "unknown": [21, 39], "full_scal": [21, 61], "hi": 21, "z": 21, "ohm": [21, 29, 36, 40, 99], "n_cycl": 21, "4095": 21, "sd_ain_triggermod": 21, "3v": 21, "combo": 21, "sd_combo": 21, "again": [21, 56, 60, 61, 62, 69], "address_mod": 21, "access_mod": 21, "pcport": 21, "word": [21, 57], "128": [21, 36], "wil": 21, "appear": [21, 29, 43, 67], "increment": [21, 29, 39, 94], "pxi_trigg": 21, "negat": 21, "logic": [21, 40], "simpli": [21, 67, 94], "shell": 21, "1000000": [21, 31, 55, 79], "1e4": [21, 72], "400": [21, 57], "1e5": [21, 64], "1e7": 21, "wave_s": 21, "pprint": [21, 74, 94], "_memory_manag": 21, "_memoryslot": 21, "sort_dict": 21, "allocated_slot": 21, "10000": [21, 36, 52, 99], "10000000": 21, "100000000": [21, 31], "331": [22, 62], "gpib": [22, 28, 40, 62, 63], "625": [22, 108, 109], "superconduct": [22, 28, 108, 109], "contant": 22, "unti": 22, "field_ramp_r": [22, 63], "lighthous": 23, "photon": 23, "sprout": 23, "inspir": 23, "pylablib": 23, "transform": [23, 27, 41], "super": [23, 27, 41, 94], "new_cmd": [23, 27, 41], "instead": [23, 24, 27, 29, 41, 44, 57, 94, 100, 109], "underli": [23, 27, 41], "extra": [23, 27, 41], "context": [23, 27, 29, 41], "thresh": 23, "99": [23, 30, 99], "show_progress": [23, 88], "percentag": [23, 28, 29], "show": [23, 61, 66, 69, 75, 76, 97, 102, 109], "progressbar": 23, "NO": [23, 27, 35, 39, 41], "groupedparamet": 23, "_delegate_group_factori": 23, "config": [23, 52, 57], "info": 23, "create_on_off_val_map": [23, 41], "opmod": 23, "idl": [23, 40], "w": [23, 40, 54, 60, 61, 106], "setter": 23, "warning_statu": 23, "shutter_statu": 23, "interlock_statu": 23, "shutter": 23, "interlock": 23, "on_hour": 23, "run_hour": 23, "m\u00b2": 24, "solsti": 24, "controller_address": 24, "op": 24, "params_to_skip_upd": [24, 29, 45], "everyth": [24, 29], "numpyjsonencod": [24, 29], "latest": [24, 26, 29, 64], "never": [24, 29], "skip": [24, 29, 69], "slow": [24, 27, 28, 29, 67, 69], "snapshot_get": [24, 29], "montana": 25, "s50": 25, "nation": [26, 66, 108, 109], "mutlifunct": 26, "nidaqmx": [26, 64], "readthedoc": [26, 64], "en": [26, 36, 64], "6363": [26, 64], "pretti": [26, 29, 64, 69], "analog": [26, 31, 64, 108], "squid": [26, 64], "_modul": [26, 64], "microscop": [26, 64], "susceptomet": [26, 64], "html": [26, 31, 39, 64, 96], "susceptometermicroscop": [26, 64], "scan_surfac": [26, 64], "samples_to_read": [26, 64], "Will": 26, "nchannel": 26, "target_point": [26, 64], "daq_ai": [26, 64], "dev_nam": 26, "ni": [26, 64, 65, 108, 109], "dev1": 26, "fresh": 26, "popul": 26, "ai_channel": [26, 64], "min_val": 26, "max_val": 26, "clock_src": 26, "idx": 26, "ao": 26, "daq_ao": [26, 64], "parameterwithsetpoint": [26, 35, 39, 94], "daq_do": 26, "pxi1slot2": 26, "2597": [26, 108, 109], "ch6": [26, 65], "name_map": [26, 65], "alias": [26, 108], "reset_devic": 26, "5654": [26, 66], "ivi": 26, "foundat": 26, "bin": [26, 48], "nirfsg_64": 26, "id_queri": 26, "As": [26, 29, 56, 69, 93], "18": [26, 45, 52, 56, 77, 82, 106], "5610": 26, "5650": 26, "5651": 26, "5652": 26, "5670": 26, "5671": 26, "5611": 26, "5644": 26, "5645": 26, "5646": 26, "5653": 26, "5672": 26, "5673": 26, "5673e": 26, "5820": 26, "5840": 26, "document": [26, 29, 35, 52, 57, 66, 100], "userspublicdocumentsn": 26, "instrumentsni": 26, "rfsgdocument": 26, "veri": [26, 29, 39, 69], "basic": [26, 30, 70, 90, 108], "caus": [26, 36, 39, 69], "niswitch": 26, "mostli": [26, 29], "maintain": 26, "session": [26, 45, 46, 48, 52, 56, 57, 68, 81, 96], "channellist": [26, 29, 57], "niswitch_kw": 26, "raw_nam": 26, "_session": 26, "get_channel_nam": 26, "someth": [26, 29], "drivererror": 26, "chanel": 26, "nimi": 26, "nitclk": 26, "_librari": 26, "c_long": 26, "struct": 26, "associ": [26, 35, 44], "numer": [26, 27, 55, 94], "attributeid": 26, "lib_prefix": 26, "premad": 26, "functino": 26, "libname_error_messag": 26, "libname_init": 26, "libname_getattribut": 26, "nirfsg_init": 26, "nisync_init": 26, "concret": 26, "form": [26, 28, 31, 45, 85, 106], "nirfsg_functionnam": 26, "nirfsg": 26, "c_ulong": 26, "error_cod": [26, 27, 30], "_error_messag": 26, "attr": 26, "datatyp": 26, "nirfsg_getattributevireal64": 26, "vireal64": 26, "visess": 26, "_init": 26, "set_valu": 26, "libname_setattribut": 26, "nirfsg_setattributevireal64": 26, "name_in_librari": 26, "restyp": 26, "without": [26, 31, 35, 69, 87, 94, 101], "vistatu": 26, "convert": [26, 28, 36, 39, 40, 63], "nonzero": 26, "_check_error": 26, "alwai": [26, 28, 29, 31, 35, 56, 69, 94], "namedtupl": 26, "byte": [26, 30, 39, 40, 55], "nifpga": 26, "refenc": 26, "agili": 27, "ag": [27, 108, 109], "uc8": [27, 108, 109], "stepper": [27, 28, 57], "err": [27, 47, 79], "describ": [27, 29, 55, 76, 85], "asrl3": [27, 47, 53, 67], "com3": [27, 67], "te": [27, 28], "previou": [27, 29, 60, 61, 69], "002": [27, 29, 53], "120": [27, 28, 56, 101], "accord": [27, 94, 107], "minut": 27, "1000": [27, 30, 31, 36, 40, 53, 57, 60, 61, 67, 71, 75, 76, 79, 81, 93, 99, 106], "1700": 27, "666": 27, "mount": [27, 67], "ilm": 28, "200": [28, 36, 42, 49, 60, 61, 67, 69, 94, 95, 99, 102, 104], "helium": 28, "asrl4": [28, 58, 92], "isobu": 28, "parallel": 28, "f008": 28, "safe": [28, 30], "fast": [28, 29, 31, 69, 94], "rs232": 28, "similar": [28, 30, 40], "prefac": 28, "use_gpib": 28, "overid": 28, "lead": [28, 55], "field_valu": 28, "go": [28, 29, 30, 39, 40, 52, 53, 55, 67, 99], "put": [28, 29], "cold": 28, "file_path": [28, 40, 68], "converter_path": 28, "threshold_temperatur": 28, "conversion_tim": 28, "30": [28, 31, 47, 53, 55, 56, 57, 67, 93, 95, 105], "vcl": [28, 68], "csv": [28, 45], "vcl_2_ascii_convert": 28, "ex": 28, "along": 28, "consequ": 28, "advic": 28, "thermomet": 28, "ruo2": 28, "cernox": 28, "bar": 28, "proprietari": 28, "subprocess": 28, "frequent": 28, "timer": 28, "bash": 28, "igh": 28, "dilut": 28, "refriger": 28, "intellig": 28, "idr": 28, "1998": [28, 30], "r": [28, 31, 39, 45, 55, 57, 59, 60, 61, 94, 105, 107, 108, 109], "valv": 28, "2uw": 28, "20uw": 28, "200uw": 28, "2mw": 28, "20mw": 28, "generator_numb": 29, "text": 29, "channelis": 29, "expos": 29, "multi": [29, 36], "mode_forc": [29, 69], "07": [29, 39, 58, 99, 100], "assum": [29, 99], "update_curr": [29, 69], "sec": [29, 69], "linger": 29, "idn_param": 29, "begin_tim": 29, "finit": [29, 30], "slope": [29, 69, 73], "sort": 29, "v_startlist": 29, "v_endlist": 29, "ramptim": 29, "smoothli": [29, 39], "shallow": 29, "BE": [29, 35], "NOT": [29, 35], "001": [29, 31, 39, 53, 94, 99], "estim": [29, 59], "excecut": 29, "2d": [29, 36, 70, 89, 90, 94, 108], "slow_chan": [29, 69], "slow_vstart": [29, 69], "slow_vend": [29, 69], "fast_chan": [29, 69], "fast_vstart": [29, 69], "fast_vend": [29, 69], "step_length": [29, 69], "slow_step": [29, 69], "fast_step": [29, 69], "spent": 29, "putput": 29, "ll": 29, "_write_respons": 29, "char": 29, "concaten": [29, 60, 61, 94], "wav": 29, "fun": 29, "channum": 29, "sync_delai": [29, 69], "sync_dur": [29, 69], "lfag": 29, "24": [29, 43, 66, 69, 80], "48": [29, 43, 52, 57], "__getattr__": 29, "customis": 29, "readout": [29, 36, 40, 94, 108], "contact": [29, 74, 75, 76, 80, 81, 85, 87], "output_trigg": [29, 74, 80, 87], "internal_trigg": [29, 81], "outer_trigger_channel": [29, 80], "factor": [29, 31], "how": [29, 67, 79, 90, 109], "much": [29, 65], "particular": [29, 35, 47, 64], "influenc": 29, "signific": 29, "nearbi": 29, "thu": [29, 39], "extend": [29, 69], "ident": 29, "matrix": [29, 35, 75, 76], "multipli": 29, "nplc": [29, 40, 59, 75, 76], "current_rang": 29, "powerlin": 29, "over": [29, 56, 58, 67, 69, 75, 76, 94], "modulation_v": [29, 75, 76], "steadi": 29, "record": [29, 36, 39, 70, 90, 108], "resist": [29, 40, 75, 76, 100, 108, 109], "calcul": [29, 31, 55], "modulation_voltag": 29, "divid": [29, 60, 61, 79], "current_chang": 29, "virtual": [29, 89, 90, 108], "contacts_to_voltag": 29, "contact_to_voltag": 29, "end_v": [29, 80, 87], "step_time_": [29, 80], "step_trigg": [29, 80, 87], "repetit": [29, 31, 40, 60, 61, 71, 77, 79, 80, 82, 83, 84, 86, 87, 99], "linearli": [29, 47], "involv": 29, "extrem": 29, "forth": 29, "start_sweep_trigg": 29, "1d": [29, 69, 89, 90, 108], "outer_contact": [29, 74, 80, 81, 87], "outer": [29, 80], "inner_contact": [29, 74, 80, 81, 87], "inner_voltag": [29, 74, 80, 81, 87], "outer_voltag": [29, 74, 80, 81, 87], "inner_step_time_": [29, 74, 80, 81, 87], "inner_step_trigg": [29, 74, 80, 81, 87], "outer_step_trigg": [29, 80], "inner": [29, 80, 81], "trace_nam": 29, "offset_v": [29, 71, 82, 83, 86], "slew_v_": [29, 82, 83, 86], "_waveform_context": 29, "remain": 29, "externalinput": 29, "dwell_": [29, 72, 77, 84], "delay_": [29, 88], "_dc_context": 29, "aperture_": 29, "_channel_context": 29, "peek": 29, "ii": [29, 75, 90, 108], "valueerror": [29, 30, 65, 69], "gate": [29, 31, 73, 89, 90, 108], "pool": 29, "synchronis": [29, 89, 90, 108], "ie": 29, "row": [29, 35], "pair": [29, 44], "_message_flush_timeout_m": 29, "carri": 29, "width_": [29, 71, 77, 82, 86], "06": [29, 39, 51, 52, 58, 74, 87, 96, 98, 99], "1m": 29, "media": 29, "definit": [29, 69, 108, 109], "loos": 29, "bu": [29, 52, 74], "trg": 29, "explicitli": 29, "inspect": [29, 63], "ieee": 29, "rememb": 29, "slew": [29, 31], "inject": 29, "placehold": 29, "10ma": 29, "200na": 29, "integr": [29, 69, 97], "10hz": 29, "medium": 29, "10khz": 29, "300khz": 29, "frequency_hz": [29, 72], "period_": [29, 82, 83, 85, 86], "invert": [29, 31], "span_v": [29, 82, 83, 85, 86], "flip": [29, 103], "span": [29, 30, 31, 52, 106, 108], "200mv": 29, "duty_cycle_perc": [29, 83, 86], "symmetr": 29, "There": [29, 45, 49, 63, 67, 100], "isol": 29, "3v3": 29, "dealloc": 29, "reclaim": 29, "exit": [29, 57], "fill": [29, 39, 94], "listen": [29, 76, 85], "interconnect": [29, 85], "cabl": 29, "left": 29, "place": [29, 45, 69, 109], "distribut": [29, 35], "listern": [29, 85], "across": 29, "dedic": 29, "indiviu": 29, "fire": [29, 69], "frozenset": 29, "adc": 30, "spi": 30, "rack": 30, "spirack": 30, "pip": [30, 53, 109], "spi_rack": 30, "dac": [30, 58, 64, 79], "dacn": 30, "stepsizen": 30, "spann": 30, "4v": [30, 31], "uni": 30, "bi": 30, "inter_delai": 30, "dac_step": 30, "reset_voltag": 30, "number_dac": 30, "dacx": 30, "spanx": 30, "careful": 30, "d5a_modul": 30, "d5mux": 30, "mixer": [30, 45], "enable_remot": 30, "alpha": 30, "protect": [30, 69], "protocol": 30, "sleep": [30, 58, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 94, 101], "statement": [30, 94], "d5": 30, "qtwork": 30, "tudelft": 30, "nl": 30, "schouten": 30, "htm": 30, "descriptor": 30, "rs232linkformat": 30, "txt": 30, "bottom": 30, "numdac": 30, "dac_delai": 30, "safe_vers": 30, "bip": 30, "use_lock": 30, "initialz": 30, "po": [30, 99], "mechan": 30, "outsid": [30, 36, 69], "prevent": 30, "flexibl": 30, "align": 30, "quantis": 30, "manner": [30, 94], "numpi": [30, 35, 60, 61, 69, 71, 72, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 88, 94, 99, 106], "insid": [30, 36, 40, 69], "millivolt": 30, "occasion": 30, "2v": [30, 31], "evenli": 30, "normal": [30, 31, 66], "88555733577478": 30, "64141298542764": 30, "976": 30, "4858472571908": 30, "975": 30, "6923781185626": 30, "flexabl": 30, "999": 30, "9237048905165": 30, "2046": 30, "1302357518883": 30, "optim": [30, 31], "give": [30, 31, 39, 40, 56, 63, 94], "2048": 30, "insuffici": 30, "502": 30, "oversampl": 30, "0991836423285": 30, "14": [30, 39, 43, 52, 53, 56, 58, 59, 69, 72, 73, 75, 76, 83, 85, 86, 87, 96, 99, 106], "501": 30, "9302662699321": 30, "narrow": 30, "help": 30, "message_len": 30, "dacnam": 30, "round": 30, "inter": 30, "consist": [30, 69, 109], "06103515625": 30, "amplifi": [30, 31, 39, 45, 107], "41": [30, 87], "enable_output": 30, "output_level": 30, "optimum": 30, "greater": 30, "larg": [30, 99], "_rohdeschwarzhmc804x": 31, "rohd": [31, 91, 92, 93, 108, 109], "schwarz": [31, 91, 92, 108, 109], "_rohdeschwarzhmp": 31, "schwartz": [31, 93], "u": [31, 56, 60, 61, 63, 99], "generator_63493": 31, "9379": 31, "2023": [31, 42, 43], "pend": [31, 40], "suit": 31, "mw": [31, 66, 102], "vector": [31, 35, 93, 108, 109], "rs_smw200a": 31, "dummi": 31, "sarah": 31, "fleitmann": 31, "hwchan": 31, "chnum": 31, "concern": [31, 36], "arb": 31, "lf": 31, "lf1": [31, 93], "smw": [31, 93], "k24": 31, "ext1": [31, 77], "lf2": 31, "gerer": 31, "noi": 31, "ext2": 31, "percent": 31, "modefor": 31, "unc": 31, "independ": [31, 45, 69, 94, 107], "tot": 31, "rat": [31, 93], "path2": 31, "path1": 31, "report": 31, "intb": 31, "baseband": 31, "b9": 31, "nor": 31, "lno": [31, 93], "sing": [31, 71, 72, 73, 77, 80, 82, 83, 84, 85, 86, 87], "diff": [31, 40], "differenti": 31, "k16": 31, "var": 31, "vp": 31, "04v": 31, "b10": 31, "overal": 31, "exce": 31, "bia": [31, 35, 97], "ba": 31, "anal": 31, "k739": 31, "subset": 31, "db0": 31, "db2": 31, "db3": 31, "db4": 31, "db6": 31, "db8": 31, "dbm2": 31, "dbm3": 31, "dbm4": 31, "szu": 31, "crest": 31, "peak": 31, "envelop": 31, "pep": 31, "rm": [31, 79], "35": [31, 67], "higher": 31, "lfchan": 31, "6v": 31, "monitor": 31, "lf1a": 31, "lf2a": 31, "lf1b": 31, "lf2b": 31, "noisa": 31, "noisb": 31, "ama": 31, "amb": 31, "fmpm": 31, "fmpma": 31, "fmpmb": 31, "datasheet": 31, "1mhz": 31, "synonym": 31, "swe": 31, "trapez": 31, "trapezoid": 31, "exactli": [31, 100], "man": 31, "within": 31, "returnvalu": 31, "calculationmod": 31, "interv": 31, "lin": [31, 99], "logarithm": 31, "upto": 31, "loadabl": 31, "center": [31, 52, 94, 106, 108], "loscil": 31, "coup": 31, "eco": 31, "boff": 31, "ebof": 31, "aoff": 31, "brace": 31, "norm": [31, 71, 77, 93, 99], "built": [31, 67], "hpow": 31, "01db": 31, "139db": 31, "hban": 31, "hdev": 31, "characterist": 31, "k23": [31, 93], "inv": 31, "suppress": [31, 66], "video": [31, 55], "transit": [31, 69], "smo": 31, "flatten": 31, "smooth": [31, 70, 90, 108], "shortest": 31, "vice": 31, "versa": 31, "g50": 31, "g1k": 31, "g10k": 31, "doub": 31, "egat": 31, "esin": 31, "forget": 31, "almost": 31, "outstand": 31, "And": [31, 91, 92], "k22": [31, 93], "0001": [31, 39], "stringarrai": 31, "meanful": 31, "comun": 31, "1412": [31, 93], "0000k02": [31, 93], "105578": [31, 93], "04": [31, 46, 54, 59, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 93], "29": [31, 43, 71, 93], "sp2": [31, 93], "opt": 31, "b13t": [31, 93], "b22": [31, 93], "b120": [31, 93], "outp1": 31, "sour1": [31, 93], "am1": 31, "dept": 31, "sour": [31, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 93], "am2": 31, "sen": 31, "fm1": [31, 93], "fm2": 31, "cent": 31, "300000000": 31, "losc": 31, "outp": [31, 74], "400000000": 31, "star": 31, "500000000": [31, 53], "20000000000": 31, "cre": 31, "lev": 31, "wbst": 31, "lfo1": 31, "lfo": 31, "50000": [31, 83, 86], "dwel": [31, 74, 79], "poin": 31, "retr": 31, "runn": 31, "shap": 31, "sawt": 31, "spac": 31, "pgen": 31, "pol": 31, "pm1": 31, "pm2": 31, "pm": [31, 57], "pow": 31, "145": [31, 87, 101], "pulm": 31, "del": 31, "wid": 31, "imp": 31, "vid": 31, "trig": [31, 39, 71, 72, 73, 74, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 99], "ttyp": 31, "widt": [31, 74], "401": 31, "amod": 31, "21": [31, 43, 59, 61, 66, 71, 73, 74, 76, 77, 80, 81, 82, 83, 85, 87, 88, 94, 104, 105], "sour2": [31, 74], "bw10": 31, "lfo2": 31, "calibration_fil": 31, "number_pixel": 33, "ccd_number_pixel": 33, "ccd_pixel_width": 33, "union": [34, 38], "member": [34, 38, 109], "core": [34, 108, 109], "sc5520a": [34, 96], "scipci": [34, 96], "sc5520a_uhf": [34, 96], "comput": [34, 39, 45, 55, 96], "mit": [35, 109], "licens": 35, "copyright": 35, "2020": 35, "quantum": [35, 108, 109], "permiss": 35, "herebi": 35, "grant": 35, "charg": 35, "person": 35, "obtain": 35, "deal": [35, 45], "right": [35, 53, 108], "merg": 35, "publish": 35, "sublicens": 35, "sell": 35, "permit": 35, "whom": 35, "furnish": 35, "subject": 35, "notic": [35, 67], "shall": 35, "substanti": 35, "portion": 35, "THE": 35, "AS": 35, "warranti": 35, "OF": 35, "express": [35, 57], "OR": [35, 69], "impli": [35, 69], "BUT": 35, "TO": 35, "merchant": 35, "FOR": 35, "AND": [35, 61], "noninfring": 35, "holder": [35, 45], "liabl": 35, "claim": 35, "damag": 35, "liabil": 35, "contract": 35, "tort": 35, "aris": 35, "WITH": 35, "fetch": [35, 109], "stamp": 35, "numpy_arrai": 35, "root_instru": [35, 44], "tcp_ip_adr": 35, "localhost": [35, 52], "control_port": 35, "12000": [35, 97], "counts_port": 35, "12345": 35, "transpos": 35, "timestamp": [35, 46, 48, 52, 56, 57, 68, 81, 96], "light": 35, "detector": [35, 97], "procedur": 35, "dark": 35, "error_msg": 35, "current_in_ua": 35, "dark_count": 35, "t_in_m": 35, "trigger_level_mv": 35, "tcp_ip_port": 35, "cnts_buffer": 35, "error_callback": 35, "sub": [35, 45], "cardid": 36, "spcm0": 36, "44xx": 36, "x8": 36, "platform": 36, "overview": [36, 48, 56, 70, 90, 95, 108], "server_nam": 36, "pyspcm": 36, "channel2": [36, 97], "mv_rang": 36, "input_path": 36, "compens": 36, "spc_tm_high": 36, "level0": 36, "calc": 36, "memsiz": 36, "seg_siz": 36, "posttrigger_s": 36, "sometim": 36, "restart": [36, 53, 69], "nr_averag": 36, "post_trigg": 36, "external_trigger_mod": 36, "trigger_or_mask": 36, "interleav": 36, "input_rang": 36, "pretrigger_s": 36, "seem": 36, "addition": 36, "sbench6": 36, "problem": 36, "stdout": 36, "errorreg": 36, "errorvalu": 36, "4096": 36, "pretrigger_mems": 36, "lp_filter": 36, "channel_0": 36, "channel_1": 36, "pretrigg": 36, "spc_rec_std_multi": 36, "covers": 36, "post": 36, "m2cmd_card_reset": 36, "trig_mod": 36, "bitlevel0": 36, "bitlevel1": 36, "channel_index": 36, "5000": 36, "hf": 36, "2500": 36, "mohm": 36, "acdc_coupl": 36, "level1": 36, "ext0": 36, "enter": [36, 100], "256": 36, "0x01000001": 36, "0x01000002": 36, "2nd": 36, "boxcar_averag": 36, "boxcar": 36, "spc_rec_std_singl": 36, "m2cmd_card_waitreadi": 36, "lcardtyp": 36, "outfp": 37, "env": [37, 53, 55], "bodi": 37, "k": [37, 42, 62, 106, 108], "u_posit": 38, "probe_flag": 38, "device_enumer": 38, "device_index": 38, "device_nam": 38, "stanford": 39, "research": [39, 94], "thinksr": 39, "sr": [39, 94, 95], "avlu": 39, "overload": 39, "9": [39, 48, 52, 54, 55, 56, 57, 58, 63, 66, 67, 69, 71, 72, 73, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 93, 94, 95, 100, 105, 106], "t0": 39, "t1": 39, "advanced_trig_en": 39, "burst_t0_config": 39, "burst_count": 39, "burst_delai": 39, "burst_mod": 39, "burst_period": 39, "channel_delai": 39, "channel_output_level": 39, "channel_output_polar": 39, "13": [39, 43, 46, 52, 53, 55, 56, 57, 58, 59, 62, 67, 71, 73, 77, 78, 79, 82, 83, 86, 87, 99, 105], "prescale_config": 39, "trig_holdoff": 39, "trig_lin": 39, "trig_rat": 39, "trig_single_shot": 39, "trig_thresh": 39, "ab": 39, "cd": 39, "ef": 39, "gh": 39, "ext_fal": 39, "ext_ris": 39, "single_ext_fal": 39, "single_ext_ris": 39, "sim": [39, 102, 109], "928": 39, "sim900": 39, "mainfram": 39, "slot_nam": 39, "lowest": 39, "raiseexc": 39, "whose": 39, "esr": 39, "cesr": 39, "ovsr": 39, "status": 39, "break": [39, 61], "assert": 39, "9600": 39, "voltagedict": 39, "equitim": 39, "volt_": 39, "_step": 39, "smooth_timestep": 39, "relev": [39, 40], "rawdata": 39, "_scalartype_co": 39, "sweep_arrai": [39, 94], "11111111": 39, "22222222": 39, "33333333": 39, "44444444": 39, "55555556": 39, "66666667": 39, "77777778": 39, "88888889": 39, "decrement": 39, "equival": [39, 45], "push": 39, "button": 39, "disp": [39, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "sweep_param": 39, "coher": 39, "pick": 39, "\u03b8": [39, 94], "aux": [39, 94], "what": 39, "displai": [39, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 94, 106], "short": [39, 61, 69], "aux1": [39, 94], "aux2": [39, 94], "approxim": [39, 69], "apart": 39, "yield": 39, "exact": 39, "uncertainti": 39, "40": 39, "whichev": 39, "r_dbm": [39, 94], "r_v": [39, 94], "3e": 39, "0003": 39, "003": [39, 53, 87], "03": [39, 66, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 94], "edit": 40, "emem": 40, "8191": 40, "half": 40, "voltage_low": 40, "voltage_high": 40, "src": 40, "user1": [40, 99], "user2": 40, "user3": 40, "user4": 40, "voltage_low1": [40, 99], "voltage_high1": [40, 99], "test_send": 40, "docstr": [40, 94], "520": 40, "lot": 40, "1000000000": 40, "numpoint": 40, "kw": 40, "datapoint": [40, 61], "dir": [40, 74], "jumplog": 40, "jump_log": 40, "properli": 40, "ron": 40, "wait_trigg": 40, "rep": 40, "goto": 40, "logic_jump": 40, "sequecn": 40, "root": 40, "resend": 40, "design": 40, "specifiedta": 40, "mandatori": 40, "marker1": 40, "marker2": 40, "pattern": 40, "extens": [40, 53], "poitn": 40, "moment": [40, 48], "retur": 40, "wfs1": 40, "wfs2": 40, "pat": 40, "seq": 40, "wfm": 40, "fname": 40, "force_reload": 40, "dmm": [40, 69, 74, 80, 87, 100], "scanner": [40, 64, 100], "keithlei": [40, 108, 109], "multimet": [40, 108, 109], "keithley6500": 40, "change_displai": 40, "change_autozero": 40, "sourcemet": 40, "_mode": 40, "6430": [40, 108, 109], "smu": [40, 108, 109], "layer": 40, "sens": [40, 59, 65, 69, 100], "dmm6500": [40, 108, 109], "insert": [40, 100], "quantiti": [40, 56, 100], "t255p": 41, "chiller": 41, "_watchdog": 41, "stand": 41, "home": [42, 43, 108], "fwd": 42, "rev": 42, "descript": 42, "cube": 42, "brush": 42, "servo": 42, "thorproduct": 42, "cfm": [42, 102], "partnumb": 42, "_thorlabs_cc": 42, "poll": [42, 102], "iago": [42, 43], "rst": [42, 43, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "_thorlabs_l": 42, "flipper": [42, 43, 103], "handheld": 42, "energi": 42, "newgrouppage9": 42, "objectgroup_id": 42, "3341": 42, "pn": 42, "prmz1z8": 42, "wheel": [42, 43, 104], "44": [43, 91], "22": [43, 48, 56, 67, 71, 75, 84, 86], "43": [43, 59], "42": [43, 51, 66], "25": [43, 56, 66, 71, 72, 73, 76, 77, 80, 85, 101, 105, 106], "31": [43, 59], "event_dialog": 43, "dialog": 43, "pop": 43, "clean": [43, 108], "thrown": 43, "hw_type": 43, "element": 43, "veloc": [43, 101], "deg": [43, 56, 94, 101], "360": 43, "absolute_posit": 43, "recalibr": [43, 101], "let": [43, 52, 54, 56, 62, 67, 94, 108], "lim_switch": 43, "zero_offset": 43, "min_vel": 43, "accn": 43, "max_vel": 43, "veloctii": 43, "vnx_atten64": [44, 105], "vnx_atten": [44, 105], "profil": 44, "133": [44, 59], "802q": [44, 105], "dll_get_funct": 44, "dll_set_funct": 44, "test_mod": [44, 105], "futur": [44, 46, 48, 52, 56, 57, 67, 68, 81, 96], "102": [44, 94, 105], "55102": [44, 105], "zurich": [45, 108, 109], "meant": 45, "emul": 45, "demodul": [45, 107], "sigout": [45, 107], "auxout": [45, 107], "theta": [45, 107], "great": 45, "dev204": 45, "zhinst": 45, "demod": [45, 107], "excit": [45, 107], "num_sigout_mixer_channel": 45, "compil": 45, "zi": [45, 107], "hdawg8": 45, "labon": 45, "54618": 45, "53866": 45, "furthermor": 45, "web": 45, "made": 45, "clip": [45, 69], "truncat": 45, "happen": [45, 101], "silent": 45, "warnings_as_error": 45, "qucod": 45, "node": 45, "tree": [45, 108], "blue": 45, "led": 45, "zipython": 45, "zilistenum": 45, "settingsonli": 45, "0x08": 45, "streamingonli": 45, "0x10": 45, "stream": 45, "subscribedonli": 45, "0x20": 45, "subscrib": 45, "basechannel": 45, "0x40": 45, "Or": 45, "wave_info": 45, "plai": 45, "feature_cod": 45, "sequence_program": 45, "tab": 45, "gui": 45, "elev": 45, "32768": 45, "wave_nam": 45, "referenc": 45, "qc": [46, 51, 52, 58, 59, 63, 68, 91, 92, 96, 97, 100, 102, 105, 106], "qcodes_contrib_driv": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "driver": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "hadn": [46, 48, 52, 56, 57, 68, 81, 96], "39": [46, 48, 52, 53, 55, 56, 57, 59, 63, 65, 66, 67, 68, 71, 72, 73, 74, 77, 79, 81, 82, 83, 86, 88, 93, 94, 95, 96, 99, 100, 105], "plu": [46, 48, 52, 56, 57, 68, 81, 96], "ed261978": [46, 68, 96], "command_histori": [46, 48, 52, 56, 57, 68, 81, 96], "logfil": [46, 48, 52, 56, 57, 68, 81, 96], "200826": 46, "14764": 46, "psa": 46, "usb0": 46, "0x0957": 46, "0x0e0b": 46, "my49370329": 46, "technologi": [46, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "27": [46, 53, 66, 81, 85], "rf_center_frequ": 46, "resolution_bandwidth": [46, 55], "video_bandwidth": [46, 55], "29117031": 46, "power_spectral_dens": 46, "123": 46, "5143635": 46, "elp320": 47, "regul": 47, "watt": [47, 102], "heater_addr": 47, "heater_v": 47, "heater_i": 47, "warmup_heat": 47, "voltage_set": 47, "current_set": 47, "voltage_out": 47, "current_out": 47, "matplotlib": [48, 55, 59, 61, 75, 76, 81, 85, 94, 97, 99, 106], "pyplot": [48, 59, 61, 75, 76, 81, 85, 97, 99], "plt": [48, 59, 61, 75, 76, 81, 85, 97, 99, 106], "jeniels": 48, "230130": 48, "93916": 48, "howev": [48, 55, 69], "du401_bu2": 48, "13789": 48, "58": 48, "cooler": 48, "vertic": 48, "exposur": 48, "acquisition_mod": 48, "read_mod": 48, "shutter_mod": 48, "fulli": 48, "figur": [48, 61, 69, 99, 106], "plot": [48, 52, 55, 59, 70, 90, 94, 97, 99, 108], "titl": [48, 55, 75, 76, 81, 94, 106], "xlabel": [48, 55, 94, 106], "ylabel": [48, 55, 94, 106], "cosmic": 48, "rai": 48, "accumulation_cycle_tim": 48, "number_accumul": 48, "63729": 48, "64724": 48, "64771": 48, "64745": 48, "65337": 48, "65069": 48, "65246": 48, "accordingli": 49, "anc": 49, "asrl7": 49, "axis1": [49, 67], "axis7": 49, "At": [49, 93], "submodul": [49, 93, 109], "asynchronosli": 49, "ip_pow": 50, "192": [50, 56, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 100], "168": [50, 56, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 100, 101], "admin": 50, "12345678": 50, "imform": 51, "valid_path": 51, "bf": 51, "bf_fridg": 51, "pressure_vacuum_can": 51, "pressure_compressor_inlet": 51, "pressure_compressor_outlet": 51, "pressure_mixture_tank": [51, 68], "pressure_venting_lin": 51, "temperature_4k_pl": [51, 68], "temperature_50k_pl": [51, 68], "temperature_magnet": [51, 68], "temperature_mixing_chamb": [51, 68], "temperature_stil": [51, 68], "blue_lagoon": 51, "53e": 51, "576": 51, "555": 51, "49": 51, "36": [51, 52, 55], "9866099999999998": 51, "9614": 51, "26158": 51, "912985": 51, "0078465": 51, "load_or_create_experi": [52, 94, 97, 106], "initialise_databas": 52, "dataset": [52, 55, 69, 88, 94, 97, 106], "plot_by_id": [52, 69], "dond": [52, 55, 88], "do1d": [52, 55, 94], "gre": [52, 56], "gre058050": [52, 56], "210330": 52, "113772": 52, "s2vn": 52, "download": [52, 108], "coppermountaintech": 52, "misc": 52, "hislip": 52, "tcpip0": [52, 56, 91, 99, 100, 106], "hislip0": [52, 93], "cmt": 52, "20107935": 52, "09": [52, 53, 54, 56, 66, 85, 86, 99], "201": 52, "averages_en": 52, "averages_trigger_en": 52, "0005e": 52, "data_transfer_format": 52, "asc": 52, "if_bandwidth": [52, 106], "nb_trace": 52, "2001": 52, "point_s11": 52, "point_s12": 52, "point_s21": 52, "point_s22": 52, "999e": 52, "2e": [52, 58, 71, 72, 77, 78, 79, 82, 85, 86], "databas": 52, "initialise_or_create_database_at": 52, "test_copper_mountain": 52, "exp": [52, 94, 97, 99, 106], "experiment_nam": [52, 94, 97, 106], "testing_coppermountain_driv": 52, "sample_nam": [52, 97, 106], "band_pass_filt": 52, "2e9": [52, 53], "10e3": 52, "mea": [52, 64, 69, 94, 100, 106], "register_paramet": [52, 69, 97, 106], "datasav": [52, 69, 97, 106], "add_result": [52, 69, 97, 106], "cbax": [52, 97], "run_id": [52, 69, 106], "experiment": [52, 55, 88, 94], "similarli": [52, 69], "paramt": [52, 55], "0477012": 52, "09391321": 52, "17265479": 52, "03038562": 52, "03399903": 52, "0214076": 52, "01097229": 52, "01708669": 52, "01996385": 52, "17442979": 52, "17352842": 52, "17585808": 52, "03521817": 52, "72": [52, 94], "72068274": 52, "74": [52, 95], "92402692": 52, "77": [52, 63], "23523101": 52, "87500527": 52, "86": [52, 94], "19919018": 52, "46406748": 52, "23681928": 52, "86312445": 52, "47": [52, 53], "37145838": 52, "20720528": 52, "45": [52, 96], "34542698": 52, "09130151": 52, "57583366": 52, "71111513": 52, "69": 52, "62992638": 52, "6484703": 52, "85211098": 52, "80363488": 52, "96240925": 52, "83102692": 52, "98620611": 52, "34": [52, 56, 58, 65, 71, 72, 73, 77, 79, 81, 82, 83, 86, 99, 100], "25529117": 52, "06598604": 52, "00305115": 52, "06177799": 52, "15385378": 52, "02385243": 52, "02926526": 52, "02279546": 52, "01547223": 52, "02163175": 52, "02391645": 52, "18152415": 52, "18361572": 52, "18402174": 52, "0000000e": 52, "9995000e": 52, "9990000e": 52, "9980010e": 52, "9990005e": 52, "03160302": 52, "10392121": 52, "17598948": 52, "02083835": 52, "02544277": 52, "02948864": 52, "01215209": 52, "01844561": 52, "01988006": 52, "11017192": 52, "10721224": 52, "10526495": 52, "68": [52, 66], "03181706": 52, "96986101": 52, "84": [52, 94], "366874": 52, "70": 52, "94278538": 52, "79": [52, 94], "11469549": 52, "38634014": 52, "24117547": 52, "60915241": 52, "78312326": 52, "20522653": 52, "38599278": 52, "49447507": 52, "83": [52, 94], "2538078": 52, "67": 52, "23946765": 52, "73": [52, 94], "17241871": 52, "75": [52, 66, 83, 86], "89235284": 52, "80": [52, 106], "80017483": 52, "81": 52, "72715481": 52, "1331486": 52, "56154342": 52, "36192594": 52, "23860211": 52, "37759455": 52, "75163547": 52, "00655536": 52, "06872062": 52, "14529468": 52, "02987041": 52, "01884765": 52, "02839042": 52, "01384824": 52, "02119365": 52, "02357165": 52, "10193855": 52, "10032872": 52, "09917688": 52, "vna_s11_magnitud": 52, "vna_s11_phas": 52, "setpoint_label": 52, "setpoint_nam": 52, "vna_frequ": 52, "pyusb": 53, "satisfi": 53, "conda": 53, "q38": 53, "site": [53, 55, 100], "packag": [53, 55, 100, 109], "kernel": 53, "close_al": [53, 59, 102, 105], "era": 53, "0165": 53, "v1": [53, 91, 92], "82": 53, "4700000000": 53, "sweep_start_frequ": 53, "2000000000": 53, "sweep_step_frequ": 53, "sweep_stop_frequ": 53, "6000000000": [53, 56, 105], "59": 53, "222": 53, "53": 53, "100e": [53, 72, 79, 82, 83, 86, 99], "10e6": 53, "succed": 53, "timeit": 53, "147": 53, "std": 53, "3e9": [53, 105], "178": [53, 100], "19": [53, 56, 76, 77, 85, 105, 107], "143": [53, 94, 101], "277": 53, "asrl16": 54, "1024": [54, 71], "now": [54, 56, 62, 65, 66, 67, 69, 93, 94], "660": 54, "634878": 54, "zero_offset_en": 54, "000390634": 54, "hp": 55, "notagerror": 55, "git": [55, 108, 109], "could": 55, "tag": 55, "gpib1": 55, "do0d": [55, 94], "do_plot": [55, 88, 94], "420": 55, "farzad": [55, 94], "test_freq_axi": 55, "test_trac": 55, "lt": [55, 94, 99, 100], "axessubplot": 55, "tutorial_exp": 55, "freq_axi": 55, "gt": [55, 94, 99, 100], "start_freq": [55, 106], "stop_freq": 55, "center_freq": [55, 106], "2450000000": 55, "2900000000": 55, "1450000000": 55, "2675000000": 55, "450000000": 55, "421": 55, "miniconda3": 55, "qcodesfork": 55, "680": 55, "userwarn": 55, "coordin": 55, "pcolormesh": 55, "cell": [55, 66], "monoton": 55, "decreas": 55, "incorrectli": 55, "explicit": 55, "colormesh": 55, "test_start_freq": 55, "colorbar": [55, 75, 76, 81, 94], "0x186e0c5e4f0": 55, "bandwith": 55, "sweep_tim": 55, "reference_level": 55, "300000": 55, "3000000": 55, "422": 55, "423": 55, "424": 55, "425": 55, "426": 55, "427": 55, "kill": 55, "som": 55, "ascii": 55, "nn": 55, "transfer_typ": 55, "perf_count": 55, "ascii_tim": 55, "bytes_tim": 55, "7235186299999995": 55, "17303064000000035": 55, "get_info": 55, "firmware_d": 55, "950914": 55, "3199": 55, "uptim": 55, "56": 55, "073000": 55, "210923": 56, "47112": 56, "rf_sourc": 56, "9760": 56, "hs9002b": 56, "020": 56, "28": [56, 65], "easili": [56, 63], "100mhz": 56, "ref_lock": 56, "rf_source_ch1": 56, "7e": 56, "temp": 56, "rf_source_ch2": 56, "6e": 56, "6e9": 56, "1700000000": 56, "gotten": 56, "summari": 56, "23": [56, 66, 71, 72, 78, 80, 87, 88], "conclud": 56, "introduct": [56, 109], "advanc": 56, "modul": [56, 60, 61, 93, 100, 108, 109], "theoret": 56, "conduct": 56, "regard": 56, "practic": 56, "fhr1000": 57, "dual": 57, "turret": 57, "entranc": 57, "unfortun": 57, "ship": 57, "labspec": 57, "specontrol_dl": 57, "docx": 57, "pathlib": 57, "tempfil": 57, "231006": 57, "740": 57, "sdk": 57, "mkdtemp": 57, "write_text": 57, "versionnumb": 57, "123456": 57, "serialnumb": 57, "1234567890": 57, "comport": 57, "baudrat": 57, "60000": 57, "focal": 57, "coefficientofangl": 57, "20071286": 57, "board": [57, 69], "speedmin": 57, "speedmax": 57, "280000": 57, "12500": 57, "motorstepunit": 57, "gratingnumb": 57, "slitnumb": 57, "1800": 57, "gr": 57, "mm": [57, 95], "addrax": 57, "54940": 57, "shift": 57, "minnm": 57, "maxnm": 57, "750": 57, "coefficientoflinear": 57, "000069196": 57, "grating2": 57, "2554965": 57, "999935906": 57, "450": 57, "minum": 57, "maxum": 57, "coeffum": 57, "slit2": 57, "delaym": 57, "dutycycl": 57, "1326": 57, "spe": 57, "inuitit": 57, "grating_1800": 57, "grating_600": 57, "slit_entr": 57, "slit_exit": 57, "prefer": 57, "600e3": 57, "180": [57, 101], "2142": 58, "be2142b": 58, "15ma": 58, "sn04": 58, "016": 58, "lc1846": 58, "vl446": 58, "240": [58, 101], "92e": 58, "12e": 58, "67e": 58, "49e": 58, "19e": 58, "93e": 58, "73e": 58, "77e": 58, "17e": 58, "24e": 58, "11e": 58, "78e": 58, "08e": 58, "04e": 58, "42e": 58, "ch04": 58, "50000014": 58, "ramp_slop": 58, "00025": [58, 92], "47945107": 58, "45145621": 58, "42344528": 58, "39945953": 58, "37142712": 58, "34345707": 58, "31545273": 58, "29144462": 58, "26346268": 58, "keithley6430": 59, "inc": 59, "1357727": 59, "c28": 59, "jun": 59, "2011": 59, "a02": 59, "arm_count": 59, "arm_sourc": 59, "imm": 59, "autozero": 59, "filter_auto": 59, "filter_median": 59, "filter_median_en": 59, "filter_mov": 59, "filter_moving_en": 59, "filter_repeat": 59, "filter_repeat_en": 59, "output_auto_off": 59, "output_on": 59, "sense_autorang": 59, "sense_curr": 59, "sense_current_rang": 59, "050000e": 59, "sense_mod": 59, "curr": [59, 100], "sense_resist": 59, "sense_resistance_ocomp": 59, "sense_resistance_rang": 59, "100000e": 59, "sense_voltag": 59, "sense_voltage_rang": 59, "source_curr": 59, "000000e": 59, "source_current_compli": 59, "source_current_compliance_trip": 59, "source_current_rang": 59, "source_delai": 59, "00300": 59, "source_delay_auto": 59, "source_mod": 59, "source_voltag": 59, "source_voltage_compli": 59, "source_voltage_compliance_trip": 59, "source_voltage_rang": 59, "trigger_count": 59, "meas_r": 59, "meas2_r": 59, "lazi": 59, "100313": 59, "51099999998": 59, "100377": 59, "86190725854": 59, "gsa": [60, 61], "triger": [60, 61], "try": [60, 61, 65, 69, 100], "probabl": [60, 61], "resid": [60, 61], "sy": [60, 61, 106], "x86": [60, 61], "logger": [60, 61, 97, 106], "start_all_log": [60, 61, 97, 106], "get_file_handl": [60, 61], "setlevel": [60, 61], "close_all_registered_instru": [60, 61], "demonstr": [60, 61, 69], "wrong_chassi": [60, 61], "failur": [60, 61], "empty_slot": [60, 61], "not_m3202a": [60, 61], "add_compon": [60, 61, 97, 106], "def": [60, 61, 71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 94], "get_divid": [60, 61], "elif": [60, 61], "create_sawtooth": [60, 61], "n_pt": [60, 61], "tile": [60, 61, 79], "create_sin": [60, 61], "phi": [60, 61], "pi": [60, 61, 66, 71, 99], "sin": [60, 61, 71, 99], "pxi1": [60, 61], "trigger_pxi1": [60, 61], "sd_triggerbehavior": [60, 61], "trigger_fal": [60, 61], "sd_waveshap": [60, 61], "aou_awg": [60, 61], "sd_queuemod": [60, 61], "amplitude_channel_1": [60, 61], "offset_channel_2": [60, 61], "durat": [60, 61, 69, 99], "20x": [60, 61], "prescaler_1gsa": [60, 61], "prescaler_200msa": [60, 61], "prescaler_50msa": [60, 61], "sawtooth_2u": [60, 61], "200msa": [60, 61], "pt": [60, 61], "zeros_awg1": [60, 61], "sawtooth_2us_awg1": [60, 61], "steps_awg1": [60, 61], "zeros_awg2": [60, 61], "sine_awg2": [60, 61], "ext_trigg": [60, 61], "auto_trigg": [60, 61], "autotrig": [60, 61], "0b0011": [60, 61], "0b1100": [60, 61], "conenct": 61, "sd_error": 61, "geterrormessag": 61, "slot_in": 61, "num_channel": 61, "modulein": 61, "sd_ain": 61, "moduleinid": 61, "openwithslot": 61, "num_cycl": 61, "dig_prescal": 61, "in_dur": 61, "tot_points_in": 61, "delay_in": 61, "daqstop": 61, "daqflush": 61, "channelinputconfig": 61, "ain_imped": 61, "ain_impedance_hz": 61, "ain_coupl": 61, "ain_coupling_dc": 61, "channelprescalerconfig": 61, "daqdigitaltriggerconfig": 61, "daqconfig": 61, "daqstartmultipl": 61, "points_per_read": 61, "20000": [61, 82, 93], "read_timeout": 61, "numreadpoint": 61, "readdon": 61, "cnt": 61, "daqcounterread": 61, "readpoint": 61, "daqread": 61, "fig": [61, 75, 76, 81, 97], "gpib0": [62, 63, 94], "lsci": [62, 63], "331259": 62, "032301": 62, "294": 62, "284": 62, "heater_output": 62, "heater_rang": 62, "290": 62, "300": [62, 67, 101], "5w": 62, "specifz": 63, "0166614": 63, "6251287": 63, "01666": 63, "magnet_coil_constant_unit": 63, "coil_constant_unit": 63, "0014": 63, "current_limit": 63, "55": 63, "current_ramp_r": 63, "current_rate_limit": 63, "4e": [63, 77], "14994": 63, "oer_quench": 63, "operational_error_statu": 63, "000000000": 63, "persistent_switch_heat": 63, "quench_current_step_limit": 63, "quench_detect": 63, "ramp_seg": 63, "ramping_st": 63, "0048": 63, "voltage_limit": 63, "target_curr": 63, "target_field": 63, "verifi": 63, "inde": 63, "ben": 63, "0016660000000000002": 63, "001678": 63, "1007202881152461": 63, "09996000000000001": 63, "19992000000000001": 63, "follwo": 63, "million": 64, "num_ai_channel": 64, "thousand": 64, "devnam": [64, 107], "dev0": 64, "sample_rate_per_channel": 64, "num_samples_raw": 64, "num_samples_averag": 64, "ai_task": 64, "wait_until_don": 64, "mani": [64, 108, 109], "__": 64, "scan_lin": 64, "multichannel": 64, "ao_channel": 64, "voltage_0": 64, "voltage_4": 64, "multiplex": 65, "rf_switch": 65, "short_nam": 65, "1dbfd38": 65, "85": [65, 94], "ch3": 65, "ch4": 65, "ch5": 65, "anywai": 65, "memor": 65, "yaml": 65, "unlik": 65, "qubit": 65, "switch_channel": 65, "switch_main": 65, "switch_ch2": 65, "switch_qubit": 65, "switch_ch4": 65, "switch_ch5": 65, "switch_ch6": 65, "switch_com": 65, "generatro": 66, "pxie5654": 66, "mw_sourc": 66, "03176e2e": 66, "2015": 66, "bootload": 66, "5e9": 66, "visibl": [66, 69], "oscilloscop": [66, 69], "clock_sourc": 66, "pulse_mod_en": 66, "ttl": 66, "unmodul": 66, "carrier": 66, "a_c": 66, "co": 66, "nomin": 66, "produc": [66, 81], "tone": 66, "analog_mod_typ": 66, "amplitude_mod_sensit": 66, "revert": 66, "ctl": 67, "v2": 67, "m100l": 67, "489": 67, "axis2": 67, "108": [67, 99], "progress": 67, "step_delai": 67, "step_amplitude_neg": 67, "touch": 67, "therefor": 67, "limit_statu": 67, "not_act": 67, "201007": 68, "9328": 68, "20201005": 68, "temperature_100mk": 68, "295": 68, "94393629146197": 68, "622032281476": 68, "282": 68, "72965240364397": 68, "9949711258109": 68, "115153276995": 68, "pressure_condensation_lin": 68, "pressure_forepump_back": 68, "420131839019814": 68, "0630699567828778": 68, "697571356918492": 68, "new_experi": 69, "spossibl": 69, "ongo": 69, "undisturb": 69, "parmet": 69, "cach": 69, "due": 69, "settl": 69, "specifii": 69, "asrl2": 69, "seven": 69, "teh": 69, "inf": 69, "against": 69, "ch01": 69, "hand": 69, "hereaft": 69, "notion": 69, "ch02": [69, 71, 72], "complain": 69, "bacaus": 69, "fewer": 69, "slice": 69, "goe": 69, "witin": 69, "pul": 69, "assing": 69, "25e": 69, "sync1": 69, "unassign": 69, "simutan": 69, "ten": 69, "faster": 69, "ctime": 69, "testiv": 69, "write_period": 69, "set_v": 69, "get_i": 69, "myplot": 69, "ch03": [69, 71, 72, 73, 77, 78, 82, 83, 84, 86], "10m": 69, "stabil": 69, "why": 69, "conrol": 69, "immidi": 69, "keep": 69, "spike": 69, "ride": 69, "posibl": 69, "hook": [69, 81], "fool": 69, "eventhough": 69, "dip": 69, "1v": [69, 99], "unchang": 69, "provok": 69, "ve": 69, "host": 69, "eight": 69, "tempx_i": 69, "temp0_0": 69, "temp2_1": 69, "recov": 69, "situat": 69, "shut": 69, "qdevil_qdac": [70, 90, 108], "ipython": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 100], "qdac_addr": [71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88], "tcpip": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93], "5025": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88], "instrument_driv": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "rigol": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "rigolds1074z": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "rigol_addr": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "199": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "scope": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "ds1104z": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "ds1za171812151": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "captur": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 108], "bmpdata": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "read_raw": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "chan1": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "chan3": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 86, 87], "bwl": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "prob": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "scal": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87], "tim": [71, 72, 73, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 99], "my_trac": 71, "ext4": [71, 77, 82, 86], "source_from_trigg": [71, 77, 82, 86], "osc": [71, 77, 86, 87], "chan4": [71, 77, 80, 82, 86, 87], "10e": [71, 72, 74, 80, 84, 85, 87], "long_trac": 71, "endpoint": 71, "chan2": [71, 72, 80, 85, 87], "dc_list_3": 72, "dc_list_2": 72, "list2_end": 72, "dc_constant_v": [73, 81, 88], "pp": 74, "prettyprint": 74, "plunger2": [74, 80, 87], "plunger3": [74, 80, 87], "trig4": 74, "int1": [74, 79], "sst": 74, "tmod": 74, "coun": [74, 79], "cont": [74, 79], "int2": 74, "sour3": 74, "416667": 74, "133333": 74, "tint": [74, 79], "resistor": [75, 76, 108, 109], "5m6": [75, 76], "33m": [75, 76], "5g": [75, 76], "g1": [75, 76, 85], "g2": [75, 76, 85], "g3": [75, 76], "g4": [75, 76], "o5": 75, "015": [75, 76], "013": [75, 76], "021": [75, 76], "modulation_mv": [75, 76], "powerline_cycl": [75, 76], "leakage_matrix_ohm": [75, 76], "leakage_megaohm": [75, 76], "m\u03c9": [75, 76], "subplot": [75, 76, 81, 97], "img": [75, 76, 81], "imshow": [75, 76, 81], "interpol": [75, 76, 81], "vmin": [75, 76], "vmax": [75, 76], "tick": [75, 76, 106], "arang": [75, 76, 79, 99], "minortick": [75, 76], "set_xtick": [75, 76], "set_ytick": [75, 76], "grid": [75, 76, 94, 106], "color": [75, 76], "grei": [75, 76], "linewidth": [75, 76], "gca": [75, 76, 99], "invert_yaxi": [75, 76], "set_label": [75, 76, 81], "qdac1_addr": [76, 85], "qdac_1": [76, 85], "qdac2_addr": [76, 85], "qdac_2": [76, 85], "togeth": [76, 85], "_": [76, 85], "47m": 76, "g5": 76, "o6": 76, "011": 76, "step_start_mark": 77, "step_end_mark": 77, "my_list": [77, 84], "resourcemanag": 79, "open_resourc": 79, "write_termin": 79, "read_termin": 79, "50e": [79, 84], "0e": 79, "trac": 79, "rem": 79, "mysquar": 79, "write_binary_valu": 79, "stair": 79, "syst": 79, "110e": 80, "detun": [80, 87], "slow_trigg": 80, "jp": 81, "220421": 81, "5376": 81, "ge": [81, 88], "diodes_left": 81, "diodes_right": 81, "inner_step": 81, "inner_v": 81, "outer_step": 81, "outer_v": 81, "flow": [81, 88], "circumv": 81, "flaw": 81, "442": 81, "reshap": 81, "extent": 81, "cmap": 81, "plasma": 81, "nearest": 81, "set_xlabel": 81, "set_ylabel": 81, "ma": 81, "200e": [82, 83, 86], "400e": [82, 83, 86], "prepar": [85, 108, 109], "8e": 85, "plunger4": 87, "60e": 87, "sensor1": 87, "41666667": 87, "13333333": 87, "98": 87, "057": 87, "037": 87, "017": 87, "023": 87, "04283333": 87, "02283333": 87, "00283333": 87, "01716667": 87, "03716667": 87, "02866667": 87, "00866667": 87, "01133333": 87, "03133333": 87, "05133333": 87, "0145": 87, "0055": 87, "0255": 87, "0455": 87, "0655": 87, "204": 87, "008": 87, "188": 87, "384": 87, "315": 87, "119": 87, "077": 87, "273": 87, "469": 87, "034": 87, "162": 87, "358": 87, "554": 87, "051": 87, "247": 87, "443": 87, "639": 87, "767": 87, "685": 87, "603": 87, "521": 87, "439": 87, "48366667": 87, "40166667": 87, "31966667": 87, "23766667": 87, "15566667": 87, "20033333": 87, "11833333": 87, "03633333": 87, "04566667": 87, "12766667": 87, "083": 87, "165": 87, "329": 87, "411": 87, "to_back": 87, "386": 87, "2615": 87, "137": 87, "0125": 87, "112": 87, "149": 87, "1625": 87, "176": [87, 100, 101], "1895": 87, "203": 87, "left_diod": 88, "right_diod": 88, "do2d": [88, 94], "param_set1": 88, "start1": 88, "stop1": 88, "num_points1": 88, "delay1": 88, "param_set2": 88, "param_mea": 88, "read_current_a": 88, "set_before_sweep": 88, "213": 88, "chain": [89, 90, 108], "ps_1": [91, 92], "inst0": [91, 99, 100, 106], "amp": [91, 92, 93], "026373828": 91, "hw42000000": 91, "sw01": 91, "303": 91, "set_curr": [91, 92], "i1": [91, 92], "101920": 92, "hw50020003": 92, "sw2": 92, "62": 92, "100khz": 93, "40ghz": 93, "wide": 93, "radar": 93, "visaioerror": 93, "134": 93, "fm_channel": 93, "ration": 93, "dbg": 93, "mock": 93, "standford": 94, "lockin1": 94, "sr844_notebook__": 94, "stanford_research_system": 94, "n49388": 94, "ver1": 94, "006": 94, "quickli": 94, "r_v_offset": 94, "r_dbm_offset": 94, "x_offset": 94, "y_offset": 94, "aux_in1": 94, "aux_in2": 94, "aux_out1": 94, "aux_out2": 94, "buffer_sr": 94, "buffer_acq_mod": 94, "buffer_npt": 94, "buffer_trig_mod": 94, "ch1_datatrac": 94, "ch1_displai": 94, "ch2_datatrac": 94, "ch2_displai": 94, "complex_voltag": 94, "filter_slop": 94, "oct": 94, "harmon": 94, "input_imped": 94, "output_interfac": 94, "phase_offset": 94, "ratio_mod": 94, "reference_sourc": 94, "sweep_setpoint": 94, "time_const": [94, 107], "00901563": 94, "0074385j": 94, "fact": 94, "00901262": 94, "00744152": 94, "5453": 94, "auto_gain": 94, "16383": 94, "pull": 94, "71": 94, "512": 94, "buffer_reset": 94, "buffer_start": 94, "buffer_paus": 94, "556": 94, "lockin_sweep_setpoint": 94, "lockin_ch1_datatrac": 94, "some_sampl": 94, "\u03bcv": 94, "convin": 94, "25000": 94, "35000": 94, "101": [94, 106], "send_trigg": 94, "558": 94, "khz": 94, "91": 94, "grid_sampl": 94, "29000": 94, "29300": 94, "92": 94, "93": 94, "560": 94, "construct": 94, "139": 94, "fast_axi": 94, "measurement_instru": 94, "sweeper": 94, "wait_fast": 94, "measurment_label": 94, "measurement_var": 94, "getattr": 94, "crucial": 94, "140": [94, 101], "141": 94, "142": 94, "frequency_buff": 94, "freq_mea": 94, "598": 94, "lockin_aux_out1": 94, "0x18a73db7850": 94, "95": 94, "562": 94, "lockin_frequ": 94, "lockin_r_v": 94, "565": 94, "lockin_x": 94, "0x26ca6ddc850": 94, "0x26ca6e02fd0": 94, "2975": 95, "blaze": 95, "groov": 95, "central": 95, "groove_dens": 95, "\u03bcm": 95, "756": 95, "675": 95, "1350": 95, "745": 95, "6130981445312": 95, "6336059570312": 95, "6541137695312": 95, "674560546875": 95, "695068359375": 95, "715576171875": 95, "736083984375": 95, "756591796875": 95, "777099609375": 95, "7975463867188": 95, "210604": 96, "4564": 96, "architectur": 96, "40ghz_signal": 96, "recogn": 96, "sc": 96, "mw1": 96, "268445854": 96, "0199999809265137": 96, "2684": 96, "clock_frequ": 96, "clock_refer": 96, "single_ton": 96, "406": 96, "celsiu": 96, "manufacture_d": 96, "2021": 96, "11h": 96, "10e9": 96, "10000000000": 96, "expand_setpoints_help": 97, "plot_dataset": 97, "websq": 97, "number_of_detector": 97, "measurement_period": 97, "ua": 97, "bias_curr": 97, "trigger_level": 97, "amount": 97, "iv": 97, "performing_meas_using_parameters_and_dataset": 97, "timemea": 97, "channel1": 97, "channel3": 97, "channel4": 97, "37866131": 98, "c010219": 99, "fv": 99, "94": 99, "am_depth1": 99, "am_depth2": 99, "am_internal_efile1": 99, "am_internal_efile2": 99, "am_internal_freq1": 99, "am_internal_freq2": 99, "am_internal_function1": 99, "am_internal_function2": 99, "am_internal_source1": 99, "am_internal_source2": 99, "am_state1": 99, "am_state2": 99, "burst_mode1": 99, "burst_mode2": 99, "burst_ncycles1": 99, "burst_ncycles2": 99, "burst_state1": 99, "burst_state2": 99, "burst_tdelay1": 99, "burst_tdelay2": 99, "center_freq1": 99, "center_freq2": 99, "combine1": 99, "combine2": 99, "fm_deviation1": 99, "fm_deviation2": 99, "fm_internal_efile1": 99, "fm_internal_efile2": 99, "fm_internal_freq1": 99, "fm_internal_freq2": 99, "fm_internal_function1": 99, "fm_internal_function2": 99, "fm_internal_source1": 99, "fm_internal_source2": 99, "fm_state1": 99, "fm_state2": 99, "freq_concurrent1": 99, "freq_concurrent2": 99, "freq_cw1": 99, "freq_cw2": 99, "freq_mode1": 99, "freq_mode2": 99, "freq_span1": 99, "9e": 99, "freq_span2": 99, "freq_start1": 99, "freq_start2": 99, "freq_stop1": 99, "freq_stop2": 99, "fsk_freq1": 99, "fsk_freq2": 99, "fsk_internal_rate1": 99, "fsk_internal_rate2": 99, "fsk_source1": 99, "fsk_source2": 99, "fsk_state1": 99, "fsk_state2": 99, "function_efile1": 99, "function_efile2": 99, "function_ramp_symmetry1": 99, "function_ramp_symmetry2": 99, "function_shape1": 99, "function_shape2": 99, "impedance_output1": 99, "impedance_output2": 99, "noise_level3": 99, "noise_level4": 99, "phase1": 99, "phase2": 99, "pm_deviation1": 99, "5708": 99, "pm_deviation2": 99, "pm_internal_efile1": 99, "pm_internal_efile2": 99, "pm_internal_freq1": 99, "pm_internal_freq2": 99, "pm_internal_function1": 99, "pm_internal_function2": 99, "pm_internal_source1": 99, "pm_internal_source2": 99, "pm_state1": 99, "pm_state2": 99, "polarity_output1": 99, "polarity_output2": 99, "pulse_delay1": 99, "pulse_delay2": 99, "pulse_duty_cycle1": 99, "pulse_duty_cycle2": 99, "pulse_hold1": 99, "pulse_hold2": 99, "pulse_period1": 99, "pulse_period2": 99, "pulse_trans_lead1": 99, "pulse_trans_lead2": 99, "pulse_trans_trail1": 99, "pulse_trans_trail2": 99, "pulse_width1": 99, "pulse_width2": 99, "pwm_duty_deviation1": 99, "pwm_duty_deviation2": 99, "pwm_internal_efile1": 99, "pwm_internal_efile2": 99, "pwm_internal_freq1": 99, "pwm_internal_freq2": 99, "pwm_internal_function1": 99, "pwm_internal_function2": 99, "pwm_internal_source1": 99, "pwm_internal_source2": 99, "pwm_state1": 99, "pwm_state2": 99, "state_output1": 99, "state_output2": 99, "sweep_hold_time1": 99, "sweep_hold_time2": 99, "sweep_mode1": 99, "sweep_mode2": 99, "sweep_return_time1": 99, "sweep_return_time2": 99, "sweep_spacing1": 99, "sweep_spacing2": 99, "sweep_time1": 99, "sweep_time2": 99, "trigger_slop": 99, "trigger_tim": 99, "voltage_amplitude1": 99, "voltage_amplitude2": 99, "voltage_concurrent1": 99, "voltage_concurrent2": 99, "voltage_high2": 99, "voltage_limit_high1": 99, "voltage_limit_high2": 99, "voltage_limit_low1": 99, "voltage_limit_low2": 99, "voltage_low2": 99, "voltage_offset1": 99, "voltage_offset2": 99, "voltage_unit1": 99, "vpp": 99, "voltage_unit2": 99, "realli": 99, "anyth": 99, "line2d": 99, "0xa471608": 99, "burst": 99, "high1": 99, "amongst": 100, "wire": 100, "dmm_1": 100, "04438044": 100, "04b": 100, "5799": 100, "959": 100, "fre": 100, "accessd": 100, "resistance_4w": 100, "voltage_dc": 100, "current_dc": 100, "5793": 100, "865": 100, "rear": 100, "knob": 100, "active_termin": 100, "fron": 100, "5798": 100, "519": 100, "traceback": 100, "recent": [100, 106], "7c3ed5015dc0": 100, "appdata": 100, "python38": 100, "get_wrapp": 100, "583": 100, "584": 100, "585": 100, "586": 100, "587": 100, "570": 100, "571": 100, "might": 100, "572": 100, "raw_valu": 100, "get_funct": 100, "573": 100, "574": 100, "_from_raw_value_to_valu": 100, "__call__": 100, "typeerror": 100, "177": 100, "arg_count": 100, "exec_funct": 100, "_measur": 100, "65": 100, "1_ch1_resist": 100, "84d4b9528614": 100, "152": 100, "153": [100, 101], "154": 100, "1_resist": 100, "inst": 101, "55125694": 101, "sw": [101, 103, 104], "move_hom": 101, "velocity_max": 101, "meantim": 101, "position_async": 101, "last_posit": 101, "250": 101, "280": 101, "33045196533203": 101, "121": 101, "30647277832031": 101, "122": 101, "93938446044922": 101, "125": 101, "22875213623047": 101, "127": 101, "80081939697266": 101, "130": 101, "36468505859375": 101, "132": 101, "91712951660156": 101, "135": 101, "5030059814453": 101, "138": 101, "07122802734375": 101, "61135864257812": 101, "18075561523438": 101, "73727416992188": 101, "148": 101, "30560302734375": 101, "8717498779297": 101, "4274444580078": 101, "155": 101, "98837280273438": 101, "158": 101, "54783630371094": 101, "161": 101, "1175994873047": 101, "163": 101, "6906280517578": 101, "166": 101, "25445556640625": 101, "7959442138672": 101, "171": 101, "37112426757812": 101, "173": 101, "93038940429688": 101, "48873901367188": 101, "179": 101, "0663604736328": 101, "181": 101, "61782836914062": 101, "184": 101, "19651794433594": 101, "kls101": 102, "klsnnn": 102, "thorlabs_kinesi": 102, "software_pag": 102, "viewsoftwarepag": 102, "motion_control": 102, "under": [102, 106, 109], "motioncontrol": 102, "kcube": 102, "lasersourc": 102, "device_list": 102, "milisecod": 102, "polling_spe": 102, "mff002": 103, "37864181": 103, "83857355": 104, "90": [104, 107], "00012969970703": 104, "00189208984375": 104, "serial_num": 105, "529": 105, "working_frequ": 105, "6300000000": 105, "working_frequnci": 105, "overridden": 105, "23160": 105, "main_port": 105, "test_port": 105, "lda_main_port": 105, "lda_ch2": 105, "200000000": 105, "lda_test_port": 105, "lda_ch4": 105, "datetim": 106, "zvl": 106, "vnarstafuri": 106, "fisica": 106, "unina": 106, "inizi": 106, "parameter_snap": 106, "s_paramet": 106, "meas_format": 106, "end_freq": 106, "span_freq": 106, "vna_pow": 106, "points_vna": 106, "4001": 106, "avg": 106, "1e9": 106, "san": 106, "nwa": 106, "original_timeout": 106, "new_timeout": 106, "exp_nam": 106, "registr": 106, "s_trace": 106, "rf_power": 106, "cont_meas_on": 106, "electrical_delay_auto": 106, "electr": 106, "autoscal": 106, "get_v": 106, "get_v2": 106, "complex": 106, "scatter": 106, "shutdown": 106, "cont_meas_off": 106, "captured_run_id": 106, "load_by_run_spec": 106, "get_parameter_data": 106, "zvl_zvl_frequenc": 106, "save_trac": 106, "zvl_trace": 106, "zvl_s_trace": 106, "figsiz": 106, "dpi": 106, "facecolor": 106, "edgecolor": 106, "rc": 106, "labels": 106, "fontsiz": 106, "xtick": 106, "ytick": 106, "x_label": 106, "y_label": 106, "plot_titl": 106, "sa": 106, "seen": 106, "essenti": 107, "compris": 107, "whatev": 107, "auxiliari": 107, "dev200": 107, "lia": 107, "demod1": 107, "sigout1": 107, "auxouts1": 107, "lia1": 107, "9e3": 107, "sigout_rang": 107, "sigout_amplitude0": 107, "output_amplitud": 107, "repositori": [108, 109], "initial": 108, "stage": 108, "equip": 108, "measurer": [108, 109], "hs900b": [108, 109], "100k": [108, 109], "omega": [108, 109], "311": [108, 109], "quench": 108, "multifunct": [108, 109], "hmc": [108, 109], "8043": [108, 109], "rohe": [108, 109], "snspd": [108, 109], "10mwa168": [108, 109], "afg": 108, "hp8594e": [108, 109], "transfer": 108, "develop": 109, "best": 109, "effort": 109, "basi": 109, "remam": 109, "clone": 109, "origin": 109, "checkout": 109, "symbol": 109, "heavili": 109, "improv": 109, "jupyt": 109, "strongli": 109, "encourag": 109, "makerofinstru": 109, "convent": 109, "especi": 109, "2700": 109, "gpl": 109, "subpackag": 109, "page": 109}, "objects": {"qcodes_contrib_drivers": [[0, 0, 0, "-", "drivers"]], "qcodes_contrib_drivers.drivers": [[1, 0, 0, "-", "Advantech"], [2, 0, 0, "-", "Agilent"], [3, 0, 0, "-", "AimTTi"], [4, 0, 0, "-", "Andor"], [5, 0, 0, "-", "Attocube"], [7, 0, 0, "-", "Aviosys"], [8, 0, 0, "-", "Bilt"], [9, 0, 0, "-", "BlueFors"], [0, 0, 0, "-", "CMTS5048"], [10, 0, 0, "-", "CopperMountain"], [11, 0, 0, "-", "Cryocon"], [12, 0, 0, "-", "Cryogenic"], [13, 0, 0, "-", "DaylightSolutions"], [14, 0, 0, "-", "ERAInstruments"], [15, 0, 0, "-", "GeneralMicrowave"], [16, 0, 0, "-", "Gentec"], [17, 0, 0, "-", "Holzworth"], [18, 0, 0, "-", "Horiba"], [20, 0, 0, "-", "Keysight"], [22, 0, 0, "-", "Lakeshore"], [23, 0, 0, "-", "LighthousePhotonics"], [24, 0, 0, "-", "M2"], [25, 0, 0, "-", "MontanaInstruments"], [26, 0, 0, "-", "NationalInstruments"], [27, 0, 0, "-", "Newport"], [28, 0, 0, "-", "Oxford"], [29, 0, 0, "-", "QDevil"], [30, 0, 0, "-", "QuTech"], [31, 0, 0, "-", "RohdeSchwarz"], [33, 0, 0, "-", "Shamrock"], [34, 0, 0, "-", "SignalCore"], [35, 0, 0, "-", "SingleQuantum"], [36, 0, 0, "-", "Spectrum"], [38, 0, 0, "-", "Standa"], [39, 0, 0, "-", "StanfordResearchSystems"], [40, 0, 0, "-", "Tektronix"], [41, 0, 0, "-", "Thermotek"], [42, 0, 0, "-", "Thorlabs"], [44, 0, 0, "-", "Vaunix"], [45, 0, 0, "-", "ZurichInstruments"]], "qcodes_contrib_drivers.drivers.Advantech": [[1, 0, 0, "-", "PCIE_1751"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751": [[1, 1, 1, "", "Advantech_PCIE_1751"], [1, 4, 1, "", "DAQNaviException"], [1, 4, 1, "", "DAQNaviWarning"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751": [[1, 2, 1, "", "ERRORMSG"], [1, 3, 1, "", "check"], [1, 3, 1, "", "close"], [1, 3, 1, "", "get_idn"], [1, 3, 1, "", "port_count"], [1, 3, 1, "", "read_pin"], [1, 3, 1, "", "read_port"], [1, 3, 1, "", "write_pin"], [1, 3, 1, "", "write_port"]], "qcodes_contrib_drivers.drivers.Agilent": [[2, 0, 0, "-", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A": [[2, 1, 1, "", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "power_parser"]], "qcodes_contrib_drivers.drivers.AimTTi": [[3, 0, 0, "-", "EL320P"]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P": [[3, 1, 1, "", "EL320P"]], "qcodes_contrib_drivers.drivers.Andor": [[4, 0, 0, "-", "DU401"]], "qcodes_contrib_drivers.drivers.Andor.DU401": [[4, 1, 1, "", "Andor_DU401"], [4, 1, 1, "", "Spectrum"], [4, 1, 1, "", "atmcd64d"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401": [[4, 3, 1, "", "close"], [4, 2, 1, "", "firmware_build"], [4, 2, 1, "", "firmware_version"], [4, 3, 1, "", "get_idn"], [4, 2, 1, "", "head_model"], [4, 2, 1, "", "serial_number"], [4, 2, 1, "", "x_pixels"], [4, 2, 1, "", "y_pixels"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum": [[4, 3, 1, "", "get_raw"], [4, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d": [[4, 3, 1, "", "cooler_off"], [4, 3, 1, "", "cooler_on"], [4, 2, 1, "", "dll"], [4, 3, 1, "", "error_check"], [4, 3, 1, "", "get_acquired_data"], [4, 3, 1, "", "get_acquisition_timings"], [4, 3, 1, "", "get_camera_handle"], [4, 3, 1, "", "get_camera_serial_number"], [4, 3, 1, "", "get_detector"], [4, 3, 1, "", "get_filter_mode"], [4, 3, 1, "", "get_hardware_version"], [4, 3, 1, "", "get_head_model"], [4, 3, 1, "", "get_status"], [4, 3, 1, "", "get_temperature"], [4, 3, 1, "", "get_temperature_range"], [4, 3, 1, "", "initialize"], [4, 3, 1, "", "is_cooler_on"], [4, 3, 1, "", "set_accumulation_cycle_time"], [4, 3, 1, "", "set_acquisition_mode"], [4, 3, 1, "", "set_current_camera"], [4, 3, 1, "", "set_exposure_time"], [4, 3, 1, "", "set_filter_mode"], [4, 3, 1, "", "set_number_accumulations"], [4, 3, 1, "", "set_read_mode"], [4, 3, 1, "", "set_shutter"], [4, 3, 1, "", "set_temperature"], [4, 3, 1, "", "set_trigger_mode"], [4, 3, 1, "", "shut_down"], [4, 3, 1, "", "start_acquisition"], [4, 2, 1, "", "verbose"], [4, 3, 1, "", "wait_for_acquisition"]], "qcodes_contrib_drivers.drivers.Attocube": [[5, 0, 0, "-", "ANC300"], [5, 0, 0, "-", "ANC300sim"], [5, 0, 0, "-", "ANC350"], [6, 0, 0, "-", "ANC350Lib"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300": [[5, 1, 1, "", "ANC300"], [5, 1, 1, "", "Anc300Axis"], [5, 1, 1, "", "Anc300TriggerOut"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300": [[5, 3, 1, "", "ask_raw"], [5, 3, 1, "", "close"], [5, 3, 1, "", "getall"], [5, 3, 1, "", "stopall"], [5, 3, 1, "", "version"], [5, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis": [[5, 3, 1, "", "__init__"], [5, 2, 1, "", "ac"], [5, 2, 1, "", "amplitude"], [5, 2, 1, "", "dc"], [5, 2, 1, "", "filter"], [5, 2, 1, "", "frequency"], [5, 2, 1, "", "mode"], [5, 2, 1, "", "move"], [5, 2, 1, "", "offset"], [5, 2, 1, "", "start"], [5, 3, 1, "", "stopMove"], [5, 2, 1, "", "triggerDown"], [5, 2, 1, "", "triggerUp"], [5, 2, 1, "", "voltage"], [5, 3, 1, "", "waitMove"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut": [[5, 3, 1, "", "__init__"], [5, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim": [[5, 1, 1, "", "MockVisa"], [5, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa": [[5, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle": [[5, 3, 1, "", "ask"], [5, 3, 1, "", "clear"], [5, 3, 1, "", "close"], [5, 2, 1, "", "cmddef"], [5, 3, 1, "", "query"], [5, 3, 1, "", "read"], [5, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350": [[5, 1, 1, "", "ANC350"], [5, 1, 1, "", "Anc350Axis"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350": [[5, 3, 1, "", "close"], [5, 3, 1, "", "get_idn"], [5, 3, 1, "", "save_params"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis": [[5, 2, 1, "", "actuator"], [5, 2, 1, "", "actuator_name"], [5, 2, 1, "", "amplitude"], [5, 2, 1, "", "capacitance"], [5, 3, 1, "", "disable_auto_move"], [5, 3, 1, "", "enable_auto_move"], [5, 2, 1, "", "frequency"], [5, 3, 1, "", "multiple_steps"], [5, 2, 1, "", "position"], [5, 3, 1, "", "single_step"], [5, 3, 1, "", "start_continuous_move"], [5, 2, 1, "", "status"], [5, 3, 1, "", "stop_continuous_move"], [5, 2, 1, "", "target_position"], [5, 2, 1, "", "target_range"], [5, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibAmplitudeControlMode"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibSignalEdge"], [6, 1, 1, "", "ANC350LibTriggerInputMode"], [6, 1, 1, "", "ANC350LibTriggerOutputMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"], [6, 1, 1, "", "ANC350v3Lib"], [6, 4, 1, "", "ANC350v3LibError"], [6, 1, 1, "", "ANC350v4Lib"], [6, 0, 0, "-", "interface"], [6, 0, 0, "-", "v3"], [6, 0, 0, "-", "v4"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode": [[6, 2, 1, "", "Amplitude"], [6, 2, 1, "", "Speed"], [6, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge": [[6, 2, 1, "", "Falling"], [6, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode": [[6, 2, 1, "", "Coarse"], [6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "IcHaus"], [6, 2, 1, "", "Position"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "configure_a_quad_b_in"], [6, 3, 1, "", "configure_a_quad_b_out"], [6, 3, 1, "", "configure_duty_cycle"], [6, 3, 1, "", "configure_ext_trigger"], [6, 3, 1, "", "configure_nsl_trigger"], [6, 3, 1, "", "configure_nsl_trigger_axis"], [6, 3, 1, "", "configure_rng_trigger"], [6, 3, 1, "", "configure_rng_trigger_eps"], [6, 3, 1, "", "configure_rng_trigger_pol"], [6, 3, 1, "", "connect"], [6, 3, 1, "", "disconnect"], [6, 3, 1, "", "discover"], [6, 3, 1, "", "enable_ref_auto_reset"], [6, 3, 1, "", "enable_ref_auto_update"], [6, 3, 1, "", "enable_sensor"], [6, 3, 1, "", "get_actuator_name"], [6, 3, 1, "", "get_actuator_type"], [6, 3, 1, "", "get_amplitude"], [6, 3, 1, "", "get_axis_status"], [6, 3, 1, "", "get_device_config"], [6, 3, 1, "", "get_device_info"], [6, 3, 1, "", "get_firmware_version"], [6, 3, 1, "", "get_frequency"], [6, 3, 1, "", "get_position"], [6, 3, 1, "", "get_ref_position"], [6, 3, 1, "", "measure_capacitance"], [6, 3, 1, "", "move_reference"], [6, 3, 1, "", "reset_position"], [6, 3, 1, "", "save_params"], [6, 3, 1, "", "select_actuator"], [6, 3, 1, "", "set_amplitude"], [6, 3, 1, "", "set_axis_output"], [6, 3, 1, "", "set_dc_voltage"], [6, 3, 1, "", "set_frequency"], [6, 3, 1, "", "set_target_position"], [6, 3, 1, "", "set_target_range"], [6, 3, 1, "", "start_auto_move"], [6, 3, 1, "", "start_continuous_move"], [6, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "get_dc_voltage"], [6, 3, 1, "", "get_lut_name"], [6, 3, 1, "", "load_lut_file"], [6, 3, 1, "", "register_external_ip"], [6, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibAmplitudeControlMode"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibSignalEdge"], [6, 1, 1, "", "ANC350LibTriggerInputMode"], [6, 1, 1, "", "ANC350LibTriggerOutputMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode": [[6, 2, 1, "", "Amplitude"], [6, 2, 1, "", "Speed"], [6, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge": [[6, 2, 1, "", "Falling"], [6, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode": [[6, 2, 1, "", "Coarse"], [6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "IcHaus"], [6, 2, 1, "", "Position"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"], [6, 1, 1, "", "ANC350v3Lib"], [6, 4, 1, "", "ANC350v3LibError"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "configure_a_quad_b_in"], [6, 3, 1, "", "configure_a_quad_b_out"], [6, 3, 1, "", "configure_duty_cycle"], [6, 3, 1, "", "configure_ext_trigger"], [6, 3, 1, "", "configure_nsl_trigger"], [6, 3, 1, "", "configure_nsl_trigger_axis"], [6, 3, 1, "", "configure_rng_trigger"], [6, 3, 1, "", "configure_rng_trigger_eps"], [6, 3, 1, "", "configure_rng_trigger_pol"], [6, 3, 1, "", "connect"], [6, 3, 1, "", "disconnect"], [6, 3, 1, "", "discover"], [6, 3, 1, "", "enable_ref_auto_reset"], [6, 3, 1, "", "enable_ref_auto_update"], [6, 3, 1, "", "enable_sensor"], [6, 3, 1, "", "get_actuator_name"], [6, 3, 1, "", "get_actuator_type"], [6, 3, 1, "", "get_amplitude"], [6, 3, 1, "", "get_axis_status"], [6, 3, 1, "", "get_device_config"], [6, 3, 1, "", "get_device_info"], [6, 3, 1, "", "get_firmware_version"], [6, 3, 1, "", "get_frequency"], [6, 3, 1, "", "get_position"], [6, 3, 1, "", "get_ref_position"], [6, 3, 1, "", "measure_capacitance"], [6, 3, 1, "", "move_reference"], [6, 3, 1, "", "reset_position"], [6, 3, 1, "", "save_params"], [6, 3, 1, "", "select_actuator"], [6, 3, 1, "", "set_amplitude"], [6, 3, 1, "", "set_axis_output"], [6, 3, 1, "", "set_dc_voltage"], [6, 3, 1, "", "set_frequency"], [6, 3, 1, "", "set_target_position"], [6, 3, 1, "", "set_target_range"], [6, 3, 1, "", "start_auto_move"], [6, 3, 1, "", "start_continuous_move"], [6, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"], [6, 4, 1, "", "ANC350v3LibError"], [6, 1, 1, "", "ANC350v4Lib"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "get_dc_voltage"], [6, 3, 1, "", "get_lut_name"], [6, 3, 1, "", "load_lut_file"], [6, 3, 1, "", "register_external_ip"], [6, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Aviosys": [[7, 0, 0, "-", "IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S": [[7, 1, 1, "", "Aviosys_IP_Power_9258S"], [7, 1, 1, "", "PowerChannel"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S": [[7, 2, 1, "", "address"], [7, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel": [[7, 2, 1, "", "CHANNEL_IDS"], [7, 2, 1, "", "CHANNEL_NAMES"]], "qcodes_contrib_drivers.drivers.Bilt": [[8, 0, 0, "-", "ITest"]], "qcodes_contrib_drivers.drivers.Bilt.ITest": [[8, 1, 1, "", "ITest"], [8, 1, 1, "", "iTestChannel"], [8, 1, 1, "", "iTestMultiChannelParameter"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest": [[8, 3, 1, "", "__init__"], [8, 3, 1, "", "chan_to_ic"], [8, 3, 1, "", "chan_to_id"], [8, 3, 1, "", "print_dac_voltages"], [8, 3, 1, "", "set_dacs_zero"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel": [[8, 3, 1, "", "__init__"], [8, 3, 1, "", "clear_alarm"], [8, 3, 1, "", "start"], [8, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.BlueFors": [[9, 0, 0, "-", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors": [[9, 1, 1, "", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors": [[9, 3, 1, "", "__init__"], [9, 3, 1, "", "get_pressure"], [9, 3, 1, "", "get_temperature"]], "qcodes_contrib_drivers.drivers.CopperMountain": [[10, 0, 0, "-", "M5180"], [10, 0, 0, "-", "S5048"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180": [[10, 1, 1, "", "FrequencySweepMagPhase"], [10, 1, 1, "", "M5180"], [10, 1, 1, "", "PointIQ"], [10, 1, 1, "", "PointMagPhase"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_raw"], [10, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_s"], [10, 3, 1, "", "reset_averages"], [10, 3, 1, "", "update_lin_traces"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048": [[10, 5, 1, "", "CMTIntParser"], [10, 1, 1, "", "CMTS5048"], [10, 1, 1, "", "CMTS5048Trace"], [10, 4, 1, "", "TraceNotReady"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048": [[10, 3, 1, "", "invalidate_trace"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "run_N_times"], [10, 3, 1, "", "run_continously"], [10, 3, 1, "", "startup"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace": [[10, 3, 1, "", "get_raw"], [10, 3, 1, "", "prepare_trace"]], "qcodes_contrib_drivers.drivers.Cryocon": [[11, 0, 0, "-", "cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26": [[11, 1, 1, "", "Cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic": [[12, 0, 0, "-", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C": [[12, 1, 1, "", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C": [[12, 2, 1, "", "default_current_ramp_limit"], [12, 2, 1, "", "default_max_current_ramp_limit"], [12, 3, 1, "", "get_idn"], [12, 3, 1, "", "query"]], "qcodes_contrib_drivers.drivers.DaylightSolutions": [[13, 0, 0, "-", "MIRcat"]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat": [[13, 1, 1, "", "DRSDaylightSolutions_MIRcat"]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat": [[13, 3, 1, "", "arm"], [13, 3, 1, "", "check_tune"], [13, 3, 1, "", "disarm"], [13, 2, 1, "", "dll_path"], [13, 3, 1, "", "get_idn"], [13, 3, 1, "", "get_limits"], [13, 3, 1, "", "get_pulse_parameters"], [13, 3, 1, "", "get_ranges"], [13, 3, 1, "", "set_pulse_parameters"]], "qcodes_contrib_drivers.drivers.ERAInstruments": [[14, 0, 0, "-", "erasynth"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth": [[14, 1, 1, "", "ERASynth"], [14, 1, 1, "", "ERASynthBase"], [14, 1, 1, "", "ERASynthPlus"], [14, 1, 1, "", "ERASynthPlusPlus"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth": [[14, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "ask"], [14, 3, 1, "", "ask_raw"], [14, 3, 1, "", "clear_read_buffer"], [14, 2, 1, "", "current"], [14, 2, 1, "", "debug_messages_en"], [14, 2, 1, "", "embedded_version"], [14, 3, 1, "", "esp8266_upload_mode"], [14, 3, 1, "", "factory_reset"], [14, 3, 1, "", "get_configuration"], [14, 3, 1, "", "get_diagnostic_status"], [14, 3, 1, "", "get_idn"], [14, 2, 1, "", "modulation_am_depth"], [14, 2, 1, "", "modulation_en"], [14, 2, 1, "", "modulation_fm_deviation"], [14, 2, 1, "", "modulation_freq"], [14, 2, 1, "", "modulation_pulse_period"], [14, 2, 1, "", "modulation_pulse_width"], [14, 2, 1, "", "modulation_signal_waveform"], [14, 2, 1, "", "modulation_source"], [14, 2, 1, "", "modulation_type"], [14, 3, 1, "", "off"], [14, 3, 1, "", "on"], [14, 2, 1, "", "pll_lmx1_status"], [14, 2, 1, "", "pll_lmx2_status"], [14, 2, 1, "", "pll_xtal_status"], [14, 2, 1, "", "power"], [14, 3, 1, "", "preset"], [14, 3, 1, "", "print_pyvisa_resources"], [14, 2, 1, "", "ref_osc_source"], [14, 3, 1, "", "run_self_test"], [14, 2, 1, "", "status"], [14, 2, 1, "", "sweep_dwell"], [14, 2, 1, "", "sweep_en"], [14, 2, 1, "", "sweep_trigger"], [14, 2, 1, "", "synthesizer_mode"], [14, 2, 1, "", "temperature"], [14, 2, 1, "", "voltage"], [14, 2, 1, "", "wifi_gateway_address"], [14, 2, 1, "", "wifi_hotspot_password"], [14, 2, 1, "", "wifi_hotspot_ssid"], [14, 2, 1, "", "wifi_ip_address"], [14, 2, 1, "", "wifi_mode"], [14, 3, 1, "", "wifi_off"], [14, 3, 1, "", "wifi_on"], [14, 2, 1, "", "wifi_rssi"], [14, 2, 1, "", "wifi_station_password"], [14, 2, 1, "", "wifi_station_ssid"], [14, 2, 1, "", "wifi_subnet_address"], [14, 3, 1, "", "write"], [14, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus": [[14, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus": [[14, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave": [[15, 0, 0, "-", "GM349"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349": [[15, 1, 1, "", "GM349"], [15, 1, 1, "", "GM349Attenuation"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349": [[15, 3, 1, "", "pin_map"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation": [[15, 3, 1, "", "get_raw"], [15, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Gentec": [[16, 0, 0, "-", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro": [[16, 1, 1, "", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro": [[16, 3, 1, "", "clear_zero_offset"], [16, 2, 1, "", "firmware_version"], [16, 3, 1, "", "get_idn"], [16, 2, 1, "", "model"], [16, 3, 1, "", "set_zero_offset"]], "qcodes_contrib_drivers.drivers.Holzworth": [[17, 0, 0, "-", "HS900"], [17, 0, 0, "-", "HS9008B"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900": [[17, 1, 1, "", "HS900"], [17, 1, 1, "", "HS900Channel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900": [[17, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel": [[17, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B": [[17, 1, 1, "", "HS9008B"], [17, 1, 1, "", "HS9008BChannel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B": [[17, 3, 1, "", "__init__"], [17, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel": [[17, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Horiba": [[18, 0, 0, "-", "Horiba_FHR"], [19, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR": [[18, 1, 1, "", "DCChannel"], [18, 1, 1, "", "Dispatcher"], [18, 1, 1, "", "GratingChannel"], [18, 1, 1, "", "HoribaFHR"], [18, 1, 1, "", "MotorChannel"], [18, 1, 1, "", "PortChannel"], [18, 1, 1, "", "PrecisionMotorChannel"], [18, 1, 1, "", "SlitChannel"], [18, 4, 1, "", "SpeError"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher": [[18, 3, 1, "", "error_check"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel": [[18, 3, 1, "", "set_ini_params"], [18, 6, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR": [[18, 3, 1, "", "close"], [18, 3, 1, "", "disconnect"], [18, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel": [[18, 3, 1, "", "get_id"], [18, 3, 1, "", "set_id"], [18, 3, 1, "", "stop"], [18, 3, 1, "", "type"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel": [[18, 3, 1, "", "close"], [18, 3, 1, "", "is_open"], [18, 3, 1, "", "open"], [18, 3, 1, "", "set_baud_rate"], [18, 3, 1, "", "set_timeout"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel": [[18, 3, 1, "", "init"], [18, 3, 1, "", "set_setup"], [18, 6, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel": [[18, 6, 1, "", "unit"]], "qcodes_contrib_drivers.drivers.Horiba.private": [[19, 0, 0, "-", "fhr_client"], [19, 0, 0, "-", "fhr_server"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client": [[19, 1, 1, "", "FHRClient"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient": [[19, 3, 1, "", "CreateSpe"], [19, 3, 1, "", "DeleteSpe"], [19, 3, 1, "", "SpeCommand"], [19, 3, 1, "", "SpeCommandIniParams"], [19, 3, 1, "", "SpeCommandSetup"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server": [[19, 1, 1, "", "FHRServer"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer": [[19, 3, 1, "", "CreateSpe"], [19, 3, 1, "", "DeleteSpe"], [19, 3, 1, "", "SpeCommand"], [19, 3, 1, "", "SpeCommandIniParams"], [19, 3, 1, "", "SpeCommandSetup"]], "qcodes_contrib_drivers.drivers.Keysight": [[20, 0, 0, "-", "Keysight_E36313A"], [20, 0, 0, "-", "Keysight_E8267D"], [20, 0, 0, "-", "Keysight_J7211"], [20, 0, 0, "-", "Keysight_M3201A"], [20, 0, 0, "-", "Keysight_M3300A"], [20, 0, 0, "-", "M3202A"], [21, 0, 0, "-", "SD_common"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A": [[20, 1, 1, "", "E36313A"], [20, 1, 1, "", "E36313AChannel"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A": [[20, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel": [[20, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D": [[20, 1, 1, "", "Keysight_E8267D"], [20, 5, 1, "", "parse_on_off"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D": [[20, 3, 1, "", "deg_to_rad"], [20, 3, 1, "", "off"], [20, 3, 1, "", "on"], [20, 3, 1, "", "rad_to_deg"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211": [[20, 1, 1, "", "Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A": [[20, 1, 1, "", "Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A": [[20, 1, 1, "", "M3300A_AWG"], [20, 1, 1, "", "M3300A_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A": [[20, 1, 1, "", "M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common": [[21, 0, 0, "-", "SD_AWG"], [21, 0, 0, "-", "SD_AWG_Async"], [21, 0, 0, "-", "SD_DIG"], [21, 0, 0, "-", "SD_Module"], [21, 0, 0, "-", "memory_manager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG": [[21, 1, 1, "", "SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG": [[21, 3, 1, "", "awg_config_external_trigger"], [21, 3, 1, "", "awg_flush"], [21, 3, 1, "", "awg_from_array"], [21, 3, 1, "", "awg_from_file"], [21, 3, 1, "", "awg_is_running"], [21, 3, 1, "", "awg_jump_next_waveform"], [21, 3, 1, "", "awg_pause"], [21, 3, 1, "", "awg_pause_multiple"], [21, 3, 1, "", "awg_queue_config"], [21, 3, 1, "", "awg_queue_waveform"], [21, 3, 1, "", "awg_resume"], [21, 3, 1, "", "awg_resume_multiple"], [21, 3, 1, "", "awg_start"], [21, 3, 1, "", "awg_start_multiple"], [21, 3, 1, "", "awg_stop"], [21, 3, 1, "", "awg_stop_multiple"], [21, 3, 1, "", "awg_trigger"], [21, 3, 1, "", "awg_trigger_multiple"], [21, 3, 1, "", "config_amplitude_modulation"], [21, 3, 1, "", "config_angle_modulation"], [21, 3, 1, "", "config_clock_io"], [21, 3, 1, "", "config_fpga_trigger"], [21, 3, 1, "", "config_trigger_io"], [21, 3, 1, "", "convert_prescaler_to_sample_rate"], [21, 3, 1, "", "convert_sample_rate_to_prescaler"], [21, 3, 1, "", "flush_waveform"], [21, 3, 1, "", "get_clock_frequency"], [21, 3, 1, "", "get_clock_sync_frequency"], [21, 3, 1, "", "get_trigger_io"], [21, 3, 1, "", "get_waveform_status"], [21, 3, 1, "", "get_waveform_type"], [21, 3, 1, "", "load_fpga_image"], [21, 3, 1, "", "load_waveform"], [21, 3, 1, "", "load_waveform_int16"], [21, 3, 1, "", "new_waveform_from_double"], [21, 3, 1, "", "new_waveform_from_file"], [21, 3, 1, "", "new_waveform_from_int"], [21, 3, 1, "", "off"], [21, 3, 1, "", "read_fpga"], [21, 3, 1, "", "read_fpga_array"], [21, 3, 1, "", "reload_waveform"], [21, 3, 1, "", "reload_waveform_int16"], [21, 3, 1, "", "reset_channel_phase"], [21, 3, 1, "", "reset_clock_phase"], [21, 3, 1, "", "reset_multiple_channel_phase"], [21, 3, 1, "", "set_channel_amplitude"], [21, 3, 1, "", "set_channel_frequency"], [21, 3, 1, "", "set_channel_offset"], [21, 3, 1, "", "set_channel_phase"], [21, 3, 1, "", "set_channel_wave_shape"], [21, 3, 1, "", "set_clock_frequency"], [21, 3, 1, "", "set_digital_filter_mode"], [21, 3, 1, "", "set_iq_modulation"], [21, 3, 1, "", "set_marker_config"], [21, 3, 1, "", "set_trigger_io"], [21, 3, 1, "", "write_fpga"], [21, 3, 1, "", "write_fpga_array"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async": [[21, 1, 1, "", "SD_AWG_Async"], [21, 1, 1, "", "Task"], [21, 1, 1, "", "WaveformReference"], [21, 5, 1, "", "switchable"], [21, 5, 1, "", "threaded"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async": [[21, 3, 1, "", "asynchronous"], [21, 3, 1, "", "awg_flush"], [21, 3, 1, "", "awg_from_array"], [21, 3, 1, "", "awg_from_file"], [21, 3, 1, "", "awg_queue_waveform"], [21, 3, 1, "", "close"], [21, 3, 1, "", "flush_waveform"], [21, 3, 1, "", "load_waveform"], [21, 3, 1, "", "load_waveform_int16"], [21, 3, 1, "", "reload_waveform"], [21, 3, 1, "", "reload_waveform_int16"], [21, 3, 1, "", "set_asynchronous"], [21, 3, 1, "", "set_waveform_limit"], [21, 3, 1, "", "upload_waveform"], [21, 3, 1, "", "uploader_ready"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task": [[21, 6, 1, "", "result"], [21, 3, 1, "", "run"], [21, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference": [[21, 6, 1, "", "awg_name"], [21, 3, 1, "", "is_uploaded"], [21, 3, 1, "", "release"], [21, 3, 1, "", "wait_uploaded"], [21, 6, 1, "", "wave_number"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG": [[21, 1, 1, "", "SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG": [[21, 3, 1, "", "__init__"], [21, 3, 1, "", "daq_flush"], [21, 3, 1, "", "daq_flush_multiple"], [21, 3, 1, "", "daq_read"], [21, 3, 1, "", "daq_start"], [21, 3, 1, "", "daq_start_multiple"], [21, 3, 1, "", "daq_stop"], [21, 3, 1, "", "daq_stop_multiple"], [21, 3, 1, "", "daq_trigger"], [21, 3, 1, "", "daq_trigger_multiple"], [21, 3, 1, "", "get_coupling"], [21, 3, 1, "", "get_full_scale"], [21, 3, 1, "", "get_impedance"], [21, 3, 1, "", "get_prescaler"], [21, 3, 1, "", "get_trigger_io"], [21, 3, 1, "", "get_trigger_mode"], [21, 3, 1, "", "get_trigger_threshold"], [21, 3, 1, "", "reset_clock_phase"], [21, 3, 1, "", "set_analog_trigger_mask"], [21, 3, 1, "", "set_clksys_frequency"], [21, 3, 1, "", "set_coupling"], [21, 3, 1, "", "set_daq_trigger_delay"], [21, 3, 1, "", "set_daq_trigger_mode"], [21, 3, 1, "", "set_digital_trigger_mode"], [21, 3, 1, "", "set_digital_trigger_source"], [21, 3, 1, "", "set_ext_trigger_behaviour"], [21, 3, 1, "", "set_ext_trigger_source"], [21, 3, 1, "", "set_full_scale"], [21, 3, 1, "", "set_impedance"], [21, 3, 1, "", "set_n_cycles"], [21, 3, 1, "", "set_n_points"], [21, 3, 1, "", "set_points_per_cycle"], [21, 3, 1, "", "set_prescaler"], [21, 3, 1, "", "set_timeout"], [21, 3, 1, "", "set_trigger_io"], [21, 3, 1, "", "set_trigger_mode"], [21, 3, 1, "", "set_trigger_threshold"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module": [[21, 1, 1, "", "SD_Module"], [21, 5, 1, "", "result_parser"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module": [[21, 3, 1, "", "close"], [21, 3, 1, "", "close_soft"], [21, 3, 1, "", "get_chassis"], [21, 3, 1, "", "get_firmware_version"], [21, 3, 1, "", "get_fpga_pc_port"], [21, 3, 1, "", "get_hardware_version"], [21, 3, 1, "", "get_hvi_register"], [21, 3, 1, "", "get_module_count"], [21, 3, 1, "", "get_open"], [21, 3, 1, "", "get_product_name"], [21, 3, 1, "", "get_product_name_by_index"], [21, 3, 1, "", "get_product_name_by_slot"], [21, 3, 1, "", "get_pxi_trigger"], [21, 3, 1, "", "get_serial_number"], [21, 3, 1, "", "get_serial_number_by_index"], [21, 3, 1, "", "get_serial_number_by_slot"], [21, 3, 1, "", "get_slot"], [21, 3, 1, "", "get_status"], [21, 3, 1, "", "get_type"], [21, 3, 1, "", "get_type_by_index"], [21, 3, 1, "", "get_type_by_slot"], [21, 3, 1, "", "load_fpga_image"], [21, 3, 1, "", "open_with_serial_number"], [21, 3, 1, "", "open_with_slot"], [21, 3, 1, "", "run_self_test"], [21, 3, 1, "", "set_fpga_pc_port"], [21, 3, 1, "", "set_hvi_register"], [21, 3, 1, "", "set_pxi_trigger"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager": [[21, 1, 1, "", "MemoryManager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager": [[21, 1, 1, "", "AllocatedSlot"], [21, 3, 1, "", "allocate"], [21, 3, 1, "", "allocation_state"], [21, 3, 1, "", "get_uninitialized_slots"], [21, 3, 1, "", "mem_usage"], [21, 2, 1, "", "memory_sizes"], [21, 3, 1, "", "release"], [21, 3, 1, "", "set_waveform_limit"], [21, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot": [[21, 2, 1, "", "allocation_ref"], [21, 2, 1, "", "memory_manager"], [21, 2, 1, "", "number"], [21, 3, 1, "", "release"]], "qcodes_contrib_drivers.drivers.Lakeshore": [[22, 0, 0, "-", "Model_331"], [22, 0, 0, "-", "Model_625"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331": [[22, 1, 1, "", "Model_331"], [22, 1, 1, "", "SensorChannel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel": [[22, 2, 1, "", "channel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625": [[22, 1, 1, "", "Lakeshore625"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625": [[22, 3, 1, "", "set_field"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics": [[23, 0, 0, "-", "Lighthouse_Photonics_Sprout_G"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G": [[23, 1, 1, "", "LighthousePhotonicsSproutG"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG": [[23, 3, 1, "", "ask"], [23, 2, 1, "", "device_info"], [23, 2, 1, "", "enabled"], [23, 3, 1, "", "get_idn"], [23, 2, 1, "", "output_mode"], [23, 2, 1, "", "output_power"], [23, 2, 1, "", "output_setpoint"], [23, 3, 1, "", "ramp_up"], [23, 2, 1, "", "status"], [23, 2, 1, "", "work_hours"], [23, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.M2": [[24, 0, 0, "-", "M2_Solstis_3"]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3": [[24, 1, 1, "", "M2Solstis3"]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3": [[24, 3, 1, "", "get_status"], [24, 3, 1, "", "poll_move_wave_t"], [24, 3, 1, "", "poll_wave_m"], [24, 3, 1, "", "send_message"], [24, 3, 1, "", "snapshot_base"], [24, 3, 1, "", "stop_move_wave_t"], [24, 3, 1, "", "stop_wave_m"]], "qcodes_contrib_drivers.drivers.MontanaInstruments": [[25, 0, 0, "-", "cryostation"]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation": [[25, 1, 1, "", "MontanaInstruments_Cryostation"]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation": [[25, 3, 1, "", "get_idn"], [25, 3, 1, "", "set_temp_and_wait"], [25, 3, 1, "", "standby"], [25, 3, 1, "", "start_cooldown"], [25, 3, 1, "", "start_warmup"], [25, 3, 1, "", "stop_automation"], [25, 3, 1, "", "wait_stability"]], "qcodes_contrib_drivers.drivers.NationalInstruments": [[26, 0, 0, "-", "DAQ"], [26, 0, 0, "-", "PXIe_2597"], [26, 0, 0, "-", "PXIe_5654"], [26, 0, 0, "-", "RFSG"], [26, 0, 0, "-", "Switch"], [26, 0, 0, "-", "dll_wrapper"], [26, 0, 0, "-", "ni_dll_instrument"], [26, 0, 0, "-", "visa_types"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ": [[26, 1, 1, "", "DAQAnalogInputVoltages"], [26, 1, 1, "", "DAQAnalogInputs"], [26, 1, 1, "", "DAQAnalogOutputVoltage"], [26, 1, 1, "", "DAQAnalogOutputs"], [26, 1, 1, "", "DAQDigitalOutputState"], [26, 1, 1, "", "DAQDigitalOutputs"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages": [[26, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage": [[26, 3, 1, "", "get_raw"], [26, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState": [[26, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597": [[26, 1, 1, "", "NI_PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654": [[26, 2, 1, "", "NI_PXIe_5654"], [26, 1, 1, "", "NationalInstruments_PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG": [[26, 2, 1, "", "NI_RFSG"], [26, 1, 1, "", "NationalInstruments_RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG": [[26, 3, 1, "", "abort"], [26, 2, 1, "", "dll_path"], [26, 6, 1, "", "firmware"], [26, 3, 1, "", "get_idn"], [26, 3, 1, "", "initiate"], [26, 6, 1, "", "model"], [26, 6, 1, "", "serial"], [26, 6, 1, "", "vendor"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch": [[26, 1, 1, "", "NI_Switch"], [26, 1, 1, "", "SwitchChannel"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch": [[26, 3, 1, "", "close"], [26, 3, 1, "", "disconnect_all"], [26, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel": [[26, 3, 1, "", "connect_to"], [26, 3, 1, "", "disconnect_from"], [26, 3, 1, "", "disconnect_from_all"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper": [[26, 1, 1, "", "AttributeWrapper"], [26, 1, 1, "", "NIDLLWrapper"], [26, 1, 1, "", "NamedArgType"], [26, 5, 1, "", "c_str"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper": [[26, 2, 1, "", "dtype"], [26, 2, 1, "", "value"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper": [[26, 3, 1, "", "error_message"], [26, 3, 1, "", "get_attribute"], [26, 3, 1, "", "init"], [26, 3, 1, "", "set_attribute"], [26, 3, 1, "", "wrap_dll_function"], [26, 3, 1, "", "wrap_dll_function_checked"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType": [[26, 2, 1, "", "argtype"], [26, 2, 1, "", "name"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument": [[26, 1, 1, "", "NIDLLInstrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument": [[26, 3, 1, "", "close"], [26, 3, 1, "", "get_attribute"], [26, 3, 1, "", "init"], [26, 3, 1, "", "reset"], [26, 3, 1, "", "set_attribute"]], "qcodes_contrib_drivers.drivers.Newport": [[27, 0, 0, "-", "AG_UC8"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8": [[27, 1, 1, "", "Newport_AG_UC8"], [27, 1, 1, "", "Newport_AG_UC8_Axis"], [27, 1, 1, "", "Newport_AG_UC8_Channel"], [27, 4, 1, "", "Newport_AG_UC8_ErrorCode"], [27, 4, 1, "", "Newport_AG_UC8_Exception"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8": [[27, 3, 1, "", "ask_channel"], [27, 2, 1, "", "command_delay"], [27, 2, 1, "", "default_timeout"], [27, 3, 1, "", "get_idn"], [27, 3, 1, "", "get_last_error"], [27, 3, 1, "", "reset"], [27, 2, 1, "", "reset_delay"], [27, 2, 1, "", "slow_command_timeout"], [27, 3, 1, "", "write"], [27, 3, 1, "", "write_channel"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis": [[27, 2, 1, "", "SPEED_TABLE"], [27, 3, 1, "", "jog"], [27, 3, 1, "", "measure_position"], [27, 3, 1, "", "move_abs"], [27, 3, 1, "", "move_limit"], [27, 3, 1, "", "move_rel"], [27, 3, 1, "", "stop"], [27, 3, 1, "", "zero_position"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel": [[27, 3, 1, "", "ask"], [27, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Oxford": [[28, 0, 0, "-", "ILM200"], [28, 0, 0, "-", "IPS120"], [28, 0, 0, "-", "Triton"], [28, 0, 0, "-", "kelvinox"]], "qcodes_contrib_drivers.drivers.Oxford.ILM200": [[28, 1, 1, "", "OxfordInstruments_ILM200"]], "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "close"], [28, 3, 1, "", "get_all"], [28, 3, 1, "", "get_idn"], [28, 3, 1, "", "local"], [28, 3, 1, "", "remote"], [28, 3, 1, "", "set_remote_status"], [28, 3, 1, "", "set_to_fast"], [28, 3, 1, "", "set_to_slow"]], "qcodes_contrib_drivers.drivers.Oxford.IPS120": [[28, 1, 1, "", "OxfordInstruments_IPS120"]], "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "close"], [28, 3, 1, "", "examine"], [28, 3, 1, "", "get_all"], [28, 3, 1, "", "get_idn"], [28, 3, 1, "", "heater_off"], [28, 3, 1, "", "heater_on"], [28, 3, 1, "", "hold"], [28, 3, 1, "", "identify"], [28, 3, 1, "", "leave_persistent_mode"], [28, 3, 1, "", "local"], [28, 3, 1, "", "remote"], [28, 3, 1, "", "run_to_field"], [28, 3, 1, "", "run_to_field_wait"], [28, 3, 1, "", "set_persistent"], [28, 3, 1, "", "to_setpoint"], [28, 3, 1, "", "to_zero"]], "qcodes_contrib_drivers.drivers.Oxford.Triton": [[28, 1, 1, "", "Triton"]], "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "get_pressure"], [28, 3, 1, "", "get_temperature"], [28, 3, 1, "", "vcl2csv"]], "qcodes_contrib_drivers.drivers.Oxford.kelvinox": [[28, 1, 1, "", "OxfordInstruments_Kelvinox_IGH"]], "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "close"], [28, 3, 1, "", "get_all"], [28, 3, 1, "", "get_idn"], [28, 3, 1, "", "identify"], [28, 3, 1, "", "local"], [28, 3, 1, "", "remote"], [28, 3, 1, "", "rotate_Nvalve"], [28, 3, 1, "", "set_mix_chamber_heater_mode"], [28, 3, 1, "", "set_mix_chamber_heater_power_range"]], "qcodes_contrib_drivers.drivers.QDevil": [[29, 0, 0, "-", "QDAC1"], [29, 0, 0, "-", "QDAC2"], [29, 0, 0, "-", "QDAC2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1": [[29, 1, 1, "", "Generator"], [29, 1, 1, "", "Mode"], [29, 1, 1, "", "QDac"], [29, 1, 1, "", "QDacChannel"], [29, 1, 1, "", "QDacMultiChannelParameter"], [29, 1, 1, "", "Waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode": [[29, 3, 1, "", "get_label"], [29, 2, 1, "", "vhigh_ihigh"], [29, 2, 1, "", "vhigh_ilow"], [29, 2, 1, "", "vlow_ilow"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac": [[29, 3, 1, "", "__init__"], [29, 3, 1, "", "clear_read_queue"], [29, 3, 1, "", "connect_message"], [29, 2, 1, "", "max_status_age"], [29, 3, 1, "", "print_overview"], [29, 3, 1, "", "print_slopes"], [29, 3, 1, "", "print_syncs"], [29, 3, 1, "", "ramp_voltages"], [29, 3, 1, "", "ramp_voltages_2d"], [29, 3, 1, "", "read"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "snapshot_base"], [29, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel": [[29, 3, 1, "", "__init__"], [29, 3, 1, "", "snapshot_base"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter": [[29, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform": [[29, 2, 1, "", "all_waveforms"], [29, 2, 1, "", "sine"], [29, 2, 1, "", "square"], [29, 2, 1, "", "staircase"], [29, 2, 1, "", "triangle"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2": [[29, 1, 1, "", "Arrangement_Context"], [29, 1, 1, "", "Awg_Context"], [29, 1, 1, "", "List_Context"], [29, 1, 1, "", "Measurement_Context"], [29, 1, 1, "", "QDac2"], [29, 1, 1, "", "QDac2Channel"], [29, 1, 1, "", "QDac2ExternalTrigger"], [29, 1, 1, "", "QDac2Trigger_Context"], [29, 1, 1, "", "Sine_Context"], [29, 1, 1, "", "Square_Context"], [29, 1, 1, "", "Sweep_Context"], [29, 1, 1, "", "Trace_Context"], [29, 1, 1, "", "Triangle_Context"], [29, 1, 1, "", "Virtual_Sweep_Context"], [29, 5, 1, "", "comma_sequence_to_list"], [29, 5, 1, "", "comma_sequence_to_list_of_floats"], [29, 5, 1, "", "diff_matrix"], [29, 5, 1, "", "floats_to_comma_separated_list"], [29, 5, 1, "", "forward_and_back"], [29, 5, 1, "", "ints_to_comma_separated_list"], [29, 5, 1, "", "split_version_string_into_components"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context": [[29, 3, 1, "", "actual_voltages"], [29, 3, 1, "", "add_correction"], [29, 3, 1, "", "channel"], [29, 6, 1, "", "channel_numbers"], [29, 6, 1, "", "contact_names"], [29, 6, 1, "", "correction_matrix"], [29, 3, 1, "", "currents_A"], [29, 3, 1, "", "get_trigger_by_name"], [29, 3, 1, "", "initiate_correction"], [29, 3, 1, "", "leakage"], [29, 3, 1, "", "set_virtual_voltage"], [29, 3, 1, "", "set_virtual_voltages"], [29, 6, 1, "", "shape"], [29, 3, 1, "", "virtual_detune"], [29, 3, 1, "", "virtual_sweep"], [29, 3, 1, "", "virtual_sweep2d"], [29, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context": [[29, 3, 1, "", "abort"], [29, 3, 1, "", "cycles_remaining"], [29, 3, 1, "", "end_marker"], [29, 3, 1, "", "period_end_marker"], [29, 3, 1, "", "period_start_marker"], [29, 3, 1, "", "start"], [29, 3, 1, "", "start_marker"], [29, 3, 1, "", "start_on"], [29, 3, 1, "", "start_on_external"], [29, 3, 1, "", "start_once_on"], [29, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context": [[29, 3, 1, "", "append"], [29, 3, 1, "", "cycles_remaining"], [29, 3, 1, "", "points"], [29, 3, 1, "", "start"], [29, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context": [[29, 3, 1, "", "abort"], [29, 3, 1, "", "available_A"], [29, 3, 1, "", "n_available"], [29, 3, 1, "", "n_cycles_remaining"], [29, 3, 1, "", "peek_A"], [29, 3, 1, "", "start"], [29, 3, 1, "", "start_on"], [29, 3, 1, "", "start_on_external"], [29, 3, 1, "", "start_once_on"], [29, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2": [[29, 3, 1, "", "__init__"], [29, 3, 1, "", "allocate_trace"], [29, 3, 1, "", "allocate_trigger"], [29, 3, 1, "", "arrange"], [29, 3, 1, "", "ask"], [29, 3, 1, "", "channel"], [29, 3, 1, "", "clear"], [29, 3, 1, "", "clear_read_queue"], [29, 3, 1, "", "connect_external_trigger"], [29, 3, 1, "", "error"], [29, 3, 1, "", "errors"], [29, 3, 1, "", "free_all_triggers"], [29, 3, 1, "", "free_trigger"], [29, 3, 1, "", "get_recorded_scpi_commands"], [29, 3, 1, "", "mac"], [29, 3, 1, "", "n_channels"], [29, 3, 1, "", "n_errors"], [29, 3, 1, "", "n_external_inputs"], [29, 3, 1, "", "n_external_outputs"], [29, 3, 1, "", "n_triggers"], [29, 3, 1, "", "remove_traces"], [29, 3, 1, "", "reset"], [29, 3, 1, "", "start_all"], [29, 3, 1, "", "start_recording_scpi"], [29, 3, 1, "", "traces"], [29, 3, 1, "", "write"], [29, 3, 1, "", "write_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel": [[29, 3, 1, "", "arbitrary_wave"], [29, 3, 1, "", "ask_channel"], [29, 3, 1, "", "clear_measurements"], [29, 3, 1, "", "dc_list"], [29, 3, 1, "", "dc_sweep"], [29, 3, 1, "", "measurement"], [29, 6, 1, "", "number"], [29, 3, 1, "", "output_mode"], [29, 3, 1, "", "sine_wave"], [29, 3, 1, "", "square_wave"], [29, 3, 1, "", "triangle_wave"], [29, 3, 1, "", "write"], [29, 3, 1, "", "write_channel"], [29, 3, 1, "", "write_channel_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context": [[29, 6, 1, "", "value"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context": [[29, 3, 1, "", "abort"], [29, 3, 1, "", "cycles_remaining"], [29, 3, 1, "", "end_marker"], [29, 3, 1, "", "period_end_marker"], [29, 3, 1, "", "period_start_marker"], [29, 3, 1, "", "start"], [29, 3, 1, "", "start_marker"], [29, 3, 1, "", "start_on"], [29, 3, 1, "", "start_on_external"], [29, 3, 1, "", "start_once_on"], [29, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context": [[29, 3, 1, "", "abort"], [29, 3, 1, "", "cycles_remaining"], [29, 3, 1, "", "end_marker"], [29, 3, 1, "", "period_end_marker"], [29, 3, 1, "", "period_start_marker"], [29, 3, 1, "", "start"], [29, 3, 1, "", "start_marker"], [29, 3, 1, "", "start_on"], [29, 3, 1, "", "start_on_external"], [29, 3, 1, "", "start_once_on"], [29, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context": [[29, 3, 1, "", "cycles_remaining"], [29, 3, 1, "", "points"], [29, 3, 1, "", "start"], [29, 3, 1, "", "start_V"], [29, 3, 1, "", "stop_V"], [29, 3, 1, "", "time_s"], [29, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context": [[29, 6, 1, "", "name"], [29, 6, 1, "", "size"], [29, 3, 1, "", "waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context": [[29, 3, 1, "", "abort"], [29, 3, 1, "", "cycles_remaining"], [29, 3, 1, "", "end_marker"], [29, 3, 1, "", "period_end_marker"], [29, 3, 1, "", "period_start_marker"], [29, 3, 1, "", "start"], [29, 3, 1, "", "start_marker"], [29, 3, 1, "", "start_on"], [29, 3, 1, "", "start_on_external"], [29, 3, 1, "", "start_once_on"], [29, 3, 1, "", "start_once_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context": [[29, 3, 1, "", "actual_values_V"], [29, 3, 1, "", "start"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array": [[29, 1, 1, "", "Array_Arrangement_Context"], [29, 1, 1, "", "QDac2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context": [[29, 3, 1, "", "channel"], [29, 6, 1, "", "contact_names"], [29, 3, 1, "", "currents_A"], [29, 3, 1, "", "leakage"], [29, 3, 1, "", "qdac_names"], [29, 3, 1, "", "set_virtual_voltages"], [29, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array": [[29, 3, 1, "", "allocate_trigger"], [29, 3, 1, "", "arrange"], [29, 6, 1, "", "common_trigger_in"], [29, 3, 1, "", "connect_external_trigger"], [29, 6, 1, "", "controller"], [29, 6, 1, "", "names"], [29, 3, 1, "", "sync"], [29, 3, 1, "", "trigger"], [29, 6, 1, "", "trigger_out"]], "qcodes_contrib_drivers.drivers.QuTech": [[30, 0, 0, "-", "D4"], [30, 0, 0, "-", "D5a"], [30, 0, 0, "-", "F1d"], [30, 0, 0, "-", "IVVI"], [30, 0, 0, "-", "M2j"], [30, 0, 0, "-", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.D4": [[30, 1, 1, "", "D4"]], "qcodes_contrib_drivers.drivers.QuTech.D4.D4": [[30, 3, 1, "", "get_buffers_enabled"], [30, 3, 1, "", "get_filter_value"], [30, 3, 1, "", "get_mode"]], "qcodes_contrib_drivers.drivers.QuTech.D5a": [[30, 1, 1, "", "D5a"]], "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "set_dac_unit"]], "qcodes_contrib_drivers.drivers.QuTech.F1d": [[30, 1, 1, "", "F1d"]], "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d": [[30, 3, 1, "", "get_remote_settings"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI": [[30, 1, 1, "", "IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "adjust_parameter_validator"], [30, 3, 1, "", "ask"], [30, 2, 1, "", "dac_quata"], [30, 2, 1, "", "full_range"], [30, 3, 1, "", "get_all"], [30, 3, 1, "", "get_idn"], [30, 3, 1, "", "get_pol_dac"], [30, 2, 1, "", "half_range"], [30, 3, 1, "", "linspace"], [30, 3, 1, "", "read"], [30, 2, 1, "", "resolution"], [30, 3, 1, "", "round_dac"], [30, 3, 1, "", "set_dacs_zero"], [30, 3, 1, "", "set_parameter_bounds"], [30, 3, 1, "", "set_pol_dacrack"], [30, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QuTech.M2j": [[30, 1, 1, "", "M2j"]], "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j": [[30, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.QuTech.S5i": [[30, 1, 1, "", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i": [[30, 3, 1, "", "optimize_for_frequency"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz": [[31, 0, 0, "-", "HMC8041"], [31, 0, 0, "-", "HMC8042"], [31, 0, 0, "-", "HMC8043"], [31, 0, 0, "-", "HMP2020"], [31, 0, 0, "-", "HMP2030"], [31, 0, 0, "-", "HMP4030"], [31, 0, 0, "-", "HMP4040"], [31, 0, 0, "-", "SMB100A"], [31, 0, 0, "-", "SMR40"], [31, 0, 0, "-", "SMW200A"], [31, 0, 0, "-", "SMW200Asim"], [31, 0, 0, "-", "ZVL13"], [32, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041": [[31, 1, 1, "", "RohdeSchwarzHMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042": [[31, 1, 1, "", "RohdeSchwarzHMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043": [[31, 1, 1, "", "RohdeSchwarzHMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020": [[31, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030": [[31, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030": [[31, 1, 1, "", "RohdeSchwarzHMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040": [[31, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A": [[31, 1, 1, "", "RohdeSchwarz_SMB100A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A": [[31, 3, 1, "", "off"], [31, 3, 1, "", "on"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "run_self_tests"], [31, 3, 1, "", "start_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40": [[31, 1, 1, "", "RohdeSchwarz_SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40": [[31, 3, 1, "", "do_get_frequency"], [31, 3, 1, "", "do_get_power"], [31, 3, 1, "", "do_get_pulse_delay"], [31, 3, 1, "", "do_get_status"], [31, 3, 1, "", "do_get_status_of_ALC"], [31, 3, 1, "", "do_get_status_of_modulation"], [31, 3, 1, "", "do_set_frequency"], [31, 3, 1, "", "do_set_power"], [31, 3, 1, "", "do_set_pulse_delay"], [31, 3, 1, "", "do_set_status"], [31, 3, 1, "", "do_set_status_of_ALC"], [31, 3, 1, "", "do_set_status_of_modulation"], [31, 3, 1, "", "get_all"], [31, 3, 1, "", "off"], [31, 3, 1, "", "off_modulation"], [31, 3, 1, "", "on"], [31, 3, 1, "", "on_modulation"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "set_ext_trig"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A": [[31, 1, 1, "", "AmplitudeModulation"], [31, 1, 1, "", "FrequencyModulation"], [31, 1, 1, "", "IQChannel"], [31, 1, 1, "", "IQModulation"], [31, 1, 1, "", "LFOutputChannel"], [31, 1, 1, "", "LFOutputSweep"], [31, 1, 1, "", "OutputChannel"], [31, 1, 1, "", "OutputFrequencySweep"], [31, 1, 1, "", "OutputLevelSweep"], [31, 1, 1, "", "PhaseModulation"], [31, 1, 1, "", "PulseGenerator"], [31, 1, 1, "", "PulseModulation"], [31, 1, 1, "", "RohdeSchwarz_SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "coupling_mode"], [31, 2, 1, "", "depth"], [31, 2, 1, "", "deviation_ratio"], [31, 2, 1, "", "sensitivity"], [31, 2, 1, "", "source"], [31, 2, 1, "", "state"], [31, 2, 1, "", "total_depth"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "coupling_mode"], [31, 2, 1, "", "deviation"], [31, 2, 1, "", "deviation_ratio"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "sensitivity"], [31, 2, 1, "", "source"], [31, 2, 1, "", "state"], [31, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "coupling"], [31, 2, 1, "", "i_bias"], [31, 2, 1, "", "i_offset"], [31, 2, 1, "", "level"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "q_bias"], [31, 2, 1, "", "q_offset"], [31, 2, 1, "", "state"], [31, 2, 1, "", "type"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "crest_factor"], [31, 2, 1, "", "gain"], [31, 2, 1, "", "source"], [31, 2, 1, "", "state"], [31, 2, 1, "", "swap"], [31, 2, 1, "", "wideband"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "bandwidth"], [31, 2, 1, "", "freq_manual"], [31, 2, 1, "", "freq_max"], [31, 2, 1, "", "freq_min"], [31, 2, 1, "", "frequency"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "offset"], [31, 2, 1, "", "period"], [31, 2, 1, "", "shape"], [31, 2, 1, "", "shape_duty_cycle"], [31, 2, 1, "", "shape_period"], [31, 2, 1, "", "shape_width"], [31, 2, 1, "", "source"], [31, 2, 1, "", "source_path"], [31, 2, 1, "", "state"], [31, 2, 1, "", "trapez_fall"], [31, 2, 1, "", "trapez_height"], [31, 2, 1, "", "trapez_period"], [31, 2, 1, "", "trapez_rise"], [31, 2, 1, "", "triangle_period"], [31, 2, 1, "", "triangle_rise"], [31, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "dwell"], [31, 2, 1, "", "execute"], [31, 2, 1, "", "lin_step"], [31, 2, 1, "", "log_step"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "points"], [31, 2, 1, "", "retrace"], [31, 2, 1, "", "running"], [31, 2, 1, "", "shape"], [31, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "frequency"], [31, 2, 1, "", "level"], [31, 2, 1, "", "losc_input"], [31, 2, 1, "", "losc_mode"], [31, 2, 1, "", "losc_output"], [31, 2, 1, "", "losc_state"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "state"], [31, 2, 1, "", "sweep_center"], [31, 2, 1, "", "sweep_span"], [31, 2, 1, "", "sweep_start"], [31, 2, 1, "", "sweep_stop"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "dwell"], [31, 2, 1, "", "execute"], [31, 2, 1, "", "lin_step"], [31, 2, 1, "", "log_step"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "points"], [31, 2, 1, "", "reset"], [31, 2, 1, "", "retrace"], [31, 2, 1, "", "running"], [31, 2, 1, "", "shape"], [31, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "attenuator"], [31, 2, 1, "", "dwell"], [31, 2, 1, "", "execute"], [31, 2, 1, "", "log_step"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "points"], [31, 2, 1, "", "reset"], [31, 2, 1, "", "retrace"], [31, 2, 1, "", "running"], [31, 2, 1, "", "shape"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "coupling_mode"], [31, 2, 1, "", "deviation"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "ratio"], [31, 2, 1, "", "sensitivity"], [31, 2, 1, "", "source"], [31, 2, 1, "", "state"], [31, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "output"], [31, 2, 1, "", "polarity"], [31, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation": [[31, 3, 1, "", "__init__"], [31, 2, 1, "", "delay"], [31, 2, 1, "", "double_delay"], [31, 2, 1, "", "double_width"], [31, 2, 1, "", "impedance"], [31, 2, 1, "", "mode"], [31, 2, 1, "", "period"], [31, 2, 1, "", "polarity"], [31, 2, 1, "", "source"], [31, 2, 1, "", "state"], [31, 2, 1, "", "transition_type"], [31, 2, 1, "", "trigger_impedance"], [31, 2, 1, "", "trigger_mode"], [31, 2, 1, "", "video_polarity"], [31, 2, 1, "", "width"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A": [[31, 3, 1, "", "close"], [31, 3, 1, "", "gen_trigger_pulse"], [31, 3, 1, "", "get_error"], [31, 3, 1, "", "get_id"], [31, 3, 1, "", "get_options"], [31, 3, 1, "", "getall"], [31, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim": [[31, 1, 1, "", "MockVisa"], [31, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa": [[31, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle": [[31, 3, 1, "", "ask"], [31, 3, 1, "", "clear"], [31, 3, 1, "", "close"], [31, 2, 1, "", "cmddef"], [31, 3, 1, "", "query"], [31, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13": [[31, 1, 1, "", "ComplexSweep"], [31, 1, 1, "", "FrequencySweep"], [31, 1, 1, "", "FrequencySweepMagPhase"], [31, 1, 1, "", "SAFrequencySweep"], [31, 1, 1, "", "ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep": [[31, 3, 1, "", "get_raw"], [31, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep": [[31, 3, 1, "", "get_raw"], [31, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase": [[31, 3, 1, "", "get_raw"], [31, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep": [[31, 3, 1, "", "get_raw"], [31, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13": [[31, 3, 1, "", "calibration"], [31, 3, 1, "", "na_mode"], [31, 3, 1, "", "reset"], [31, 3, 1, "", "sa_mode"], [31, 3, 1, "", "update_traces"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private": [[32, 0, 0, "-", "HMC804x"], [32, 0, 0, "-", "HMP"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x": [[32, 1, 1, "", "RohdeSchwarzHMC804xChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP": [[32, 1, 1, "", "RohdeSchwarzHMPChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel": [[32, 3, 1, "", "get_max_current"], [32, 3, 1, "", "send_cmd"]], "qcodes_contrib_drivers.drivers.Shamrock": [[33, 0, 0, "-", "SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750": [[33, 1, 1, "", "ShamrockCIF"], [33, 1, 1, "", "Shamrock_SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF": [[33, 3, 1, "", "close"], [33, 2, 1, "", "dll"], [33, 3, 1, "", "error_check"], [33, 3, 1, "", "get_calibration"], [33, 3, 1, "", "get_grating"], [33, 3, 1, "", "get_grating_info"], [33, 3, 1, "", "get_number_devices"], [33, 3, 1, "", "get_number_gratings"], [33, 3, 1, "", "get_number_pixels"], [33, 3, 1, "", "get_pixel_width"], [33, 3, 1, "", "get_serial_number"], [33, 3, 1, "", "get_slit"], [33, 3, 1, "", "get_wavelength"], [33, 3, 1, "", "get_wavelength_limits"], [33, 3, 1, "", "initialize"], [33, 3, 1, "", "set_grating"], [33, 3, 1, "", "set_number_pixels"], [33, 3, 1, "", "set_pixel_width"], [33, 3, 1, "", "set_slit"], [33, 3, 1, "", "set_wavelength"], [33, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750": [[33, 2, 1, "", "ShamrockCIF"], [33, 3, 1, "", "close"], [33, 2, 1, "", "device_id"], [33, 3, 1, "", "get_idn"], [33, 2, 1, "", "number_gratings"], [33, 2, 1, "", "serial_number"]], "qcodes_contrib_drivers.drivers.SignalCore": [[34, 0, 0, "-", "SignalCore"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore": [[34, 1, 1, "", "DeviceInfoT"], [34, 1, 1, "", "DeviceRFParamsT"], [34, 1, 1, "", "DeviceStatusT"], [34, 1, 1, "", "HWTriggerT"], [34, 1, 1, "", "ListModeT"], [34, 1, 1, "", "ManDate"], [34, 1, 1, "", "OperateStatusT"], [34, 1, 1, "", "PLLStatusT"], [34, 1, 1, "", "SC5521A"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT": [[34, 2, 1, "", "device_interfaces"], [34, 2, 1, "", "firmware_revision"], [34, 2, 1, "", "hardware_revision"], [34, 2, 1, "", "man_date"], [34, 2, 1, "", "product_serial_number"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT": [[34, 2, 1, "", "atten_value"], [34, 2, 1, "", "buffer_points"], [34, 2, 1, "", "frequency"], [34, 2, 1, "", "level_dac_value"], [34, 2, 1, "", "power_level"], [34, 2, 1, "", "rf_phase_offset"], [34, 2, 1, "", "sweep_cycles"], [34, 2, 1, "", "sweep_dwell_time"], [34, 2, 1, "", "sweep_start_freq"], [34, 2, 1, "", "sweep_step_freq"], [34, 2, 1, "", "sweep_stop_freq"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT": [[34, 2, 1, "", "list_mode_t"], [34, 2, 1, "", "operate_status_t"], [34, 2, 1, "", "pll_status_t"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT": [[34, 2, 1, "", "edge"], [34, 2, 1, "", "pxi_enable"], [34, 2, 1, "", "pxi_line"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT": [[34, 2, 1, "", "hw_trigger"], [34, 2, 1, "", "return_to_start"], [34, 2, 1, "", "step_on_hw_trig"], [34, 2, 1, "", "sweep_dir"], [34, 2, 1, "", "sweep_mode"], [34, 2, 1, "", "tri_waveform"], [34, 2, 1, "", "trig_out_enable"], [34, 2, 1, "", "trig_out_on_cycle"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate": [[34, 2, 1, "", "day"], [34, 2, 1, "", "hour"], [34, 2, 1, "", "month"], [34, 2, 1, "", "year"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT": [[34, 2, 1, "", "auto_pwr_disable"], [34, 2, 1, "", "device_access"], [34, 2, 1, "", "device_standby"], [34, 2, 1, "", "ext_ref_detect"], [34, 2, 1, "", "ext_ref_lock_enable"], [34, 2, 1, "", "harmonic_ss"], [34, 2, 1, "", "list_mode_running"], [34, 2, 1, "", "output_enable"], [34, 2, 1, "", "over_temp"], [34, 2, 1, "", "pci_clk_enable"], [34, 2, 1, "", "ref_out_select"], [34, 2, 1, "", "rf1_lock_mode"], [34, 2, 1, "", "rf1_loop_gain"], [34, 2, 1, "", "rf_mode"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT": [[34, 2, 1, "", "crs_aux_pll_ld"], [34, 2, 1, "", "crs_pll_ld"], [34, 2, 1, "", "crs_ref_pll_ld"], [34, 2, 1, "", "fine_pll_ld"], [34, 2, 1, "", "ref_100_pll_ld"], [34, 2, 1, "", "ref_10_pll_ld"], [34, 2, 1, "", "sum_pll_ld"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A": [[34, 3, 1, "", "__init__"], [34, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.SingleQuantum": [[35, 0, 0, "-", "SingleQuantum"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum": [[35, 1, 1, "", "ChannelArray"], [35, 1, 1, "", "CommunicationHandler"], [35, 1, 1, "", "SQCounts"], [35, 1, 1, "", "SQTalk"], [35, 1, 1, "", "TimeArray"], [35, 1, 1, "", "WebSQControlqcode"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray": [[35, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler": [[35, 3, 1, "", "acquire_cnts_t"], [35, 3, 1, "", "auto_cali_bias_currents"], [35, 3, 1, "", "auto_cali_finished"], [35, 3, 1, "", "enable_detectors"], [35, 3, 1, "", "error"], [35, 3, 1, "", "get_bias_current"], [35, 3, 1, "", "get_bias_voltage"], [35, 3, 1, "", "get_measurement_periode"], [35, 3, 1, "", "get_number_of_detectors"], [35, 3, 1, "", "get_trigger_level"], [35, 3, 1, "", "set_bias_current"], [35, 3, 1, "", "set_dark_counts_auto_iv"], [35, 3, 1, "", "set_measurement_periode"], [35, 3, 1, "", "set_trigger_level"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts": [[35, 3, 1, "", "close"], [35, 3, 1, "", "get_n"], [35, 3, 1, "", "run"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk": [[35, 3, 1, "", "add_labelProps"], [35, 3, 1, "", "check_error"], [35, 3, 1, "", "close"], [35, 3, 1, "", "get_all_labels"], [35, 3, 1, "", "get_label"], [35, 3, 1, "", "run"], [35, 3, 1, "", "send"], [35, 3, 1, "", "sub_jsons"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray": [[35, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Spectrum": [[36, 0, 0, "-", "M4i"], [37, 0, 0, "-", "py_header"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i": [[36, 1, 1, "", "M4i"], [36, 5, 1, "", "szTypeToName"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "active_channels"], [36, 3, 1, "", "blockavg_hardware_trigger_acquisition"], [36, 3, 1, "", "close"], [36, 3, 1, "", "convert_to_voltage"], [36, 3, 1, "", "gated_trigger_acquisition"], [36, 3, 1, "", "get_card_memory"], [36, 3, 1, "", "get_card_type"], [36, 3, 1, "", "get_data"], [36, 3, 1, "", "get_error_info32bit"], [36, 3, 1, "", "get_firmware_version"], [36, 3, 1, "", "get_hardware_version"], [36, 3, 1, "", "get_idn"], [36, 3, 1, "", "get_max_sample_rate"], [36, 3, 1, "", "initialize_channels"], [36, 3, 1, "", "multiple_trigger_acquisition"], [36, 3, 1, "", "reset"], [36, 3, 1, "", "retrieve_data"], [36, 3, 1, "", "set_channel_OR_trigger_settings"], [36, 3, 1, "", "set_channel_settings"], [36, 3, 1, "", "set_ext0_OR_trigger_settings"], [36, 3, 1, "", "setup_multi_recording"], [36, 3, 1, "", "single_software_trigger_acquisition"], [36, 3, 1, "", "single_software_trigger_acquisition_boxcar"], [36, 3, 1, "", "single_trigger_acquisition"], [36, 3, 1, "", "start_acquisition"], [36, 3, 1, "", "start_triggered"], [36, 3, 1, "", "wait_ready"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header": [[37, 0, 0, "-", "h2py"], [37, 0, 0, "-", "regs"], [37, 0, 0, "-", "spcerr"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py": [[37, 5, 1, "", "main"], [37, 5, 1, "", "process"], [37, 5, 1, "", "pytify"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs": [[37, 5, 1, "", "GIGA"], [37, 5, 1, "", "GIGA_B"], [37, 5, 1, "", "KILO"], [37, 5, 1, "", "KILO_B"], [37, 5, 1, "", "MEGA"], [37, 5, 1, "", "MEGA_B"]], "qcodes_contrib_drivers.drivers.Standa": [[38, 0, 0, "-", "Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168": [[38, 1, 1, "", "DeviceInformation"], [38, 1, 1, "", "GetPosition"], [38, 1, 1, "", "Standa_10MWA168"], [38, 1, 1, "", "Status"], [38, 1, 1, "", "libximc"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation": [[38, 2, 1, "", "Major"], [38, 2, 1, "", "Manufacturer"], [38, 2, 1, "", "ManufacturerId"], [38, 2, 1, "", "Minor"], [38, 2, 1, "", "ProductDescription"], [38, 2, 1, "", "Release"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition": [[38, 2, 1, "", "EncPosition"], [38, 2, 1, "", "Position"], [38, 2, 1, "", "uPosition"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status": [[38, 2, 1, "", "CmdBufFreeSpace"], [38, 2, 1, "", "CurPosition"], [38, 2, 1, "", "CurSpeed"], [38, 2, 1, "", "CurT"], [38, 2, 1, "", "EncPosition"], [38, 2, 1, "", "EncSts"], [38, 2, 1, "", "Flags"], [38, 2, 1, "", "GPIOFlags"], [38, 2, 1, "", "Ipwr"], [38, 2, 1, "", "Iusb"], [38, 2, 1, "", "MoveSts"], [38, 2, 1, "", "MvCmdSts"], [38, 2, 1, "", "PWRSts"], [38, 2, 1, "", "Upwr"], [38, 2, 1, "", "Uusb"], [38, 2, 1, "", "WindSts"], [38, 2, 1, "", "uCurPosition"], [38, 2, 1, "", "uCurSpeed"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc": [[38, 3, 1, "", "command_move"], [38, 3, 1, "", "enumerate_devices"], [38, 3, 1, "", "error_check"], [38, 3, 1, "", "get_device_name"], [38, 3, 1, "", "get_position"], [38, 3, 1, "", "get_status"], [38, 3, 1, "", "open_device"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems": [[39, 0, 0, "-", "CS580"], [39, 0, 0, "-", "DG645"], [39, 0, 0, "-", "SIM928"], [39, 0, 0, "-", "SR844"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580": [[39, 1, 1, "", "CS580"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580": [[39, 3, 1, "", "get_idn"], [39, 3, 1, "", "get_overload"], [39, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645": [[39, 1, 1, "", "DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645": [[39, 2, 1, "", "CHANNEL_MAPPING"], [39, 2, 1, "", "DISPLAY_MAPPING"], [39, 2, 1, "", "OUTPUT_MAPPING"], [39, 2, 1, "", "POLARITY_MAPPING"], [39, 2, 1, "", "PRESCALE_MAPPING"], [39, 2, 1, "", "TRIGGER_MAPPING"], [39, 3, 1, "", "local"], [39, 3, 1, "", "remote"], [39, 3, 1, "", "reset"], [39, 3, 1, "", "save_settings"], [39, 3, 1, "", "self_calibrate"], [39, 3, 1, "", "self_test"], [39, 3, 1, "", "trigger"], [39, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928": [[39, 1, 1, "", "SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928": [[39, 3, 1, "", "ask_module"], [39, 3, 1, "", "byte_to_bits"], [39, 3, 1, "", "check_module_errors"], [39, 3, 1, "", "find_modules"], [39, 3, 1, "", "get_module_idn"], [39, 3, 1, "", "get_module_status"], [39, 3, 1, "", "get_voltage"], [39, 3, 1, "", "reset_module"], [39, 3, 1, "", "set_smooth"], [39, 3, 1, "", "set_voltage"], [39, 3, 1, "", "write_module"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844": [[39, 1, 1, "", "ChannelTrace"], [39, 1, 1, "", "GeneratedSetPoints"], [39, 1, 1, "", "SR844"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace": [[39, 3, 1, "", "__init__"], [39, 3, 1, "", "get_buffer_length"], [39, 3, 1, "", "get_raw"], [39, 3, 1, "", "parse_binary"], [39, 3, 1, "", "poll_raw_binary_data"], [39, 3, 1, "", "update_unit"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints": [[39, 3, 1, "", "get_raw"], [39, 3, 1, "", "set_raw"], [39, 3, 1, "", "update_units_if_constant_sample_rate"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844": [[39, 2, 1, "", "SNAP_PARAMETERS"], [39, 3, 1, "", "decrement_sensitivity"], [39, 3, 1, "", "get_display_value"], [39, 3, 1, "", "increment_sensitivity"], [39, 2, 1, "", "sensitivity_value_map"], [39, 3, 1, "", "set_sweep_parameters"], [39, 3, 1, "", "snap"], [39, 3, 1, "", "update_ch_unit"], [39, 2, 1, "", "value_sensitivity_map"]], "qcodes_contrib_drivers.drivers.Tektronix": [[40, 0, 0, "-", "AFG3000"], [40, 0, 0, "-", "AWG520"], [40, 0, 0, "-", "Keithley_2000_Scan"], [40, 0, 0, "-", "Keithley_2700"], [40, 0, 0, "-", "Keithley_6430"], [40, 0, 0, "-", "Keithley_6500"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000": [[40, 1, 1, "", "AFG3000"], [40, 1, 1, "", "AFG3252"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000": [[40, 3, 1, "", "abort"], [40, 3, 1, "", "recall"], [40, 3, 1, "", "reset"], [40, 3, 1, "", "reset_edit_memory"], [40, 3, 1, "", "save"], [40, 3, 1, "", "self_calibrate"], [40, 3, 1, "", "self_test"], [40, 3, 1, "", "synchronize_phase"], [40, 3, 1, "", "upload_waveform"], [40, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520": [[40, 1, 1, "", "Tektronix_AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520": [[40, 3, 1, "", "__init__"], [40, 3, 1, "", "change_folder"], [40, 3, 1, "", "clear_waveforms"], [40, 3, 1, "", "delete_all_waveforms_from_list"], [40, 3, 1, "", "force_logicjump"], [40, 3, 1, "", "force_trigger"], [40, 3, 1, "", "get_all"], [40, 3, 1, "", "get_current_folder_name"], [40, 3, 1, "", "get_filenames"], [40, 3, 1, "", "get_folder_contents"], [40, 3, 1, "", "get_jumpmode"], [40, 3, 1, "", "get_state"], [40, 3, 1, "", "goto_root"], [40, 3, 1, "", "load_and_set_sequence"], [40, 3, 1, "", "make_directory"], [40, 3, 1, "", "resend_waveform"], [40, 3, 1, "", "return_self"], [40, 3, 1, "", "send_pattern"], [40, 3, 1, "", "send_sequence"], [40, 3, 1, "", "send_sequence2"], [40, 3, 1, "", "send_waveform"], [40, 3, 1, "", "set_current_folder_name"], [40, 3, 1, "", "set_jumpmode"], [40, 3, 1, "", "set_sequence"], [40, 3, 1, "", "set_setup_filename"], [40, 3, 1, "", "start"], [40, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan": [[40, 1, 1, "", "Keithley_2000_Scan_Channel"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel": [[40, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700": [[40, 1, 1, "", "Keithley_2700"], [40, 5, 1, "", "bool_to_str"], [40, 5, 1, "", "parsebool"], [40, 5, 1, "", "parseint"], [40, 5, 1, "", "parsestr"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700": [[40, 3, 1, "", "get_all"], [40, 3, 1, "", "reset"], [40, 3, 1, "", "set_defaults"], [40, 3, 1, "", "set_mode"], [40, 3, 1, "", "set_mode_volt_dc"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430": [[40, 1, 1, "", "Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430": [[40, 3, 1, "", "init"], [40, 3, 1, "", "read"], [40, 3, 1, "", "reset"], [40, 3, 1, "", "set_trigger_immediate"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500": [[40, 1, 1, "", "Keithley_6500"], [40, 1, 1, "", "Keithley_Sense"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500": [[40, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense": [[40, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Thermotek": [[41, 0, 0, "-", "Thermotek_T255p"]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p": [[41, 1, 1, "", "ThermotekT255p"]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p": [[41, 3, 1, "", "alarm_state"], [41, 3, 1, "", "ask"], [41, 2, 1, "", "enabled"], [41, 3, 1, "", "get_idn"], [41, 3, 1, "", "status"], [41, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Thorlabs": [[42, 0, 0, "-", "K10CR1"], [42, 0, 0, "-", "KDC101"], [42, 0, 0, "-", "KLS1550"], [42, 0, 0, "-", "MFF10x"], [42, 0, 0, "-", "PM100D"], [42, 0, 0, "-", "PRM1Z8"], [42, 0, 0, "-", "TDC001"], [43, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1": [[42, 1, 1, "", "HomeLimitSwitch"], [42, 1, 1, "", "RotationDirection"], [42, 1, 1, "", "Thorlabs_K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch": [[42, 2, 1, "", "FORWARD"], [42, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection": [[42, 2, 1, "", "FORWARD"], [42, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1": [[42, 2, 1, "", "apt"], [42, 3, 1, "", "get_idn"], [42, 2, 1, "", "model"], [42, 2, 1, "", "serial_number"], [42, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.KDC101": [[42, 1, 1, "", "Thorlabs_KDC101"]], "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550": [[42, 1, 1, "", "Thorlabs_KLS1550"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x": [[42, 1, 1, "", "Thorlabs_MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x": [[42, 2, 1, "", "apt"], [42, 3, 1, "", "get_idn"], [42, 2, 1, "", "model"], [42, 2, 1, "", "serial_number"], [42, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.PM100D": [[42, 1, 1, "", "Thorlab_PM100D"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8": [[42, 1, 1, "", "Thorlabs_PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8": [[42, 2, 1, "", "apt"], [42, 3, 1, "", "get_idn"], [42, 2, 1, "", "model"], [42, 2, 1, "", "serial_number"], [42, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.TDC001": [[42, 1, 1, "", "Thorlabs_TDC001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private": [[43, 0, 0, "-", "APT"], [43, 0, 0, "-", "CC"], [43, 0, 0, "-", "LS"], [43, 0, 0, "-", "kinesis"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT": [[43, 4, 1, "", "ThorlabsException"], [43, 1, 1, "", "ThorlabsHWType"], [43, 1, 1, "", "Thorlabs_APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType": [[43, 2, 1, "", "BBD10x"], [43, 2, 1, "", "BDC101"], [43, 2, 1, "", "BSC001"], [43, 2, 1, "", "BSC002"], [43, 2, 1, "", "BSC101"], [43, 2, 1, "", "DCC001"], [43, 2, 1, "", "K10CR1"], [43, 2, 1, "", "KDC101"], [43, 2, 1, "", "L490MZ"], [43, 2, 1, "", "LTSxxx"], [43, 2, 1, "", "MFF10x"], [43, 2, 1, "", "MST601"], [43, 2, 1, "", "ODC001"], [43, 2, 1, "", "OST001"], [43, 2, 1, "", "PRM1Z8"], [43, 2, 1, "", "SCC001"], [43, 2, 1, "", "TDC001"], [43, 2, 1, "", "TST001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT": [[43, 3, 1, "", "apt_clean_up"], [43, 3, 1, "", "apt_init"], [43, 3, 1, "", "disable_hw_channel"], [43, 2, 1, "", "dll"], [43, 3, 1, "", "enable_event_dlg"], [43, 3, 1, "", "enable_hw_channel"], [43, 3, 1, "", "error_check"], [43, 3, 1, "", "get_hw_info"], [43, 3, 1, "", "get_hw_serial_num_ex"], [43, 3, 1, "", "init_hw_device"], [43, 3, 1, "", "list_available_devices"], [43, 3, 1, "", "mot_get_home_parameters"], [43, 3, 1, "", "mot_get_position"], [43, 3, 1, "", "mot_get_status_bits"], [43, 3, 1, "", "mot_get_velocity_parameters"], [43, 3, 1, "", "mot_move_absolute_ex"], [43, 3, 1, "", "mot_move_home"], [43, 3, 1, "", "mot_move_jog"], [43, 3, 1, "", "mot_move_velocity"], [43, 3, 1, "", "mot_set_home_parameters"], [43, 3, 1, "", "mot_set_velocity_parameters"], [43, 3, 1, "", "mot_stop_profiled"], [43, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Vaunix": [[44, 0, 0, "-", "LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA": [[44, 2, 1, "", "LDA"], [44, 1, 1, "", "LdaAttenuation"], [44, 1, 1, "", "LdaChannel"], [44, 1, 1, "", "LdaParameter"], [44, 1, 1, "", "LdaWorkingFrequency"], [44, 1, 1, "", "Vaunix_LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation": [[44, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "get_raw"], [44, 2, 1, "", "scaling"], [44, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "get_validator"], [44, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "close"], [44, 2, 1, "", "dll_path"], [44, 3, 1, "", "get_idn"], [44, 3, 1, "", "save_settings"]], "qcodes_contrib_drivers.drivers.ZurichInstruments": [[45, 0, 0, "-", "HF2LI"], [45, 0, 0, "-", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI": [[45, 1, 1, "", "HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI": [[45, 2, 1, "", "OUTPUT_MAPPING"], [45, 3, 1, "", "sample"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8": [[45, 4, 1, "", "CompilerError"], [45, 1, 1, "", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8": [[45, 3, 1, "", "__init__"], [45, 3, 1, "", "create_parameters_from_node_tree"], [45, 3, 1, "", "disable_channel"], [45, 3, 1, "", "download_device_node_tree"], [45, 3, 1, "", "enable_channel"], [45, 3, 1, "", "generate_csv_sequence_program"], [45, 3, 1, "", "set_channel_grouping"], [45, 3, 1, "", "snapshot"], [45, 3, 1, "", "snapshot_base"], [45, 3, 1, "", "start_awg"], [45, 3, 1, "", "stop_awg"], [45, 3, 1, "", "upload_sequence_program"], [45, 3, 1, "", "upload_waveform"], [45, 3, 1, "", "waveform_to_csv"], [45, 3, 1, "", "waveform_to_wave"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:exception", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "exception", "Python exception"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"qcodes_contrib_driv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "driver": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 66, 68, 69, 90, 108, 109], "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "subpackag": [0, 5, 18, 20, 31, 36, 42], "submodul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45], "cmts5048": 0, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 66], "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 109], "advantech": 1, "pcie_1751": 1, "agil": [2, 46], "agilent_n9000a": 2, "aimtti": [3, 47], "el320p": [3, 47], "andor": [4, 48], "du401": [4, 48], "attocub": [5, 6, 49], "anc300": [5, 49], "anc300sim": 5, "anc350": 5, "anc350lib": 6, "interfac": 6, "v3": 6, "v4": 6, "aviosi": [7, 50], "ip_power_9258": 7, "bilt": [8, 58], "itest": [8, 58], "bluefor": [9, 47, 51], "coppermountain": [10, 52], "m5180": [10, 52], "s5048": 10, "cryocon": 11, "cryocon_26": 11, "cryogen": 12, "cryogenicsms120c": 12, "daylightsolut": 13, "mircat": 13, "erainstru": 14, "erasynth": [14, 53], "generalmicrowav": 15, "gm349": 15, "gentec": [16, 54], "gentec_maestro": 16, "holzworth": [17, 56], "hs900": 17, "hs9008b": 17, "horiba": [18, 19, 57], "horiba_fhr": 18, "privat": [19, 32, 43], "fhr_client": 19, "fhr_server": 19, "keysight": [20, 21, 60, 61], "keysight_e36313a": 20, "keysight_e8267d": 20, "keysight_j7211": 20, "keysight_m3201a": 20, "keysight_m3300a": 20, "m3202a": [20, 60, 61], "sd_common": 21, "sd_awg": 21, "sd_awg_async": 21, "sd_dig": 21, "sd_modul": 21, "memory_manag": 21, "lakeshor": [22, 62, 63], "model_331": 22, "model_625": 22, "lighthousephoton": 23, "lighthouse_photonics_sprout_g": 23, "m2": 24, "m2_solstis_3": 24, "montanainstru": 25, "cryostat": 25, "nationalinstru": 26, "daq": [26, 64], "pxie_2597": 26, "pxie_5654": 26, "rfsg": [26, 66], "switch": [26, 65], "dll_wrapper": 26, "ni_dll_instru": 26, "visa_typ": 26, "newport": [27, 67], "ag_uc8": 27, "oxford": [28, 68], "ilm200": 28, "ips120": 28, "triton": [28, 68], "kelvinox": 28, "qdevil": [29, 90], "qdac1": 29, "qdac2": 29, "qdac2_arrai": 29, "qutech": 30, "d4": 30, "d5a": 30, "f1d": 30, "ivvi": 30, "m2j": 30, "s5i": 30, "rohdeschwarz": [31, 32], "hmc8041": 31, "hmc8042": 31, "hmc8043": 31, "hmp2020": 31, "hmp2030": 31, "hmp4030": 31, "hmp4040": [31, 92], "smb100a": 31, "smr40": 31, "smw200a": [31, 93], "smw200asim": 31, "zvl13": [31, 106], "hmc804x": 32, "hmp": 32, "shamrock": [33, 95], "sr750": [33, 95], "signalcor": 34, "singlequantum": 35, "spectrum": [36, 37, 48, 106], "m4i": 36, "py_head": 37, "h2py": 37, "reg": 37, "spcerr": 37, "standa": [38, 98], "standa_10mwa168": 38, "stanfordresearchsystem": 39, "cs580": 39, "dg645": 39, "sim928": 39, "sr844": 39, "tektronix": [40, 99, 100], "afg3000": [40, 99], "awg520": 40, "keithley_2000_scan": 40, "keithley_2700": 40, "keithley_6430": 40, "keithley_6500": 40, "thermotek": 41, "thermotek_t255p": 41, "thorlab": [42, 43, 101, 102, 103, 104], "k10cr1": [42, 101], "kdc101": 42, "kls1550": [42, 102], "mff10x": [42, 103], "pm100d": 42, "prm1z8": [42, 104], "tdc001": 42, "apt": 43, "cc": 43, "l": 43, "kinesi": 43, "vaunix": [44, 105], "lda": [44, 105], "zurichinstru": 45, "hf2li": [45, 107], "zihdawg8": 45, "exampl": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 89, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108], "n9000a": 46, "import": [46, 51, 58, 68], "load": [46, 51, 58, 68], "instrument": [46, 48, 50, 51, 54, 58, 62, 64, 65, 66, 68, 95, 98, 103, 104, 105, 106, 107], "initial": [46, 58], "measur": [46, 52, 58, 59, 94, 100], "notebook": [47, 56, 59], "thi": 47, "i": [47, 49, 70, 109], "power": [47, 50, 54, 63, 91, 92, 102], "suppli": [47, 63, 91, 92], "us": [47, 54, 70, 76, 79, 89, 94, 100, 108], "4": 47, "k": 47, "stage": 47, "warmup": 47, "heater": [47, 62], "qcode": [48, 49, 50, 54, 55, 62, 65, 66, 67, 69, 70, 89, 91, 92, 93, 95, 98, 100, 101, 102, 103, 104, 105, 109], "bu2": 48, "initi": [48, 50, 54, 62, 66, 95, 98, 100, 101, 103, 104, 105, 106], "take": [48, 66, 95], "singl": [48, 69, 97], "scan": [48, 69, 80, 81, 88, 100], "acquisit": [48, 106], "mode": [48, 53, 69, 106], "accumul": 48, "snapshot": [48, 65, 66, 95], "close": [48, 50, 54, 62, 66, 95, 103, 104, 105], "The": [49, 69], "test": [49, 52, 53, 75], "control": [49, 67, 69], "equip": 49, "two": 49, "anm150": 49, "axi": 49, "ip": 50, "9258": 50, "read": [50, 54, 62, 69, 94, 103, 104], "statu": 50, "set": [50, 53, 54, 55, 58, 69, 96, 102, 105], "turn": [50, 53, 102], "all": 50, "socket": 50, "model": [52, 63, 105], "vector": [52, 106], "network": [52, 106], "analyz": [52, 106], "connect": [52, 65, 96, 100], "devic": [52, 96], "setup": [52, 95], "db": 52, "station": [52, 106], "measurer": 52, "trace": [52, 106], "look": [52, 63], "name": [52, 65], "label": 52, "sxx": 52, "paramet": [52, 63, 68, 69, 96, 105, 106], "frequenc": [53, 66], "run": 53, "self": 53, "sweep": [53, 84], "commun": 53, "perform": [53, 100], "maestro": 54, "its": 54, "asrl": 54, "address": [54, 69], "wavelength": 54, "get": [54, 95, 109], "right": 54, "calibr": [54, 95], "laser": [54, 102], "hp8594e": 55, "start": [55, 109], "stop": [55, 66], "center": 55, "span": 55, "more": [55, 69], "transfer": 55, "type": 55, "hs900b": 56, "rf": [56, 65, 66], "synthes": 56, "fhr": 57, "from": [58, 96], "keithlei": [59, 100], "6430": 59, "smu": 59, "resist": 59, "100k": 59, "omega": 59, "resistor": 59, "awg": [60, 61], "gener": [60, 61, 66, 71, 78, 99], "enqueu": [60, 61], "waveform": [60, 61, 71, 99], "trigger": [60, 61, 72, 94], "digit": [61, 100], "configur": [61, 62], "captur": 61, "signal": [61, 66, 96], "retriev": 61, "data": 61, "plot": [61, 69, 106], "result": [61, 69], "311": 62, "temperatur": [62, 69], "625": 63, "superconduct": 63, "magnet": 63, "check": [63, 100], "current": [63, 69, 95, 103, 104], "field": 63, "convers": 63, "let": 63, "": [63, 91, 92, 109], "have": 63, "other": 63, "ramp": [63, 69], "rate": 63, "quench": 63, "detect": 63, "nation": [64, 65], "multifunct": 64, "daqanaloginput": 64, "daqanalogoutput": 64, "pxie": 65, "2597": 65, "differ": 65, "channel": [65, 69, 78, 105], "alias": 65, "print": 65, "ni": 66, "puls": [66, 69], "analog": 66, "amplitud": 66, "phase": 66, "ag": 67, "uc8": 67, "piezo": 67, "motion": 67, "readout": 68, "qdevil_qdac": 69, "initialis": [69, 102], "basic": 69, "qdac": [69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "usag": 69, "voltag": [69, 73, 77, 84], "smooth": 69, "between": 69, "multipl": [69, 76, 78, 85], "output": [69, 99, 102], "sync": 69, "one": 69, "simultan": 69, "step": [69, 105], "record": 69, "sensor": 69, "2d": [69, 80, 81, 88], "rang": 69, "when": 69, "chang": [69, 94, 95, 103, 104], "overview": 69, "reset": 69, "how": [70, 89, 108], "ii": [71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "arbitrari": [71, 99], "chain": 72, "constant": 73, "debug": 74, "gate": [75, 76, 87], "leakag": [75, 76], "list": 77, "per": 78, "pyvisa": 79, "direct": 79, "1d": 80, "diod": [81, 88], "sine": 82, "wave": [82, 83, 86], "squar": 83, "synchronis": 85, "triangl": 86, "virtual": 87, "r": [91, 92], "hmc": 91, "8043": 91, "rohe": 93, "schwarz": [93, 106], "sensit": 94, "prepar": 94, "buffer": 94, "non": 94, "spectromet": 95, "microwav": 96, "sourc": [96, 102], "sc5521a": 96, "core": 96, "quantum": 97, "snspd": 97, "10mwa168": 98, "seri": 99, "function": 99, "upload": 99, "an": 99, "afg": 99, "multimet": 100, "dmm6500": 100, "simpl": 100, "queri": 100, "activ": 100, "termin": 100, "2000": 100, "card": 100, "move": 101, "rotat": 101, "home": 101, "certain": 101, "posit": [101, 103, 104], "asynchron": 101, "clean": 101, "up": 101, "resourc": 101, "off": 102, "disconnect": 102, "attenu": 105, "save": 105, "mani": 105, "rohd": 106, "definit": 106, "zurich": 107, "welcom": 109, "contribut": 109, "document": 109, "contrib": 109, "default": 109, "branch": 109, "now": 109, "main": 109, "prerequisit": 109, "instal": 109, "licens": 109, "indic": 109, "tabl": 109}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"qcodes_contrib_drivers.drivers package": [[0, "qcodes-contrib-drivers-drivers-package"]], "Subpackages": [[0, "subpackages"], [5, "subpackages"], [18, "subpackages"], [20, "subpackages"], [31, "subpackages"], [36, "subpackages"], [42, "subpackages"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [25, "submodules"], [26, "submodules"], [27, "submodules"], [28, "submodules"], [29, "submodules"], [30, "submodules"], [31, "submodules"], [32, "submodules"], [33, "submodules"], [34, "submodules"], [35, "submodules"], [36, "submodules"], [37, "submodules"], [38, "submodules"], [39, "submodules"], [40, "submodules"], [41, "submodules"], [42, "submodules"], [43, "submodules"], [44, "submodules"], [45, "submodules"]], "qcodes_contrib_drivers.drivers.CMTS5048 module": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048"]], "Module contents": [[0, "module-qcodes_contrib_drivers.drivers"], [1, "module-qcodes_contrib_drivers.drivers.Advantech"], [2, "module-qcodes_contrib_drivers.drivers.Agilent"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi"], [4, "module-qcodes_contrib_drivers.drivers.Andor"], [5, "module-qcodes_contrib_drivers.drivers.Attocube"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"], [7, "module-qcodes_contrib_drivers.drivers.Aviosys"], [8, "module-qcodes_contrib_drivers.drivers.Bilt"], [9, "module-qcodes_contrib_drivers.drivers.BlueFors"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain"], [11, "module-qcodes_contrib_drivers.drivers.Cryocon"], [12, "module-qcodes_contrib_drivers.drivers.Cryogenic"], [13, "module-qcodes_contrib_drivers.drivers.DaylightSolutions"], [14, "module-qcodes_contrib_drivers.drivers.ERAInstruments"], [15, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"], [16, "module-qcodes_contrib_drivers.drivers.Gentec"], [17, "module-qcodes_contrib_drivers.drivers.Holzworth"], [18, "module-qcodes_contrib_drivers.drivers.Horiba"], [19, "module-qcodes_contrib_drivers.drivers.Horiba.private"], [20, "module-qcodes_contrib_drivers.drivers.Keysight"], [21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"], [22, "module-qcodes_contrib_drivers.drivers.Lakeshore"], [23, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics"], [24, "module-qcodes_contrib_drivers.drivers.M2"], [25, "module-qcodes_contrib_drivers.drivers.MontanaInstruments"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments"], [27, "module-qcodes_contrib_drivers.drivers.Newport"], [28, "module-qcodes_contrib_drivers.drivers.Oxford"], [29, "module-qcodes_contrib_drivers.drivers.QDevil"], [30, "module-qcodes_contrib_drivers.drivers.QuTech"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"], [32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"], [33, "module-qcodes_contrib_drivers.drivers.Shamrock"], [34, "module-qcodes_contrib_drivers.drivers.SignalCore"], [35, "module-qcodes_contrib_drivers.drivers.SingleQuantum"], [36, "module-qcodes_contrib_drivers.drivers.Spectrum"], [37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"], [38, "module-qcodes_contrib_drivers.drivers.Standa"], [39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix"], [41, "module-qcodes_contrib_drivers.drivers.Thermotek"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs"], [43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private"], [44, "module-qcodes_contrib_drivers.drivers.Vaunix"], [45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"]], "qcodes_contrib_drivers.drivers.Advantech package": [[1, "qcodes-contrib-drivers-drivers-advantech-package"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751 module": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"]], "qcodes_contrib_drivers.drivers.Agilent package": [[2, "qcodes-contrib-drivers-drivers-agilent-package"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A module": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.AimTTi package": [[3, "qcodes-contrib-drivers-drivers-aimtti-package"]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P module": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"]], "qcodes_contrib_drivers.drivers.Andor package": [[4, "qcodes-contrib-drivers-drivers-andor-package"]], "qcodes_contrib_drivers.drivers.Andor.DU401 module": [[4, "module-qcodes_contrib_drivers.drivers.Andor.DU401"]], "qcodes_contrib_drivers.drivers.Attocube package": [[5, "qcodes-contrib-drivers-drivers-attocube-package"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300 module": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim module": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350 module": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package": [[6, "qcodes-contrib-drivers-drivers-attocube-anc350lib-package"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"]], "qcodes_contrib_drivers.drivers.Aviosys package": [[7, "qcodes-contrib-drivers-drivers-aviosys-package"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S module": [[7, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Bilt package": [[8, "qcodes-contrib-drivers-drivers-bilt-package"]], "qcodes_contrib_drivers.drivers.Bilt.ITest module": [[8, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"]], "qcodes_contrib_drivers.drivers.BlueFors package": [[9, "qcodes-contrib-drivers-drivers-bluefors-package"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors module": [[9, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"]], "qcodes_contrib_drivers.drivers.CopperMountain package": [[10, "qcodes-contrib-drivers-drivers-coppermountain-package"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180 module": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048 module": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"]], "qcodes_contrib_drivers.drivers.Cryocon package": [[11, "qcodes-contrib-drivers-drivers-cryocon-package"]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26 module": [[11, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic package": [[12, "qcodes-contrib-drivers-drivers-cryogenic-package"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C module": [[12, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.DaylightSolutions package": [[13, "qcodes-contrib-drivers-drivers-daylightsolutions-package"]], "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat module": [[13, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat"]], "qcodes_contrib_drivers.drivers.ERAInstruments package": [[14, "qcodes-contrib-drivers-drivers-erainstruments-package"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth module": [[14, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave package": [[15, "qcodes-contrib-drivers-drivers-generalmicrowave-package"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349 module": [[15, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"]], "qcodes_contrib_drivers.drivers.Gentec package": [[16, "qcodes-contrib-drivers-drivers-gentec-package"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro module": [[16, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Holzworth package": [[17, "qcodes-contrib-drivers-drivers-holzworth-package"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900 module": [[17, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B module": [[17, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"]], "qcodes_contrib_drivers.drivers.Horiba package": [[18, "qcodes-contrib-drivers-drivers-horiba-package"]], "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR module": [[18, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR"]], "qcodes_contrib_drivers.drivers.Horiba.private package": [[19, "qcodes-contrib-drivers-drivers-horiba-private-package"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client module": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client"]], "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server module": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server"]], "qcodes_contrib_drivers.drivers.Keysight package": [[20, "qcodes-contrib-drivers-drivers-keysight-package"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A module": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D module": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211 module": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A module": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A module": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A module": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common package": [[21, "qcodes-contrib-drivers-drivers-keysight-sd-common-package"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"]], "qcodes_contrib_drivers.drivers.Lakeshore package": [[22, "qcodes-contrib-drivers-drivers-lakeshore-package"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331 module": [[22, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625 module": [[22, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics package": [[23, "qcodes-contrib-drivers-drivers-lighthousephotonics-package"]], "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G module": [[23, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G"]], "qcodes_contrib_drivers.drivers.M2 package": [[24, "qcodes-contrib-drivers-drivers-m2-package"]], "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3 module": [[24, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3"]], "qcodes_contrib_drivers.drivers.MontanaInstruments package": [[25, "qcodes-contrib-drivers-drivers-montanainstruments-package"]], "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation module": [[25, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation"]], "qcodes_contrib_drivers.drivers.NationalInstruments package": [[26, "qcodes-contrib-drivers-drivers-nationalinstruments-package"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597 module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654 module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.visa_types module": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"]], "qcodes_contrib_drivers.drivers.Newport package": [[27, "qcodes-contrib-drivers-drivers-newport-package"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8 module": [[27, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"]], "qcodes_contrib_drivers.drivers.Oxford package": [[28, "qcodes-contrib-drivers-drivers-oxford-package"]], "qcodes_contrib_drivers.drivers.Oxford.ILM200 module": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.ILM200"]], "qcodes_contrib_drivers.drivers.Oxford.IPS120 module": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.IPS120"]], "qcodes_contrib_drivers.drivers.Oxford.Triton module": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.Triton"]], "qcodes_contrib_drivers.drivers.Oxford.kelvinox module": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.kelvinox"]], "qcodes_contrib_drivers.drivers.QDevil package": [[29, "qcodes-contrib-drivers-drivers-qdevil-package"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1 module": [[29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2 module": [[29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array module": [[29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"]], "qcodes_contrib_drivers.drivers.QuTech package": [[30, "qcodes-contrib-drivers-drivers-qutech-package"]], "qcodes_contrib_drivers.drivers.QuTech.D4 module": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.D4"]], "qcodes_contrib_drivers.drivers.QuTech.D5a module": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"]], "qcodes_contrib_drivers.drivers.QuTech.F1d module": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI module": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.M2j module": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"]], "qcodes_contrib_drivers.drivers.QuTech.S5i module": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz package": [[31, "qcodes-contrib-drivers-drivers-rohdeschwarz-package"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13 module": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package": [[32, "qcodes-contrib-drivers-drivers-rohdeschwarz-private-package"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x module": [[32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP module": [[32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"]], "qcodes_contrib_drivers.drivers.Shamrock package": [[33, "qcodes-contrib-drivers-drivers-shamrock-package"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750 module": [[33, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"]], "qcodes_contrib_drivers.drivers.SignalCore package": [[34, "qcodes-contrib-drivers-drivers-signalcore-package"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore module": [[34, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"]], "qcodes_contrib_drivers.drivers.SingleQuantum package": [[35, "qcodes-contrib-drivers-drivers-singlequantum-package"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum module": [[35, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"]], "qcodes_contrib_drivers.drivers.Spectrum package": [[36, "qcodes-contrib-drivers-drivers-spectrum-package"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i module": [[36, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header package": [[37, "qcodes-contrib-drivers-drivers-spectrum-py-header-package"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py module": [[37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs module": [[37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr module": [[37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"]], "qcodes_contrib_drivers.drivers.Standa package": [[38, "qcodes-contrib-drivers-drivers-standa-package"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168 module": [[38, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems package": [[39, "qcodes-contrib-drivers-drivers-stanfordresearchsystems-package"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580 module": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645 module": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928 module": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844 module": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844"]], "qcodes_contrib_drivers.drivers.Tektronix package": [[40, "qcodes-contrib-drivers-drivers-tektronix-package"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000 module": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520 module": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan module": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700 module": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430 module": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500 module": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"]], "qcodes_contrib_drivers.drivers.Thermotek package": [[41, "qcodes-contrib-drivers-drivers-thermotek-package"]], "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p module": [[41, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p"]], "qcodes_contrib_drivers.drivers.Thorlabs package": [[42, "qcodes-contrib-drivers-drivers-thorlabs-package"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1 module": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.KDC101 module": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101"]], "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550 module": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x module": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.PM100D module": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8 module": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.TDC001 module": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001"]], "qcodes_contrib_drivers.drivers.Thorlabs.private package": [[43, "qcodes-contrib-drivers-drivers-thorlabs-private-package"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.APT module": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.CC module": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.LS module": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS"]], "qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis module": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis"]], "qcodes_contrib_drivers.drivers.Vaunix package": [[44, "qcodes-contrib-drivers-drivers-vaunix-package"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA module": [[44, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"]], "qcodes_contrib_drivers.drivers.ZurichInstruments package": [[45, "qcodes-contrib-drivers-drivers-zurichinstruments-package"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI module": [[45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8 module": [[45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "Example with the Agilent N9000A": [[46, "Example-with-the-Agilent-N9000A"]], "Import": [[46, "Import"], [51, "Import"], [58, "Import"]], "Load instrument": [[46, "Load-instrument"], [51, "Load-instrument"], [58, "Load-instrument"], [68, "Load-instrument"]], "Initiallization": [[46, "Initiallization"], [58, "Initiallization"]], "Measurement": [[46, "Measurement"], [58, "Measurement"]], "Example notebook for AimTTi EL320P": [[47, "Example-notebook-for-AimTTi-EL320P"]], "This is the power supply used for the Bluefors 4 K stage warmup heater.": [[47, "This-is-the-power-supply-used-for-the-Bluefors-4-K-stage-warmup-heater."]], "Qcodes example with Andor DU401 BU2": [[48, "Qcodes-example-with-Andor-DU401-BU2"]], "Initialize the instrument": [[48, "Initialize-the-instrument"], [66, "Initialize-the-instrument"], [95, "Initialize-the-instrument"], [103, "Initialize-the-instrument"], [104, "Initialize-the-instrument"], [105, "Initialize-the-instrument"]], "Take a spectrum in the single scan acquisition mode": [[48, "Take-a-spectrum-in-the-single-scan-acquisition-mode"]], "Take a spectrum in the accumulate acquisition mode": [[48, "Take-a-spectrum-in-the-accumulate-acquisition-mode"]], "Take a snapshot": [[48, "Take-a-snapshot"], [66, "Take-a-snapshot"], [95, "Take-a-snapshot"]], "Close the instrument": [[48, "Close-the-instrument"], [62, "Close-the-instrument"], [66, "Close-the-instrument"], [95, "Close-the-instrument"]], "QCoDeS example with Attocube ANC300": [[49, "QCoDeS-example-with-Attocube-ANC300"]], "The test controller is equiped with two ANM150 axis modules": [[49, "The-test-controller-is-equiped-with-two-ANM150-axis-modules"]], "Qcodes example with Aviosys IP Power 9258S": [[50, "Qcodes-example-with-Aviosys-IP-Power-9258S"]], "Initialize instrument": [[50, "Initialize-instrument"], [62, "Initialize-instrument"], [98, "Initialize-instrument"]], "Read the power status": [[50, "Read-the-power-status"]], "Set the power status": [[50, "Set-the-power-status"]], "Turn of all sockets": [[50, "Turn-of-all-sockets"]], "Close instrument": [[50, "Close-instrument"], [54, "Close-instrument"], [103, "Close-instrument"], [104, "Close-instrument"], [105, "Close-instrument"]], "Example with the BlueFors": [[51, "Example-with-the-BlueFors"]], "Example with CopperMountain Model M5180 vector network analyzer": [[52, "Example-with-CopperMountain-Model-M5180-vector-network-analyzer"]], "Connecting to device": [[52, "Connecting-to-device"]], "Setup db and station for test measurerment": [[52, "Setup-db-and-station-for-test-measurerment"]], "Measure a trace": [[52, "Measure-a-trace"]], "Look at the names and the labels of the Sxx parameters": [[52, "Look-at-the-names-and-the-labels-of-the-Sxx-parameters"]], "Example with ERASynth": [[53, "Example-with-ERASynth"]], "Set a frequency and turn on": [[53, "Set-a-frequency-and-turn-on"]], "Run a self test": [[53, "Run-a-self-test"]], "Sweep mode": [[53, "Sweep-mode"]], "Communication performance": [[53, "Communication-performance"]], "QCoDeS Example with Gentec Maestro": [[54, "QCoDeS-Example-with-Gentec-Maestro"]], "Initialize the instrument using its ASRL address": [[54, "Initialize-the-instrument-using-its-ASRL-address"]], "Set the wavelength to get the right calibration": [[54, "Set-the-wavelength-to-get-the-right-calibration"]], "Read the laser power": [[54, "Read-the-laser-power"]], "QCoDeS Example with HP8594E": [[55, "QCoDeS-Example-with-HP8594E"]], "Start, Stop, Center and Span": [[55, "Start,-Stop,-Center-and-Span"]], "More settings": [[55, "More-settings"]], "Transfer type": [[55, "Transfer-type"]], "Example notebook for the Holzworth HS900B RF synthesizer": [[56, "Example-notebook-for-the-Holzworth-HS900B-RF-synthesizer"]], "Example for Horiba FHR": [[57, "Example-for-Horiba-FHR"]], "Example with the iTest from Bilt": [[58, "Example-with-the-iTest-from-Bilt"]], "Set": [[58, "Set"]], "Example notebook for Keithley 6430 SMU": [[59, "Example-notebook-for-Keithley-6430-SMU"]], "Measure resistance of a ~100k\\Omega resistor": [[59, "Measure-resistance-of-a-~100k\\Omega-resistor"]], "Keysight M3202A AWG": [[60, "Keysight-M3202A-AWG"]], "Generate and enqueue waveforms": [[60, "Generate-and-enqueue-waveforms"], [61, "Generate-and-enqueue-waveforms"]], "Trigger AWGs": [[60, "Trigger-AWGs"]], "Keysight M3202A AWG example with digitizer": [[61, "Keysight-M3202A-AWG-example-with-digitizer"]], "configure digitizer to capture signals": [[61, "configure-digitizer-to-capture-signals"]], "Trigger AWGs and digitizer": [[61, "Trigger-AWGs-and-digitizer"]], "Retrieve digitizer data and plot result": [[61, "Retrieve-digitizer-data-and-plot-result"]], "Qcodes example with Lakeshore 311": [[62, "Qcodes-example-with-Lakeshore-311"]], "Read temperatures": [[62, "Read-temperatures"]], "Heater configuration": [[62, "Heater-configuration"]], "Example with Lakeshore Model 625 Superconducting Magnet power supply": [[63, "Example-with-Lakeshore-Model-625-Superconducting-Magnet-power-supply"]], "Check current to field conversion": [[63, "Check-current-to-field-conversion"]], "Let\u2019s have a look at other parameters": [[63, "Let's-have-a-look-at-other-parameters"]], "Field": [[63, "Field"]], "Ramp rate": [[63, "Ramp-rate"]], "Quench detection": [[63, "Quench-detection"]], "National Instruments Multifunction DAQ example": [[64, "National-Instruments-Multifunction-DAQ-example"]], "DAQAnalogInputs": [[64, "DAQAnalogInputs"]], "DAQAnalogOutputs": [[64, "DAQAnalogOutputs"]], "Qcodes example for National Instruments PXIe-2597 RF Switch": [[65, "Qcodes-example-for-National-Instruments-PXIe-2597-RF-Switch"]], "Connect different channels on the switch": [[65, "Connect-different-channels-on-the-switch"]], "Aliasing channel names": [[65, "Aliasing-channel-names"]], "Print a snapshot": [[65, "Print-a-snapshot"]], "Qcodes example with the NI RFSG signal generator driver": [[66, "Qcodes-example-with-the-NI-RFSG-signal-generator-driver"]], "Generate a signal": [[66, "Generate-a-signal"]], "Generate a pulsed signal": [[66, "Generate-a-pulsed-signal"]], "Analog (amplitude / phase / frequency) modulation": [[66, "Analog-(amplitude-/-phase-/-frequency)-modulation"]], "Stop RF generation": [[66, "Stop-RF-generation"]], "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller": [[67, "QCoDeS-Example-with-Newport-AG-UC8-Piezo-Motion-Controller"]], "Example of the oxford triton driver": [[68, "Example-of-the-oxford-triton-driver"]], "Imports": [[68, "Imports"]], "Readout instrument parameters": [[68, "Readout-instrument-parameters"]], "QCoDeS Example with QDevil_QDAC": [[69, "QCoDeS-Example-with-QDevil_QDAC"]], "Initialisation": [[69, "Initialisation"], [102, "Initialisation"]], "Basic QDAC Usage": [[69, "Basic-QDAC-Usage"]], "Setting voltages and reading currents": [[69, "Setting-voltages-and-reading-currents"]], "Smooth ramping between voltages": [[69, "Smooth-ramping-between-voltages"]], "Addressing multiple channels": [[69, "Addressing-multiple-channels"]], "Output a SYNC pulse": [[69, "Output-a-SYNC-pulse"]], "Ramp one or more channels simultaneously": [[69, "Ramp-one-or-more-channels-simultaneously"]], "Ramp a single channel step by step and record and plot the current sensor reading": [[69, "Ramp-a-single-channel-step-by-step-and-record-and-plot-the-current-sensor-reading"]], "2D scan": [[69, "2D-scan"]], "The \u201cmode\u201d parameter: controlling voltage and current ranges:": [[69, "The-%22mode%22-parameter:-controlling-voltage-and-current-ranges:"]], "When \u201cmode\u201d change results in change of voltage range": [[69, "When-%22mode%22-change-results-in-change-of-voltage-range"]], "Overview of channels": [[69, "Overview-of-channels"]], "Temperature sensors": [[69, "Temperature-sensors"]], "Resetting the driver and the QDAC": [[69, "Resetting-the-driver-and-the-QDAC"]], "QCoDeS examples of how to use QDAC-I": [[70, "qcodes-examples-of-how-to-use-qdac-i"]], "QDAC-II arbitrary-waveform generator": [[71, "QDAC-II-arbitrary-waveform-generator"]], "QDAC-II trigger chaining": [[72, "QDAC-II-trigger-chaining"]], "QDAC-II constant voltage": [[73, "QDAC-II-constant-voltage"]], "QDAC-II debugging": [[74, "QDAC-II-debugging"]], "Gate Leakage Test": [[75, "Gate-Leakage-Test"]], "Gate Leakage using multiple QDAC-IIs": [[76, "Gate-Leakage-using-multiple-QDAC-IIs"]], "QDAC-II voltage lists": [[77, "QDAC-II-voltage-lists"]], "QDAC-II multiple generators per channel": [[78, "QDAC-II-multiple-generators-per-channel"]], "PyVisa direct use of QDAC-II": [[79, "PyVisa-direct-use-of-QDAC-II"]], "QDAC-II 1D & 2D scan": [[80, "QDAC-II-1D-&-2D-scan"]], "QDAC-II 2D diode scan": [[81, "QDAC-II-2D-diode-scan"], [88, "QDAC-II-2D-diode-scan"]], "QDAC-II sine waves": [[82, "QDAC-II-sine-waves"]], "QDAC-II square waves": [[83, "QDAC-II-square-waves"]], "QDAC-II voltage sweep": [[84, "QDAC-II-voltage-sweep"]], "Synchronise multiple QDAC-IIs": [[85, "Synchronise-multiple-QDAC-IIs"]], "QDAC-II triangle waves": [[86, "QDAC-II-triangle-waves"]], "QDAC-II virtual gates": [[87, "QDAC-II-virtual-gates"]], "QCoDeS examples of how to use QDAC-II": [[89, "qcodes-examples-of-how-to-use-qdac-ii"]], "QDevil drivers": [[90, "qdevil-drivers"]], "QCoDeS Example with R&S HMC 8043 Power Supply": [[91, "QCoDeS-Example-with-R&S-HMC-8043-Power-Supply"]], "QCoDeS Example with R&S HMP4040 Power Supply": [[92, "QCoDeS-Example-with-R&S-HMP4040-Power-Supply"]], "QCoDeS example with Rohe&Schwarz SMW200A": [[93, "QCoDeS-example-with-Rohe&Schwarz-SMW200A"]], "Changing the Sensitivity": [[94, "Changing-the-Sensitivity"]], "Preparing for reading the buffer and measurement": [[94, "Preparing-for-reading-the-buffer-and-measurement"]], "Measurements using trigger": [[94, "Measurements-using-trigger"]], "Non-buffer measurements": [[94, "Non-buffer-measurements"]], "Qcodes example with Shamrock SR750": [[95, "Qcodes-example-with-Shamrock-SR750"]], "Get the current spectrometer setup": [[95, "Get-the-current-spectrometer-setup"]], "Change spectrometer setup": [[95, "Change-spectrometer-setup"]], "Get spectrometer calibration": [[95, "Get-spectrometer-calibration"]], "Example with the microwave source SC5521A from Signal Core": [[96, "Example-with-the-microwave-source-SC5521A-from-Signal-Core"]], "Device connection": [[96, "Device-connection"]], "Set parameters": [[96, "Set-parameters"], [105, "Set-parameters"]], "Example for Single Quantum SNSPD": [[97, "Example-for-Single-Quantum-SNSPD"]], "Qcodes example with Standa 10MWA168": [[98, "Qcodes-example-with-Standa-10MWA168"]], "Tektronix AFG3000 series arbitrary function generator": [[99, "Tektronix-AFG3000-series-arbitrary-function-generator"]], "Upload an arbitrary waveform to the AFG and output it": [[99, "Upload-an-arbitrary-waveform-to-the-AFG-and-output-it"]], "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500": [[100, "QCoDeS-Example-with-Tektronix-Keithley-Digital-Multimeter-DMM6500"]], "Initialization and Connection": [[100, "Initialization-and-Connection"]], "Performing simple measurements": [[100, "Performing-simple-measurements"]], "Querying the active terminal": [[100, "Querying-the-active-terminal"]], "Using the 2000-SCAN scanning card": [[100, "Using-the-2000-SCAN-scanning-card"]], "Checking the active terminal": [[100, "Checking-the-active-terminal"]], "Qcodes example with Thorlabs K10CR1": [[101, "Qcodes-example-with-Thorlabs-K10CR1"]], "Initialization": [[101, "Initialization"]], "Moving the rotator": [[101, "Moving-the-rotator"]], "Moving home": [[101, "Moving-home"]], "Moving to certain position": [[101, "Moving-to-certain-position"]], "Moving to certain position (asynchronously)": [[101, "Moving-to-certain-position-(asynchronously)"]], "Clean up resources": [[101, "Clean-up-resources"]], "QCoDeS example with Thorlabs KLS1550 laser source": [[102, "QCoDeS-example-with-Thorlabs-KLS1550-laser-source"]], "Turning the laser output on/off": [[102, "Turning-the-laser-output-on/off"]], "Setting the laser output power": [[102, "Setting-the-laser-output-power"]], "Disconnecting": [[102, "Disconnecting"]], "Qcodes example with Thorlabs MFF10x": [[103, "Qcodes-example-with-Thorlabs-MFF10x"]], "Read the current position": [[103, "Read-the-current-position"], [104, "Read-the-current-position"]], "Change the position": [[103, "Change-the-position"], [104, "Change-the-position"]], "Qcodes example with Thorlabs PRM1Z8": [[104, "Qcodes-example-with-Thorlabs-PRM1Z8"]], "Qcodes example for Vaunix LDA step attenuator": [[105, "Qcodes-example-for-Vaunix-LDA-step-attenuator"]], "Save settings": [[105, "Save-settings"]], "Model with many channels": [[105, "Model-with-many-channels"]], "Rohde & Schwarz ZVL13 Vector Network Analyzer example": [[106, "Rohde-&-Schwarz-ZVL13-Vector-Network-Analyzer-example"]], "Instrument and station initialization": [[106, "Instrument-and-station-initialization"]], "Parameters definition": [[106, "Parameters-definition"]], "Trace acquisition in Network Analyzer Mode": [[106, "Trace-acquisition-in-Network-Analyzer-Mode"]], "Plot": [[106, "Plot"], [106, "id1"]], "Trace acquisition in Spectrum Analyzer Mode": [[106, "Trace-acquisition-in-Spectrum-Analyzer-Mode"]], "Zurich Instruments HF2LI example": [[107, "Zurich-Instruments-HF2LI-example"]], "Examples of how to use drivers": [[108, "examples-of-how-to-use-drivers"]], "Welcome to QCoDeS Contributed Drivers\u2019s documentation!": [[109, "welcome-to-qcodes-contributed-drivers-s-documentation"]], "QCoDeS contrib drivers": [[109, "qcodes-contrib-drivers"]], "Default branch is now main": [[109, "default-branch-is-now-main"]], "Getting started": [[109, "getting-started"]], "Prerequisites": [[109, "prerequisites"]], "Installation": [[109, "installation"]], "Drivers documentation": [[109, "drivers-documentation"]], "Contributing": [[109, "contributing"]], "LICENSE": [[109, "license"]], "Contents:": [[109, null]], "Indices and tables": [[109, "indices-and-tables"]]}, "indexentries": {"module": [[0, "module-qcodes_contrib_drivers.drivers"], [0, "module-qcodes_contrib_drivers.drivers.CMTS5048"], [1, "module-qcodes_contrib_drivers.drivers.Advantech"], [1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"], [2, "module-qcodes_contrib_drivers.drivers.Agilent"], [2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"], [4, "module-qcodes_contrib_drivers.drivers.Andor"], [4, "module-qcodes_contrib_drivers.drivers.Andor.DU401"], [5, "module-qcodes_contrib_drivers.drivers.Attocube"], [5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"], [5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"], [5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"], [7, "module-qcodes_contrib_drivers.drivers.Aviosys"], [7, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"], [8, "module-qcodes_contrib_drivers.drivers.Bilt"], [8, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"], [9, "module-qcodes_contrib_drivers.drivers.BlueFors"], [9, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"], [11, "module-qcodes_contrib_drivers.drivers.Cryocon"], [11, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"], [12, "module-qcodes_contrib_drivers.drivers.Cryogenic"], [12, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"], [13, "module-qcodes_contrib_drivers.drivers.DaylightSolutions"], [13, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat"], [14, "module-qcodes_contrib_drivers.drivers.ERAInstruments"], [14, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"], [15, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"], [15, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"], [16, "module-qcodes_contrib_drivers.drivers.Gentec"], [16, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"], [17, "module-qcodes_contrib_drivers.drivers.Holzworth"], [17, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"], [17, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"], [18, "module-qcodes_contrib_drivers.drivers.Horiba"], [18, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR"], [19, "module-qcodes_contrib_drivers.drivers.Horiba.private"], [19, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client"], [19, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server"], [20, "module-qcodes_contrib_drivers.drivers.Keysight"], [20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"], [20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"], [20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"], [20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"], [20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"], [20, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"], [21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"], [21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"], [21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"], [21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"], [21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"], [21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"], [22, "module-qcodes_contrib_drivers.drivers.Lakeshore"], [22, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"], [22, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"], [23, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics"], [23, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G"], [24, "module-qcodes_contrib_drivers.drivers.M2"], [24, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3"], [25, "module-qcodes_contrib_drivers.drivers.MontanaInstruments"], [25, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"], [26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"], [27, "module-qcodes_contrib_drivers.drivers.Newport"], [27, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"], [28, "module-qcodes_contrib_drivers.drivers.Oxford"], [28, "module-qcodes_contrib_drivers.drivers.Oxford.ILM200"], [28, "module-qcodes_contrib_drivers.drivers.Oxford.IPS120"], [28, "module-qcodes_contrib_drivers.drivers.Oxford.Triton"], [28, "module-qcodes_contrib_drivers.drivers.Oxford.kelvinox"], [29, "module-qcodes_contrib_drivers.drivers.QDevil"], [29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"], [29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"], [29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"], [30, "module-qcodes_contrib_drivers.drivers.QuTech"], [30, "module-qcodes_contrib_drivers.drivers.QuTech.D4"], [30, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"], [30, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"], [30, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"], [30, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"], [30, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"], [31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"], [32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"], [32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"], [32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"], [33, "module-qcodes_contrib_drivers.drivers.Shamrock"], [33, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"], [34, "module-qcodes_contrib_drivers.drivers.SignalCore"], [34, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"], [35, "module-qcodes_contrib_drivers.drivers.SingleQuantum"], [35, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"], [36, "module-qcodes_contrib_drivers.drivers.Spectrum"], [36, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"], [37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"], [37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"], [37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"], [37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"], [38, "module-qcodes_contrib_drivers.drivers.Standa"], [38, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"], [39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"], [39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580"], [39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"], [39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"], [39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"], [40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"], [41, "module-qcodes_contrib_drivers.drivers.Thermotek"], [41, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"], [42, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001"], [43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private"], [43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT"], [43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC"], [43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS"], [43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis"], [44, "module-qcodes_contrib_drivers.drivers.Vaunix"], [44, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"], [45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"], [45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"], [45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "qcodes_contrib_drivers.drivers": [[0, "module-qcodes_contrib_drivers.drivers"]], "qcodes_contrib_drivers.drivers.cmts5048": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048"]], "advantech_pcie_1751 (class in qcodes_contrib_drivers.drivers.advantech.pcie_1751)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751"]], "daqnaviexception": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviException"]], "daqnaviwarning": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviWarning"]], "errormsg (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 attribute)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.ERRORMSG"]], "check() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.check"]], "close() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.close"]], "get_idn() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.get_idn"]], "port_count() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.port_count"]], "qcodes_contrib_drivers.drivers.advantech": [[1, "module-qcodes_contrib_drivers.drivers.Advantech"]], "qcodes_contrib_drivers.drivers.advantech.pcie_1751": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"]], "read_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_pin"]], "read_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_port"]], "write_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_pin"]], "write_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_port"]], "agilent_n9000a (class in qcodes_contrib_drivers.drivers.agilent.agilent_n9000a)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A"]], "__init__() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.__init__"]], "power_parser() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.power_parser"]], "qcodes_contrib_drivers.drivers.agilent": [[2, "module-qcodes_contrib_drivers.drivers.Agilent"]], "qcodes_contrib_drivers.drivers.agilent.agilent_n9000a": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"]], "el320p (class in qcodes_contrib_drivers.drivers.aimtti.el320p)": [[3, "qcodes_contrib_drivers.drivers.AimTTi.EL320P.EL320P"]], "qcodes_contrib_drivers.drivers.aimtti": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi"]], "qcodes_contrib_drivers.drivers.aimtti.el320p": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"]], "andor_du401 (class in qcodes_contrib_drivers.drivers.andor.du401)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401"]], "spectrum (class in qcodes_contrib_drivers.drivers.andor.du401)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum"]], "atmcd64d (class in qcodes_contrib_drivers.drivers.andor.du401)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d"]], "close() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.close"]], "cooler_off() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_off"]], "cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_on"]], "dll (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.dll"]], "error_check() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.error_check"]], "firmware_build (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_build"]], "firmware_version (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_version"]], "get_acquired_data() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquired_data"]], "get_acquisition_timings() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquisition_timings"]], "get_camera_handle() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_handle"]], "get_camera_serial_number() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_serial_number"]], "get_detector() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_detector"]], "get_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_filter_mode"]], "get_hardware_version() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_hardware_version"]], "get_head_model() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_head_model"]], "get_idn() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.get_idn"]], "get_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.get_raw"]], "get_status() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_status"]], "get_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature"]], "get_temperature_range() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature_range"]], "head_model (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.head_model"]], "initialize() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.initialize"]], "is_cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.is_cooler_on"]], "qcodes_contrib_drivers.drivers.andor": [[4, "module-qcodes_contrib_drivers.drivers.Andor"]], "qcodes_contrib_drivers.drivers.andor.du401": [[4, "module-qcodes_contrib_drivers.drivers.Andor.DU401"]], "serial_number (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.serial_number"]], "set_accumulation_cycle_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_accumulation_cycle_time"]], "set_acquisition_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_acquisition_mode"]], "set_current_camera() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_current_camera"]], "set_exposure_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_exposure_time"]], "set_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_filter_mode"]], "set_number_accumulations() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_number_accumulations"]], "set_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.set_raw"]], "set_read_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_read_mode"]], "set_shutter() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_shutter"]], "set_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_temperature"]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_trigger_mode"]], "shut_down() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.shut_down"]], "start_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.start_acquisition"]], "verbose (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.verbose"]], "wait_for_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.wait_for_acquisition"]], "x_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.x_pixels"]], "y_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.y_pixels"]], "anc300 (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300"]], "anc350 (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350"]], "anc300axis (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis"]], "anc300triggerout (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut"]], "anc350axis (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis"]], "mockvisa (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa"]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.__init__"]], "ac (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.ac"]], "actuator (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator"]], "actuator_name (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator_name"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.amplitude"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.amplitude"]], "ask() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.ask"]], "ask_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.ask_raw"]], "capacitance (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.capacitance"]], "clear() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.clear"]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.close"]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.close"]], "close() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.close"]], "cmddef (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.cmddef"]], "dc (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.dc"]], "disable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.disable_auto_move"]], "enable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.enable_auto_move"]], "filter (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.filter"]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.frequency"]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.frequency"]], "get_idn() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.get_idn"]], "getall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.getall"]], "mode (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.mode"]], "move (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.move"]], "multiple_steps() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.multiple_steps"]], "offset (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.offset"]], "position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.position"]], "qcodes_contrib_drivers.drivers.attocube": [[5, "module-qcodes_contrib_drivers.drivers.Attocube"]], "qcodes_contrib_drivers.drivers.attocube.anc300": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"]], "qcodes_contrib_drivers.drivers.attocube.anc300sim": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"]], "qcodes_contrib_drivers.drivers.attocube.anc350": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"]], "query() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.query"]], "read() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.read"]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.save_params"]], "set_address() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisa method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa.set_address"]], "single_step() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.single_step"]], "start (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.start"]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.start_continuous_move"]], "state (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.state"]], "status (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.status"]], "stopmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.stopMove"]], "stop_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.stop_continuous_move"]], "stopall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.stopall"]], "target_position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_position"]], "target_range (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_range"]], "triggerdown (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerDown"]], "triggerup (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerUp"]], "version() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.version"]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.voltage"]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.voltage"]], "waitmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.waitMove"]], "write() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.write"]], "write_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.write_raw"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType"]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode"]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType"]], "anc350liberror": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode"]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge"]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge"]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode"]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode"]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode"]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity"]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib"]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib"]], "anc350v3liberror": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError"]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib"]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Amplitude"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Amplitude"]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Coarse"]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Coarse"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.DEFAULT_PATH_TO_DLL"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.DEFAULT_PATH_TO_DLL"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.DEFAULT_PATH_TO_DLL"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.DEFAULT_PATH_TO_DLL"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Disable"]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Falling"]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Falling"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Fps"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Fps"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Fps"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Fps"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Goniometer"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Goniometer"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Goniometer"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Goniometer"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.High"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.High"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.High"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.High"]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.IcHaus"]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.IcHaus"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Linear"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Linear"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Linear"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Linear"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.Low"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.Low"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.Low"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.Low"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Nothing"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Nothing"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Nothing"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Nothing"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Num"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Num"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Num"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Num"]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Position"]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Position"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Quadratur"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Quadratur"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Quadratur"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Quadratur"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Quadrature"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Quadrature"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Quadrature"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Quadrature"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Res"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Res"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Res"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Res"]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Rising"]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Rising"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Rotator"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Rotator"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Rotator"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Rotator"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.SUCCESS_CODES"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.SUCCESS_CODES"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.SUCCESS_CODES"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.SUCCESS_CODES"]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Speed"]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Speed"]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.StepSize"]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.StepSize"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Trigger"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Trigger"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Trigger"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Trigger"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.WARNING_CODES"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.WARNING_CODES"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.WARNING_CODES"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.WARNING_CODES"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.__init__"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.check_error"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.check_error"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.check_error"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.check_error"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.code"]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_in"]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_in"]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_out"]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_out"]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_duty_cycle"]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_duty_cycle"]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_ext_trigger"]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_ext_trigger"]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger"]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger"]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger_axis"]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger_axis"]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger"]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger"]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_eps"]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_eps"]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_pol"]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_pol"]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.connect"]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.connect"]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.disconnect"]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.disconnect"]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.discover"]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.discover"]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_reset"]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_reset"]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_update"]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_update"]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_sensor"]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_sensor"]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_name"]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_name"]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_type"]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_type"]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_amplitude"]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_amplitude"]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_axis_status"]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_axis_status"]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_dc_voltage"]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_dc_voltage"]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_config"]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_config"]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_info"]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_info"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_firmware_version"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_firmware_version"]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_frequency"]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_frequency"]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_lut_name"]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_lut_name"]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_position"]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_position"]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_ref_position"]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_ref_position"]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.load_lut_file"]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.load_lut_file"]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.measure_capacitance"]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.measure_capacitance"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.message"]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.move_reference"]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.move_reference"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.interface": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v3": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v4": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.register_external_ip"]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.register_external_ip"]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.reset_position"]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.reset_position"]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.save_params"]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.save_params"]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.select_actuator"]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.select_actuator"]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_amplitude"]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_amplitude"]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_axis_output"]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_axis_output"]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_dc_voltage"]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_dc_voltage"]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_frequency"]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_frequency"]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.set_target_ground"]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.set_target_ground"]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_position"]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_position"]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_range"]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_range"]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_auto_move"]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_auto_move"]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_continuous_move"]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_continuous_move"]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_single_step"]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_single_step"]], "aviosys_ip_power_9258s (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S"]], "channel_ids (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_IDS"]], "channel_names (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_NAMES"]], "powerchannel (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel"]], "address (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosys_ip_power_9258s attribute)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S.address"]], "get_idn() (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosys_ip_power_9258s method)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S.get_idn"]], "qcodes_contrib_drivers.drivers.aviosys": [[7, "module-qcodes_contrib_drivers.drivers.Aviosys"]], "qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s": [[7, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"]], "itest (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest"]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.__init__"]], "chan_to_ic() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_ic"]], "chan_to_id() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_id"]], "clear_alarm() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.clear_alarm"]], "itestchannel (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel"]], "itestmultichannelparameter (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestMultiChannelParameter"]], "print_dac_voltages() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.print_dac_voltages"]], "qcodes_contrib_drivers.drivers.bilt": [[8, "module-qcodes_contrib_drivers.drivers.Bilt"]], "qcodes_contrib_drivers.drivers.bilt.itest": [[8, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"]], "set_dacs_zero() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.set_dacs_zero"]], "start() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.start"]], "stop() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.stop"]], "bluefors (class in qcodes_contrib_drivers.drivers.bluefors.bluefors)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors"]], "__init__() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.__init__"]], "get_pressure() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_pressure"]], "get_temperature() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_temperature"]], "qcodes_contrib_drivers.drivers.bluefors": [[9, "module-qcodes_contrib_drivers.drivers.BlueFors"]], "qcodes_contrib_drivers.drivers.bluefors.bluefors": [[9, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"]], "cmtintparser() (in module qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTIntParser"]], "cmts5048 (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048"]], "cmts5048trace (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace"]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase"]], "m5180 (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180"]], "pointiq (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ"]], "pointmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase"]], "tracenotready": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.TraceNotReady"]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointiq method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.__init__"]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointiq method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointIQ.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.get_raw"]], "get_s() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.get_s"]], "invalidate_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.invalidate_trace"]], "prepare_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.prepare_trace"]], "qcodes_contrib_drivers.drivers.coppermountain": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain"]], "qcodes_contrib_drivers.drivers.coppermountain.m5180": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"]], "qcodes_contrib_drivers.drivers.coppermountain.s5048": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"]], "reset() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.reset"]], "reset_averages() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.reset_averages"]], "run_n_times() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_N_times"]], "run_continously() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_continously"]], "set_sweep() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.set_sweep"]], "startup() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.startup"]], "update_lin_traces() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.update_lin_traces"]], "cryocon_26 (class in qcodes_contrib_drivers.drivers.cryocon.cryocon_26)": [[11, "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26.Cryocon_26"]], "qcodes_contrib_drivers.drivers.cryocon": [[11, "module-qcodes_contrib_drivers.drivers.Cryocon"]], "qcodes_contrib_drivers.drivers.cryocon.cryocon_26": [[11, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"]], "cryogenicsms120c (class in qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C"]], "default_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_current_ramp_limit"]], "default_max_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_max_current_ramp_limit"]], "get_idn() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.get_idn"]], "qcodes_contrib_drivers.drivers.cryogenic": [[12, "module-qcodes_contrib_drivers.drivers.Cryogenic"]], "qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c": [[12, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"]], "query() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.query"]], "drsdaylightsolutions_mircat (class in qcodes_contrib_drivers.drivers.daylightsolutions.mircat)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat"]], "arm() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.arm"]], "check_tune() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.check_tune"]], "disarm() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.disarm"]], "dll_path (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat attribute)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.dll_path"]], "get_idn() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_idn"]], "get_limits() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_limits"]], "get_pulse_parameters() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_pulse_parameters"]], "get_ranges() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.get_ranges"]], "qcodes_contrib_drivers.drivers.daylightsolutions": [[13, "module-qcodes_contrib_drivers.drivers.DaylightSolutions"]], "qcodes_contrib_drivers.drivers.daylightsolutions.mircat": [[13, "module-qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat"]], "set_pulse_parameters() (qcodes_contrib_drivers.drivers.daylightsolutions.mircat.drsdaylightsolutions_mircat method)": [[13, "qcodes_contrib_drivers.drivers.DaylightSolutions.MIRcat.DRSDaylightSolutions_MIRcat.set_pulse_parameters"]], "erasynth (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth"]], "erasynthbase (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase"]], "erasynthplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus"]], "erasynthplusplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus"]], "__init__() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.__init__"]], "ask() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask"]], "ask_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask_raw"]], "clear_read_buffer() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.clear_read_buffer"]], "current (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.current"]], "debug_messages_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.debug_messages_en"]], "embedded_version (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.embedded_version"]], "esp8266_upload_mode() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.esp8266_upload_mode"]], "factory_reset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.factory_reset"]], "get_configuration() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_configuration"]], "get_diagnostic_status() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_diagnostic_status"]], "get_idn() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_idn"]], "modulation_am_depth (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_am_depth"]], "modulation_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_en"]], "modulation_fm_deviation (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_fm_deviation"]], "modulation_freq (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_freq"]], "modulation_pulse_period (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_period"]], "modulation_pulse_width (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_width"]], "modulation_signal_waveform (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_signal_waveform"]], "modulation_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_source"]], "modulation_type (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_type"]], "off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.off"]], "on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.on"]], "pll_lmx1_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx1_status"]], "pll_lmx2_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx2_status"]], "pll_xtal_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_xtal_status"]], "power (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.power"]], "preset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.preset"]], "print_pyvisa_resources() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase static method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.print_pyvisa_resources"]], "qcodes_contrib_drivers.drivers.erainstruments": [[14, "module-qcodes_contrib_drivers.drivers.ERAInstruments"]], "qcodes_contrib_drivers.drivers.erainstruments.erasynth": [[14, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"]], "ref_osc_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ref_osc_source"]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynth attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth.reference_tcxo_ocxo"]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplus attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus.reference_tcxo_ocxo"]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplusplus attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus.reference_tcxo_ocxo"]], "run_self_test() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.run_self_test"]], "status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.status"]], "sweep_dwell (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_dwell"]], "sweep_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_en"]], "sweep_trigger (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_trigger"]], "synthesizer_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.synthesizer_mode"]], "temperature (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.temperature"]], "voltage (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.voltage"]], "wifi_gateway_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_gateway_address"]], "wifi_hotspot_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_password"]], "wifi_hotspot_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_ssid"]], "wifi_ip_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_ip_address"]], "wifi_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_mode"]], "wifi_off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_off"]], "wifi_on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_on"]], "wifi_rssi (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_rssi"]], "wifi_station_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_password"]], "wifi_station_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_ssid"]], "wifi_subnet_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_subnet_address"]], "write() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write"]], "write_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[14, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write_raw"]], "gm349 (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[15, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349"]], "gm349attenuation (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[15, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation"]], "get_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[15, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.get_raw"]], "pin_map() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349 method)": [[15, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349.pin_map"]], "qcodes_contrib_drivers.drivers.generalmicrowave": [[15, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"]], "qcodes_contrib_drivers.drivers.generalmicrowave.gm349": [[15, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"]], "set_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[15, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.set_raw"]], "gentec_maestro (class in qcodes_contrib_drivers.drivers.gentec.gentec_maestro)": [[16, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro"]], "clear_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[16, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.clear_zero_offset"]], "firmware_version (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[16, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.firmware_version"]], "get_idn() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[16, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.get_idn"]], "model (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[16, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.model"]], "qcodes_contrib_drivers.drivers.gentec": [[16, "module-qcodes_contrib_drivers.drivers.Gentec"]], "qcodes_contrib_drivers.drivers.gentec.gentec_maestro": [[16, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"]], "set_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[16, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.set_zero_offset"]], "hs900 (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900"]], "hs9008b (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B"]], "hs9008bchannel (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel"]], "hs900channel (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900 method)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900channel method)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008bchannel method)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel.__init__"]], "qcodes_contrib_drivers.drivers.holzworth": [[17, "module-qcodes_contrib_drivers.drivers.Holzworth"]], "qcodes_contrib_drivers.drivers.holzworth.hs900": [[17, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"]], "qcodes_contrib_drivers.drivers.holzworth.hs9008b": [[17, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"]], "set_address() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[17, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.set_address"]], "dcchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.DCChannel"]], "dispatcher (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher"]], "gratingchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel"]], "horibafhr (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR"]], "motorchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel"]], "portchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel"]], "precisionmotorchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel"]], "slitchannel (class in qcodes_contrib_drivers.drivers.horiba.horiba_fhr)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel"]], "speerror": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SpeError"]], "close() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.close"]], "close() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.close"]], "disconnect() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.disconnect"]], "error_check() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.dispatcher method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.Dispatcher.error_check"]], "get_id() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.get_id"]], "get_idn() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.horibafhr method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.HoribaFHR.get_idn"]], "init() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.init"]], "is_open() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.is_open"]], "open() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.open"]], "qcodes_contrib_drivers.drivers.horiba": [[18, "module-qcodes_contrib_drivers.drivers.Horiba"]], "qcodes_contrib_drivers.drivers.horiba.horiba_fhr": [[18, "module-qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR"]], "set_baud_rate() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.set_baud_rate"]], "set_id() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.set_id"]], "set_ini_params() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.gratingchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel.set_ini_params"]], "set_setup() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.set_setup"]], "set_timeout() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.portchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PortChannel.set_timeout"]], "stop() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.stop"]], "type() (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.motorchannel class method)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.MotorChannel.type"]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.gratingchannel property)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.GratingChannel.unit"]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.precisionmotorchannel property)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.PrecisionMotorChannel.unit"]], "unit (qcodes_contrib_drivers.drivers.horiba.horiba_fhr.slitchannel property)": [[18, "qcodes_contrib_drivers.drivers.Horiba.Horiba_FHR.SlitChannel.unit"]], "createspe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.CreateSpe"]], "createspe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.CreateSpe"]], "deletespe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.DeleteSpe"]], "deletespe() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.DeleteSpe"]], "fhrclient (class in qcodes_contrib_drivers.drivers.horiba.private.fhr_client)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient"]], "fhrserver (class in qcodes_contrib_drivers.drivers.horiba.private.fhr_server)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer"]], "specommand() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommand"]], "specommand() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommand"]], "specommandiniparams() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommandIniParams"]], "specommandiniparams() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommandIniParams"]], "specommandsetup() (qcodes_contrib_drivers.drivers.horiba.private.fhr_client.fhrclient method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_client.FHRClient.SpeCommandSetup"]], "specommandsetup() (qcodes_contrib_drivers.drivers.horiba.private.fhr_server.fhrserver method)": [[19, "qcodes_contrib_drivers.drivers.Horiba.private.fhr_server.FHRServer.SpeCommandSetup"]], "qcodes_contrib_drivers.drivers.horiba.private": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.private"]], "qcodes_contrib_drivers.drivers.horiba.private.fhr_client": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_client"]], "qcodes_contrib_drivers.drivers.horiba.private.fhr_server": [[19, "module-qcodes_contrib_drivers.drivers.Horiba.private.fhr_server"]], "e36313a (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A"]], "e36313achannel (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel"]], "keysight_e8267d (class in qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D"]], "keysight_j7211 (class in qcodes_contrib_drivers.drivers.keysight.keysight_j7211)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211.Keysight_J7211"]], "keysight_m3201a (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3201a)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A.Keysight_M3201A"]], "m3202a (class in qcodes_contrib_drivers.drivers.keysight.m3202a)": [[20, "qcodes_contrib_drivers.drivers.Keysight.M3202A.M3202A"]], "m3300a_awg (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_AWG"]], "m3300a_dig (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_DIG"]], "__init__() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313achannel method)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel.__init__"]], "deg_to_rad() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.deg_to_rad"]], "get_idn() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313a method)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A.get_idn"]], "off() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.off"]], "on() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.on"]], "parse_on_off() (in module qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.parse_on_off"]], "qcodes_contrib_drivers.drivers.keysight": [[20, "module-qcodes_contrib_drivers.drivers.Keysight"]], "qcodes_contrib_drivers.drivers.keysight.keysight_e36313a": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"]], "qcodes_contrib_drivers.drivers.keysight.keysight_e8267d": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"]], "qcodes_contrib_drivers.drivers.keysight.keysight_j7211": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3201a": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3300a": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"]], "qcodes_contrib_drivers.drivers.keysight.m3202a": [[20, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"]], "rad_to_deg() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[20, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.rad_to_deg"]], "memorymanager (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager"]], "memorymanager.allocatedslot (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot"]], "sd_awg (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG"]], "sd_awg_async (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async"]], "sd_dig (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG"]], "sd_module (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module"]], "task (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task"]], "waveformreference (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference"]], "__init__() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.__init__"]], "allocate() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocate"]], "allocation_ref (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.allocation_ref"]], "allocation_state() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocation_state"]], "asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.asynchronous"]], "awg_config_external_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_config_external_trigger"]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_flush"]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_flush"]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_array"]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_array"]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_file"]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_file"]], "awg_is_running() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_is_running"]], "awg_jump_next_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_jump_next_waveform"]], "awg_name (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.awg_name"]], "awg_pause() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause"]], "awg_pause_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause_multiple"]], "awg_queue_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_config"]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_waveform"]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_queue_waveform"]], "awg_resume() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume"]], "awg_resume_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume_multiple"]], "awg_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start"]], "awg_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start_multiple"]], "awg_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop"]], "awg_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop_multiple"]], "awg_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger"]], "awg_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger_multiple"]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.close"]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close"]], "close_soft() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close_soft"]], "config_amplitude_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_amplitude_modulation"]], "config_angle_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_angle_modulation"]], "config_clock_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_clock_io"]], "config_fpga_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_fpga_trigger"]], "config_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_trigger_io"]], "convert_prescaler_to_sample_rate() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_prescaler_to_sample_rate"]], "convert_sample_rate_to_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_sample_rate_to_prescaler"]], "daq_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush"]], "daq_flush_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush_multiple"]], "daq_read() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_read"]], "daq_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start"]], "daq_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start_multiple"]], "daq_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop"]], "daq_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop_multiple"]], "daq_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger"]], "daq_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger_multiple"]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.flush_waveform"]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.flush_waveform"]], "get_chassis() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_chassis"]], "get_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_frequency"]], "get_clock_sync_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_sync_frequency"]], "get_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_coupling"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_firmware_version"]], "get_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_fpga_pc_port"]], "get_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_full_scale"]], "get_hardware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hardware_version"]], "get_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hvi_register"]], "get_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_impedance"]], "get_module_count() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_module_count"]], "get_open() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_open"]], "get_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_prescaler"]], "get_product_name() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name"]], "get_product_name_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_index"]], "get_product_name_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_slot"]], "get_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_pxi_trigger"]], "get_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number"]], "get_serial_number_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_index"]], "get_serial_number_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_slot"]], "get_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_slot"]], "get_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_status"]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_trigger_io"]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_io"]], "get_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_mode"]], "get_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_threshold"]], "get_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type"]], "get_type_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_index"]], "get_type_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_slot"]], "get_uninitialized_slots() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.get_uninitialized_slots"]], "get_waveform_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_status"]], "get_waveform_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_type"]], "is_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.is_uploaded"]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_fpga_image"]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.load_fpga_image"]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform"]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform"]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform_int16"]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform_int16"]], "mem_usage() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.mem_usage"]], "memory_manager (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.memory_manager"]], "memory_sizes (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.memory_sizes"]], "new_waveform_from_double() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_double"]], "new_waveform_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_file"]], "new_waveform_from_int() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_int"]], "number (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.number"]], "off() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.off"]], "open_with_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_serial_number"]], "open_with_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_slot"]], "qcodes_contrib_drivers.drivers.keysight.sd_common": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager": [[21, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"]], "read_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga"]], "read_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga_array"]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.release"]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.release"]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.release"]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform"]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform"]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform_int16"]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform_int16"]], "reset_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_channel_phase"]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_clock_phase"]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.reset_clock_phase"]], "reset_multiple_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_multiple_channel_phase"]], "result (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task property)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.result"]], "result_parser() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.result_parser"]], "run() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.run"]], "run_self_test() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.run_self_test"]], "set_analog_trigger_mask() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_analog_trigger_mask"]], "set_asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_asynchronous"]], "set_channel_amplitude() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_amplitude"]], "set_channel_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_frequency"]], "set_channel_offset() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_offset"]], "set_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_phase"]], "set_channel_wave_shape() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_wave_shape"]], "set_clksys_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig static method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_clksys_frequency"]], "set_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_clock_frequency"]], "set_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_coupling"]], "set_daq_trigger_delay() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_delay"]], "set_daq_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_mode"]], "set_digital_filter_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_digital_filter_mode"]], "set_digital_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_mode"]], "set_digital_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_source"]], "set_ext_trigger_behaviour() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_behaviour"]], "set_ext_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_source"]], "set_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_fpga_pc_port"]], "set_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_full_scale"]], "set_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_hvi_register"]], "set_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_impedance"]], "set_iq_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_iq_modulation"]], "set_marker_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_marker_config"]], "set_n_cycles() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_cycles"]], "set_n_points() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_points"]], "set_points_per_cycle() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_points_per_cycle"]], "set_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_prescaler"]], "set_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_pxi_trigger"]], "set_timeout() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_timeout"]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_trigger_io"]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_io"]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_mode"]], "set_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_threshold"]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_waveform_limit"]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.set_waveform_limit"]], "switchable() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.switchable"]], "threaded() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.threaded"]], "upload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.upload_waveform"]], "uploader_ready() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.uploader_ready"]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task attribute)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.verbose"]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.verbose"]], "wait_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wait_uploaded"]], "wave_number (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wave_number"]], "write_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga"]], "write_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[21, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga_array"]], "lakeshore625 (class in qcodes_contrib_drivers.drivers.lakeshore.model_625)": [[22, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625"]], "model_331 (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[22, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.Model_331"]], "sensorchannel (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[22, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel"]], "channel (qcodes_contrib_drivers.drivers.lakeshore.model_331.sensorchannel attribute)": [[22, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel.channel"]], "qcodes_contrib_drivers.drivers.lakeshore": [[22, "module-qcodes_contrib_drivers.drivers.Lakeshore"]], "qcodes_contrib_drivers.drivers.lakeshore.model_331": [[22, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"]], "qcodes_contrib_drivers.drivers.lakeshore.model_625": [[22, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"]], "set_field() (qcodes_contrib_drivers.drivers.lakeshore.model_625.lakeshore625 method)": [[22, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625.set_field"]], "lighthousephotonicssproutg (class in qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG"]], "ask() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.ask"]], "device_info (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.device_info"]], "enabled (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.enabled"]], "get_idn() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.get_idn"]], "output_mode (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_mode"]], "output_power (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_power"]], "output_setpoint (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.output_setpoint"]], "qcodes_contrib_drivers.drivers.lighthousephotonics": [[23, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics"]], "qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g": [[23, "module-qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G"]], "ramp_up() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.ramp_up"]], "status (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.status"]], "work_hours (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg attribute)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.work_hours"]], "write() (qcodes_contrib_drivers.drivers.lighthousephotonics.lighthouse_photonics_sprout_g.lighthousephotonicssproutg method)": [[23, "qcodes_contrib_drivers.drivers.LighthousePhotonics.Lighthouse_Photonics_Sprout_G.LighthousePhotonicsSproutG.write"]], "m2solstis3 (class in qcodes_contrib_drivers.drivers.m2.m2_solstis_3)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3"]], "get_status() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.get_status"]], "poll_move_wave_t() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.poll_move_wave_t"]], "poll_wave_m() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.poll_wave_m"]], "qcodes_contrib_drivers.drivers.m2": [[24, "module-qcodes_contrib_drivers.drivers.M2"]], "qcodes_contrib_drivers.drivers.m2.m2_solstis_3": [[24, "module-qcodes_contrib_drivers.drivers.M2.M2_Solstis_3"]], "send_message() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.send_message"]], "snapshot_base() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.snapshot_base"]], "stop_move_wave_t() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.stop_move_wave_t"]], "stop_wave_m() (qcodes_contrib_drivers.drivers.m2.m2_solstis_3.m2solstis3 method)": [[24, "qcodes_contrib_drivers.drivers.M2.M2_Solstis_3.M2Solstis3.stop_wave_m"]], "montanainstruments_cryostation (class in qcodes_contrib_drivers.drivers.montanainstruments.cryostation)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation"]], "get_idn() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.get_idn"]], "qcodes_contrib_drivers.drivers.montanainstruments": [[25, "module-qcodes_contrib_drivers.drivers.MontanaInstruments"]], "qcodes_contrib_drivers.drivers.montanainstruments.cryostation": [[25, "module-qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation"]], "set_temp_and_wait() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.set_temp_and_wait"]], "standby() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.standby"]], "start_cooldown() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.start_cooldown"]], "start_warmup() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.start_warmup"]], "stop_automation() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.stop_automation"]], "wait_stability() (qcodes_contrib_drivers.drivers.montanainstruments.cryostation.montanainstruments_cryostation method)": [[25, "qcodes_contrib_drivers.drivers.MontanaInstruments.cryostation.MontanaInstruments_Cryostation.wait_stability"]], "attributewrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper"]], "daqanaloginputvoltages (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages"]], "daqanaloginputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputs"]], "daqanalogoutputvoltage (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage"]], "daqanalogoutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputs"]], "daqdigitaloutputstate (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState"]], "daqdigitaloutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputs"]], "nidllinstrument (class in qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument"]], "nidllwrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper"]], "ni_pxie_2597 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597.NI_PXIe_2597"]], "ni_pxie_5654 (in module qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NI_PXIe_5654"]], "ni_rfsg (in module qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NI_RFSG"]], "ni_switch (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch"]], "namedargtype (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType"]], "nationalinstruments_pxie_5654 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NationalInstruments_PXIe_5654"]], "nationalinstruments_rfsg (class in qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG"]], "switchchannel (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel"]], "abort() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.abort"]], "argtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.argtype"]], "c_str() (in module qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.c_str"]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.close"]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.close"]], "connect_to() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.connect_to"]], "disconnect_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.disconnect_all"]], "disconnect_from() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from"]], "disconnect_from_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from_all"]], "dll_path (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg attribute)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.dll_path"]], "dtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.dtype"]], "error_message() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.error_message"]], "firmware (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.firmware"]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.get_attribute"]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.get_attribute"]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.get_idn"]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanaloginputvoltages method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.get_raw"]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.init"]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.init"]], "initiate() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.initiate"]], "model (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.model"]], "name (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.name"]], "qcodes_contrib_drivers.drivers.nationalinstruments": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments"]], "qcodes_contrib_drivers.drivers.nationalinstruments.daq": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"]], "qcodes_contrib_drivers.drivers.nationalinstruments.rfsg": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"]], "qcodes_contrib_drivers.drivers.nationalinstruments.switch": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"]], "qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"]], "qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"]], "qcodes_contrib_drivers.drivers.nationalinstruments.visa_types": [[26, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"]], "reset() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.reset"]], "serial (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.serial"]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.set_attribute"]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.set_attribute"]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.set_raw"]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqdigitaloutputstate method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState.set_raw"]], "value (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.value"]], "vendor (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.vendor"]], "wrap_dll_function() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function"]], "wrap_dll_function_checked() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[26, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function_checked"]], "newport_ag_uc8 (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8"]], "newport_ag_uc8_axis (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis"]], "newport_ag_uc8_channel (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel"]], "newport_ag_uc8_errorcode": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_ErrorCode"]], "newport_ag_uc8_exception": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Exception"]], "speed_table (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis attribute)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.SPEED_TABLE"]], "ask() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.ask"]], "ask_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.ask_channel"]], "command_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.command_delay"]], "default_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.default_timeout"]], "get_idn() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_idn"]], "get_last_error() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_last_error"]], "jog() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.jog"]], "measure_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.measure_position"]], "move_abs() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_abs"]], "move_limit() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_limit"]], "move_rel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_rel"]], "qcodes_contrib_drivers.drivers.newport": [[27, "module-qcodes_contrib_drivers.drivers.Newport"]], "qcodes_contrib_drivers.drivers.newport.ag_uc8": [[27, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"]], "reset() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset"]], "reset_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset_delay"]], "slow_command_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.slow_command_timeout"]], "stop() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.stop"]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write"]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.write"]], "write_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write_channel"]], "zero_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[27, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.zero_position"]], "oxfordinstruments_ilm200 (class in qcodes_contrib_drivers.drivers.oxford.ilm200)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200"]], "oxfordinstruments_ips120 (class in qcodes_contrib_drivers.drivers.oxford.ips120)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120"]], "oxfordinstruments_kelvinox_igh (class in qcodes_contrib_drivers.drivers.oxford.kelvinox)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH"]], "triton (class in qcodes_contrib_drivers.drivers.oxford.triton)": [[28, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.__init__"]], "close() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.close"]], "close() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.close"]], "close() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.close"]], "examine() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.examine"]], "get_all() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.get_all"]], "get_all() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.get_all"]], "get_all() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.get_all"]], "get_idn() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.get_idn"]], "get_pressure() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.get_pressure"]], "get_temperature() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.get_temperature"]], "heater_off() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.heater_off"]], "heater_on() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.heater_on"]], "hold() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.hold"]], "identify() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.identify"]], "identify() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.identify"]], "leave_persistent_mode() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.leave_persistent_mode"]], "local() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.local"]], "local() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.local"]], "local() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.local"]], "qcodes_contrib_drivers.drivers.oxford": [[28, "module-qcodes_contrib_drivers.drivers.Oxford"]], "qcodes_contrib_drivers.drivers.oxford.ilm200": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.ILM200"]], "qcodes_contrib_drivers.drivers.oxford.ips120": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.IPS120"]], "qcodes_contrib_drivers.drivers.oxford.triton": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.Triton"]], "qcodes_contrib_drivers.drivers.oxford.kelvinox": [[28, "module-qcodes_contrib_drivers.drivers.Oxford.kelvinox"]], "remote() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.remote"]], "remote() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.remote"]], "remote() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.remote"]], "rotate_nvalve() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.rotate_Nvalve"]], "run_to_field() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.run_to_field"]], "run_to_field_wait() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.run_to_field_wait"]], "set_mix_chamber_heater_mode() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_mode"]], "set_mix_chamber_heater_power_range() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_power_range"]], "set_persistent() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.set_persistent"]], "set_remote_status() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.set_remote_status"]], "set_to_fast() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.set_to_fast"]], "set_to_slow() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.set_to_slow"]], "to_setpoint() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.to_setpoint"]], "to_zero() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.to_zero"]], "vcl2csv() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[28, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.vcl2csv"]], "arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context"]], "array_arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context"]], "awg_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context"]], "generator (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Generator"]], "list_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context"]], "measurement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context"]], "mode (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode"]], "qdac (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac"]], "qdac2 (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2"]], "qdac2channel (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel"]], "qdac2externaltrigger (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2ExternalTrigger"]], "qdac2trigger_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context"]], "qdac2_array (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array"]], "qdacchannel (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel"]], "qdacmultichannelparameter (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter"]], "sine_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context"]], "square_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context"]], "sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context"]], "trace_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context"]], "triangle_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context"]], "virtual_sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context"]], "waveform (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform"]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.__init__"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.abort"]], "actual_values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.actual_values_V"]], "actual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.actual_voltages"]], "add_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.add_correction"]], "all_waveforms (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.all_waveforms"]], "allocate_trace() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trace"]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trigger"]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.allocate_trigger"]], "append() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.append"]], "arbitrary_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.arbitrary_wave"]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.arrange"]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.arrange"]], "ask() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.ask"]], "ask_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.ask_channel"]], "available_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.available_A"]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel"]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.channel"]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.channel"]], "channel_numbers (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel_numbers"]], "clear() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear"]], "clear_measurements() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.clear_measurements"]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.clear_read_queue"]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear_read_queue"]], "comma_sequence_to_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list"]], "comma_sequence_to_list_of_floats() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list_of_floats"]], "common_trigger_in (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.common_trigger_in"]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.connect_external_trigger"]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.connect_external_trigger"]], "connect_message() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.connect_message"]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.contact_names"]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.contact_names"]], "controller (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.controller"]], "correction_matrix (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.correction_matrix"]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.currents_A"]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.currents_A"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.cycles_remaining"]], "dc_list() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_list"]], "dc_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_sweep"]], "diff_matrix() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.diff_matrix"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.end_marker"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.end_marker"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.end_marker"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.end_marker"]], "error() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.error"]], "errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.errors"]], "floats_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.floats_to_comma_separated_list"]], "forward_and_back() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.forward_and_back"]], "free_all_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_all_triggers"]], "free_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_trigger"]], "get_label() (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.get_label"]], "get_raw() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacmultichannelparameter method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter.get_raw"]], "get_recorded_scpi_commands() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.get_recorded_scpi_commands"]], "get_trigger_by_name() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.get_trigger_by_name"]], "initiate_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.initiate_correction"]], "ints_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.ints_to_comma_separated_list"]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.leakage"]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.leakage"]], "mac() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.mac"]], "max_status_age (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.max_status_age"]], "measurement() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.measurement"]], "n_available() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_available"]], "n_channels() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_channels"]], "n_cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_cycles_remaining"]], "n_errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_errors"]], "n_external_inputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_inputs"]], "n_external_outputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_outputs"]], "n_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_triggers"]], "name (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.name"]], "names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.names"]], "number (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.number"]], "output_mode() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.output_mode"]], "peek_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.peek_A"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_end_marker"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_end_marker"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_end_marker"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_end_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_start_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_start_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_start_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_start_marker"]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.points"]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.points"]], "print_overview() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_overview"]], "print_slopes() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_slopes"]], "print_syncs() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_syncs"]], "qcodes_contrib_drivers.drivers.qdevil": [[29, "module-qcodes_contrib_drivers.drivers.QDevil"]], "qcodes_contrib_drivers.drivers.qdevil.qdac1": [[29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"]], "qcodes_contrib_drivers.drivers.qdevil.qdac2": [[29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"]], "qcodes_contrib_drivers.drivers.qdevil.qdac2_array": [[29, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"]], "qdac_names() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.qdac_names"]], "ramp_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages"]], "ramp_voltages_2d() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages_2d"]], "read() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.read"]], "remove_traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.remove_traces"]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.reset"]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.reset"]], "set_virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltage"]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltages"]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.set_virtual_voltages"]], "shape (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.shape"]], "sine (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.sine"]], "sine_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.sine_wave"]], "size (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.size"]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.snapshot_base"]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.snapshot_base"]], "split_version_string_into_components() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.split_version_string_into_components"]], "square (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.square"]], "square_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.square_wave"]], "staircase (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.staircase"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.start"]], "start_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start_V"]], "start_all() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_all"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_marker"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_marker"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_marker"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_marker"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on_external"]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_once_on"]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_once_on"]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_once_on"]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_once_on"]], "start_once_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_once_on"]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_once_on_external"]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_once_on_external"]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_once_on_external"]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_once_on_external"]], "start_once_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_once_on_external"]], "start_recording_scpi() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_recording_scpi"]], "stop_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.stop_V"]], "sync() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.sync"]], "time_s() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.time_s"]], "traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.traces"]], "triangle (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.triangle"]], "triangle_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.triangle_wave"]], "trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger"]], "trigger_out (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger_out"]], "value (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2trigger_context property)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context.value"]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.values_V"]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.values_V"]], "vhigh_ihigh (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ihigh"]], "vhigh_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ilow"]], "virtual_detune() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_detune"]], "virtual_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep"]], "virtual_sweep2d() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep2d"]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_voltage"]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.virtual_voltage"]], "vlow_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vlow_ilow"]], "waveform() (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.waveform"]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.write"]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write"]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write"]], "write_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel"]], "write_channel_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel_floats"]], "write_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[29, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write_floats"]], "d4 (class in qcodes_contrib_drivers.drivers.qutech.d4)": [[30, "qcodes_contrib_drivers.drivers.QuTech.D4.D4"]], "d5a (class in qcodes_contrib_drivers.drivers.qutech.d5a)": [[30, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a"]], "f1d (class in qcodes_contrib_drivers.drivers.qutech.f1d)": [[30, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d"]], "ivvi (class in qcodes_contrib_drivers.drivers.qutech.ivvi)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI"]], "m2j (class in qcodes_contrib_drivers.drivers.qutech.m2j)": [[30, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j"]], "s5i (class in qcodes_contrib_drivers.drivers.qutech.s5i)": [[30, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i"]], "__init__() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qutech.m2j.m2j method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j.__init__"]], "adjust_parameter_validator() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.adjust_parameter_validator"]], "ask() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.ask"]], "dac_quata (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.dac_quata"]], "full_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.full_range"]], "get_all() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_all"]], "get_buffers_enabled() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_buffers_enabled"]], "get_filter_value() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_filter_value"]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_idn"]], "get_mode() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_mode"]], "get_pol_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_pol_dac"]], "get_remote_settings() (qcodes_contrib_drivers.drivers.qutech.f1d.f1d method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d.get_remote_settings"]], "half_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.half_range"]], "linspace() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.linspace"]], "optimize_for_frequency() (qcodes_contrib_drivers.drivers.qutech.s5i.s5i method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i.optimize_for_frequency"]], "qcodes_contrib_drivers.drivers.qutech": [[30, "module-qcodes_contrib_drivers.drivers.QuTech"]], "qcodes_contrib_drivers.drivers.qutech.d4": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.D4"]], "qcodes_contrib_drivers.drivers.qutech.d5a": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"]], "qcodes_contrib_drivers.drivers.qutech.f1d": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"]], "qcodes_contrib_drivers.drivers.qutech.ivvi": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"]], "qcodes_contrib_drivers.drivers.qutech.m2j": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"]], "qcodes_contrib_drivers.drivers.qutech.s5i": [[30, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"]], "read() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.read"]], "resolution (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.resolution"]], "round_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.round_dac"]], "set_dac_unit() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.set_dac_unit"]], "set_dacs_zero() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_dacs_zero"]], "set_parameter_bounds() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_parameter_bounds"]], "set_pol_dacrack() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_pol_dacrack"]], "write() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[30, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.write"]], "amplitudemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation"]], "complexsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep"]], "frequencymodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation"]], "frequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep"]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase"]], "iqchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel"]], "iqmodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation"]], "lfoutputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel"]], "lfoutputsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep"]], "mockvisa (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa"]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle"]], "outputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel"]], "outputfrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep"]], "outputlevelsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep"]], "phasemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation"]], "pulsegenerator (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator"]], "pulsemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation"]], "rohdeschwarzhmc8041 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041.RohdeSchwarzHMC8041"]], "rohdeschwarzhmc8042 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042.RohdeSchwarzHMC8042"]], "rohdeschwarzhmc8043 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043.RohdeSchwarzHMC8043"]], "rohdeschwarzhmp4030 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030.RohdeSchwarzHMP4030"]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020.RohdeSchwarzHMP4040"]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030.RohdeSchwarzHMP4040"]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040.RohdeSchwarzHMP4040"]], "rohdeschwarz_smb100a (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A"]], "rohdeschwarz_smr40 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smr40)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40"]], "rohdeschwarz_smw200a (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A"]], "safrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep"]], "zvl13 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.__init__"]], "ask() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.ask"]], "attenuator (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.attenuator"]], "bandwidth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.bandwidth"]], "calibration() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.calibration"]], "clear() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.clear"]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.close"]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.close"]], "cmddef (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.cmddef"]], "coupling (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.coupling"]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.coupling_mode"]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.coupling_mode"]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.coupling_mode"]], "crest_factor (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.crest_factor"]], "delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.delay"]], "depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.depth"]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation"]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.deviation"]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.deviation_ratio"]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation_ratio"]], "do_get_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_frequency"]], "do_get_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_power"]], "do_get_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_pulse_delay"]], "do_get_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status"]], "do_get_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_ALC"]], "do_get_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_modulation"]], "do_set_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_frequency"]], "do_set_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_power"]], "do_set_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_pulse_delay"]], "do_set_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status"]], "do_set_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_ALC"]], "do_set_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_modulation"]], "double_delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_delay"]], "double_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_width"]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.dwell"]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.dwell"]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.dwell"]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.execute"]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.execute"]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.execute"]], "freq_manual (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_manual"]], "freq_max (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_max"]], "freq_min (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_min"]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.frequency"]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.frequency"]], "gain (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.gain"]], "gen_trigger_pulse() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.gen_trigger_pulse"]], "get_all() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.get_all"]], "get_error() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_error"]], "get_id() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_id"]], "get_options() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_options"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.get_raw"]], "getall() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.getall"]], "i_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_bias"]], "i_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_offset"]], "impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.impedance"]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.level"]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.level"]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.lin_step"]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.lin_step"]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.log_step"]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.log_step"]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.log_step"]], "losc_input (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_input"]], "losc_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_mode"]], "losc_output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_output"]], "losc_state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_state"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.mode"]], "na_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.na_mode"]], "off() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.off"]], "off() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off"]], "off_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off_modulation"]], "offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.offset"]], "on() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.on"]], "on() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on"]], "on_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on_modulation"]], "output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.output"]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.period"]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.period"]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.points"]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.points"]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.points"]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.polarity"]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.polarity"]], "q_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_bias"]], "q_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_offset"]], "qcodes_contrib_drivers.drivers.rohdeschwarz": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smr40": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13": [[31, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"]], "query() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.query"]], "ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.ratio"]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.reset"]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.reset"]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.reset"]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.reset"]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.reset"]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.reset"]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.retrace"]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.retrace"]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.retrace"]], "run_self_tests() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.run_self_tests"]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.running"]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.running"]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.running"]], "sa_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.sa_mode"]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.sensitivity"]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.sensitivity"]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.sensitivity"]], "set_address() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisa method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa.set_address"]], "set_ext_trig() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.set_ext_trig"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.set_sweep"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.set_sweep"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.set_sweep"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.set_sweep"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.shape"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.shape"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.shape"]], "shape_duty_cycle (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_duty_cycle"]], "shape_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_period"]], "shape_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_width"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.source"]], "source_path (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source_path"]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.spacing"]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.spacing"]], "start_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.smb100a.rohdeschwarz_smb100a method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMB100A.RohdeSchwarz_SMB100A.start_sweep"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.state"]], "swap (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.swap"]], "sweep_center (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_center"]], "sweep_span (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_span"]], "sweep_start (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_start"]], "sweep_stop (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_stop"]], "total_depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.total_depth"]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.total_deviation"]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.total_deviation"]], "transition_type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.transition_type"]], "trapez_fall (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_fall"]], "trapez_height (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_height"]], "trapez_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_period"]], "trapez_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_rise"]], "triangle_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_period"]], "triangle_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_rise"]], "trigger_impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_impedance"]], "trigger_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_mode"]], "type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.type"]], "update_traces() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.update_traces"]], "video_polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.video_polarity"]], "voltage (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.voltage"]], "wideband (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.wideband"]], "width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.width"]], "write() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[31, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.write"]], "rohdeschwarzhmc804xchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x)": [[32, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x.RohdeSchwarzHMC804xChannel"]], "rohdeschwarzhmpchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp)": [[32, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel"]], "get_max_current() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[32, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.get_max_current"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private": [[32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x": [[32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp": [[32, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"]], "send_cmd() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[32, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.send_cmd"]], "shamrockcif (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF"]], "shamrockcif (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.ShamrockCIF"]], "shamrock_sr750 (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750"]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.close"]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.close"]], "device_id (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.device_id"]], "dll (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.dll"]], "error_check() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.error_check"]], "get_calibration() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_calibration"]], "get_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating"]], "get_grating_info() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating_info"]], "get_idn() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.get_idn"]], "get_number_devices() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_devices"]], "get_number_gratings() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_gratings"]], "get_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_pixels"]], "get_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_pixel_width"]], "get_serial_number() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_serial_number"]], "get_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_slit"]], "get_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength"]], "get_wavelength_limits() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength_limits"]], "initialize() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.initialize"]], "number_gratings (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.number_gratings"]], "qcodes_contrib_drivers.drivers.shamrock": [[33, "module-qcodes_contrib_drivers.drivers.Shamrock"]], "qcodes_contrib_drivers.drivers.shamrock.sr750": [[33, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"]], "serial_number (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.serial_number"]], "set_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_grating"]], "set_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_number_pixels"]], "set_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_pixel_width"]], "set_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_slit"]], "set_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_wavelength"]], "verbose (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[33, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.verbose"]], "deviceinfot (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT"]], "devicerfparamst (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT"]], "devicestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT"]], "hwtriggert (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT"]], "listmodet (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT"]], "mandate (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate"]], "operatestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT"]], "pllstatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT"]], "sc5521a (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A"]], "__init__() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.__init__"]], "atten_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.atten_value"]], "auto_pwr_disable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.auto_pwr_disable"]], "buffer_points (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.buffer_points"]], "crs_aux_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_aux_pll_ld"]], "crs_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_pll_ld"]], "crs_ref_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_ref_pll_ld"]], "day (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.day"]], "device_access (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_access"]], "device_interfaces (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.device_interfaces"]], "device_standby (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_standby"]], "edge (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.edge"]], "ext_ref_detect (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_detect"]], "ext_ref_lock_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_lock_enable"]], "fine_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.fine_pll_ld"]], "firmware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.firmware_revision"]], "frequency (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.frequency"]], "get_idn() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.get_idn"]], "hardware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.hardware_revision"]], "harmonic_ss (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.harmonic_ss"]], "hour (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.hour"]], "hw_trigger (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.hw_trigger"]], "level_dac_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.level_dac_value"]], "list_mode_running (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.list_mode_running"]], "list_mode_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.list_mode_t"]], "man_date (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.man_date"]], "month (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.month"]], "operate_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.operate_status_t"]], "output_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.output_enable"]], "over_temp (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.over_temp"]], "pci_clk_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.pci_clk_enable"]], "pll_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.pll_status_t"]], "power_level (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.power_level"]], "product_serial_number (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.product_serial_number"]], "pxi_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_enable"]], "pxi_line (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_line"]], "qcodes_contrib_drivers.drivers.signalcore": [[34, "module-qcodes_contrib_drivers.drivers.SignalCore"]], "qcodes_contrib_drivers.drivers.signalcore.signalcore": [[34, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"]], "ref_100_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_100_pll_ld"]], "ref_10_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_10_pll_ld"]], "ref_out_select (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ref_out_select"]], "return_to_start (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.return_to_start"]], "rf1_lock_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_lock_mode"]], "rf1_loop_gain (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_loop_gain"]], "rf_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf_mode"]], "rf_phase_offset (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.rf_phase_offset"]], "step_on_hw_trig (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.step_on_hw_trig"]], "sum_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.sum_pll_ld"]], "sweep_cycles (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_cycles"]], "sweep_dir (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_dir"]], "sweep_dwell_time (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_dwell_time"]], "sweep_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_mode"]], "sweep_start_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_start_freq"]], "sweep_step_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_step_freq"]], "sweep_stop_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_stop_freq"]], "tri_waveform (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.tri_waveform"]], "trig_out_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_enable"]], "trig_out_on_cycle (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_on_cycle"]], "year (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[34, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.year"]], "channelarray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray"]], "communicationhandler (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler"]], "sqcounts (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts"]], "sqtalk (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk"]], "timearray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray"]], "websqcontrolqcode (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.WebSQControlqcode"]], "acquire_cnts_t() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.acquire_cnts_t"]], "add_labelprops() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.add_labelProps"]], "auto_cali_bias_currents() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_bias_currents"]], "auto_cali_finished() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_finished"]], "check_error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.check_error"]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.close"]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.close"]], "enable_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.enable_detectors"]], "error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.error"]], "get_all_labels() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_all_labels"]], "get_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_current"]], "get_bias_voltage() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_voltage"]], "get_label() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_label"]], "get_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_measurement_periode"]], "get_n() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.get_n"]], "get_number_of_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_number_of_detectors"]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.channelarray method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.timearray method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray.get_raw"]], "get_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_trigger_level"]], "qcodes_contrib_drivers.drivers.singlequantum": [[35, "module-qcodes_contrib_drivers.drivers.SingleQuantum"]], "qcodes_contrib_drivers.drivers.singlequantum.singlequantum": [[35, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.run"]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.run"]], "send() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.send"]], "set_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_bias_current"]], "set_dark_counts_auto_iv() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_dark_counts_auto_iv"]], "set_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_measurement_periode"]], "set_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_trigger_level"]], "sub_jsons() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[35, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.sub_jsons"]], "m4i (class in qcodes_contrib_drivers.drivers.spectrum.m4i)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i"]], "__init__() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.__init__"]], "active_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.active_channels"]], "blockavg_hardware_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.blockavg_hardware_trigger_acquisition"]], "close() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.close"]], "convert_to_voltage() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.convert_to_voltage"]], "gated_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.gated_trigger_acquisition"]], "get_card_memory() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_memory"]], "get_card_type() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_type"]], "get_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_data"]], "get_error_info32bit() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_error_info32bit"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_firmware_version"]], "get_hardware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_hardware_version"]], "get_idn() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_idn"]], "get_max_sample_rate() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_max_sample_rate"]], "initialize_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.initialize_channels"]], "multiple_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.multiple_trigger_acquisition"]], "qcodes_contrib_drivers.drivers.spectrum": [[36, "module-qcodes_contrib_drivers.drivers.Spectrum"]], "qcodes_contrib_drivers.drivers.spectrum.m4i": [[36, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"]], "reset() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.reset"]], "retrieve_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.retrieve_data"]], "set_channel_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_OR_trigger_settings"]], "set_channel_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_settings"]], "set_ext0_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_ext0_OR_trigger_settings"]], "setup_multi_recording() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.setup_multi_recording"]], "single_software_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition"]], "single_software_trigger_acquisition_boxcar() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition_boxcar"]], "single_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_trigger_acquisition"]], "start_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_acquisition"]], "start_triggered() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_triggered"]], "sztypetoname() (in module qcodes_contrib_drivers.drivers.spectrum.m4i)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.szTypeToName"]], "wait_ready() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[36, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.wait_ready"]], "giga() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA"]], "giga_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA_B"]], "kilo() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO"]], "kilo_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO_B"]], "mega() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA"]], "mega_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA_B"]], "main() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.main"]], "process() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.process"]], "pytify() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[37, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.pytify"]], "qcodes_contrib_drivers.drivers.spectrum.py_header": [[37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"]], "qcodes_contrib_drivers.drivers.spectrum.py_header.h2py": [[37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"]], "qcodes_contrib_drivers.drivers.spectrum.py_header.regs": [[37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"]], "qcodes_contrib_drivers.drivers.spectrum.py_header.spcerr": [[37, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"]], "cmdbuffreespace (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CmdBufFreeSpace"]], "curposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurPosition"]], "curspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurSpeed"]], "curt (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurT"]], "deviceinformation (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation"]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.EncPosition"]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncPosition"]], "encsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncSts"]], "flags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Flags"]], "gpioflags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.GPIOFlags"]], "getposition (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition"]], "ipwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Ipwr"]], "iusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Iusb"]], "major (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Major"]], "manufacturer (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Manufacturer"]], "manufacturerid (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ManufacturerId"]], "minor (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Minor"]], "movests (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MoveSts"]], "mvcmdsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MvCmdSts"]], "pwrsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.PWRSts"]], "position (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.Position"]], "productdescription (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ProductDescription"]], "release (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Release"]], "standa_10mwa168 (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Standa_10MWA168"]], "status (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status"]], "upwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Upwr"]], "uusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Uusb"]], "windsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.WindSts"]], "command_move() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.command_move"]], "enumerate_devices() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.enumerate_devices"]], "error_check() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.error_check"]], "get_device_name() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_device_name"]], "get_position() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_position"]], "get_status() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_status"]], "libximc (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc"]], "open_device() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.open_device"]], "qcodes_contrib_drivers.drivers.standa": [[38, "module-qcodes_contrib_drivers.drivers.Standa"]], "qcodes_contrib_drivers.drivers.standa.standa_10mwa168": [[38, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"]], "ucurposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurPosition"]], "ucurspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurSpeed"]], "uposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[38, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.uPosition"]], "channel_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.CHANNEL_MAPPING"]], "cs580 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580"]], "channeltrace (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace"]], "dg645 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645"]], "display_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.DISPLAY_MAPPING"]], "generatedsetpoints (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints"]], "output_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.OUTPUT_MAPPING"]], "polarity_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.POLARITY_MAPPING"]], "prescale_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.PRESCALE_MAPPING"]], "sim928 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928"]], "snap_parameters (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.SNAP_PARAMETERS"]], "sr844 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844"]], "trigger_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.TRIGGER_MAPPING"]], "__init__() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.__init__"]], "ask_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.ask_module"]], "byte_to_bits() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 static method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.byte_to_bits"]], "check_module_errors() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.check_module_errors"]], "decrement_sensitivity() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.decrement_sensitivity"]], "find_modules() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.find_modules"]], "get_buffer_length() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.get_buffer_length"]], "get_display_value() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.get_display_value"]], "get_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.get_idn"]], "get_module_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_idn"]], "get_module_status() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_status"]], "get_overload() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.get_overload"]], "get_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.get_raw"]], "get_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_voltage"]], "increment_sensitivity() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.increment_sensitivity"]], "local() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.local"]], "parse_binary() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.parse_binary"]], "poll_raw_binary_data() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.poll_raw_binary_data"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844": [[39, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844"]], "remote() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.remote"]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.cs580.cs580 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.CS580.CS580.reset"]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.reset"]], "reset_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.reset_module"]], "save_settings() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.save_settings"]], "self_calibrate() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_calibrate"]], "self_test() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_test"]], "sensitivity_value_map (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.sensitivity_value_map"]], "set_raw() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.set_raw"]], "set_smooth() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_smooth"]], "set_sweep_parameters() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.set_sweep_parameters"]], "set_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_voltage"]], "snap() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.snap"]], "trigger() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.trigger"]], "update_ch_unit() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.update_ch_unit"]], "update_unit() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.channeltrace method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.ChannelTrace.update_unit"]], "update_units_if_constant_sample_rate() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.generatedsetpoints method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.GeneratedSetPoints.update_units_if_constant_sample_rate"]], "value_sensitivity_map (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sr844.sr844 attribute)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SR844.SR844.value_sensitivity_map"]], "wait() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.wait"]], "write_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[39, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.write_module"]], "afg3000 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000"]], "afg3252 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3252"]], "keithley_2000_scan_channel (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel"]], "keithley_2700 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700"]], "keithley_6430 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6430)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430"]], "keithley_6500 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500"]], "keithley_sense (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense"]], "tektronix_awg520 (class in qcodes_contrib_drivers.drivers.tektronix.awg520)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan.keithley_2000_scan_channel method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_6500 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_sense method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense.__init__"]], "abort() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.abort"]], "bool_to_str() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.bool_to_str"]], "change_folder() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.change_folder"]], "clear_waveforms() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.clear_waveforms"]], "delete_all_waveforms_from_list() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.delete_all_waveforms_from_list"]], "force_logicjump() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_logicjump"]], "force_trigger() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_trigger"]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_all"]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.get_all"]], "get_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_current_folder_name"]], "get_filenames() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_filenames"]], "get_folder_contents() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_folder_contents"]], "get_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_jumpmode"]], "get_state() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_state"]], "goto_root() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.goto_root"]], "init() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.init"]], "load_and_set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.load_and_set_sequence"]], "make_directory() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.make_directory"]], "parsebool() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsebool"]], "parseint() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parseint"]], "parsestr() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsestr"]], "qcodes_contrib_drivers.drivers.tektronix": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix"]], "qcodes_contrib_drivers.drivers.tektronix.afg3000": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"]], "qcodes_contrib_drivers.drivers.tektronix.awg520": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2700": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6430": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6500": [[40, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"]], "read() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.read"]], "recall() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.recall"]], "resend_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.resend_waveform"]], "reset() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset"]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.reset"]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.reset"]], "reset_edit_memory() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset_edit_memory"]], "return_self() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.return_self"]], "save() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.save"]], "self_calibrate() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_calibrate"]], "self_test() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_test"]], "send_pattern() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_pattern"]], "send_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence"]], "send_sequence2() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence2"]], "send_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_waveform"]], "set_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_current_folder_name"]], "set_defaults() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_defaults"]], "set_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_jumpmode"]], "set_mode() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode"]], "set_mode_volt_dc() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode_volt_dc"]], "set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_sequence"]], "set_setup_filename() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_setup_filename"]], "set_trigger_immediate() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.set_trigger_immediate"]], "start() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.start"]], "stop() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.stop"]], "synchronize_phase() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.synchronize_phase"]], "upload_waveform() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.upload_waveform"]], "wait() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[40, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.wait"]], "thermotekt255p (class in qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p)": [[41, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p"]], "alarm_state() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[41, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.alarm_state"]], "ask() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[41, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.ask"]], "enabled (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p attribute)": [[41, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.enabled"]], "get_idn() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[41, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.get_idn"]], "qcodes_contrib_drivers.drivers.thermotek": [[41, "module-qcodes_contrib_drivers.drivers.Thermotek"]], "qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p": [[41, "module-qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p"]], "status() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[41, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.status"]], "write() (qcodes_contrib_drivers.drivers.thermotek.thermotek_t255p.thermotekt255p method)": [[41, "qcodes_contrib_drivers.drivers.Thermotek.Thermotek_T255p.ThermotekT255p.write"]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.FORWARD"]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.FORWARD"]], "homelimitswitch (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch"]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.REVERSE"]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.REVERSE"]], "rotationdirection (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection"]], "thorlab_pm100d (class in qcodes_contrib_drivers.drivers.thorlabs.pm100d)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.PM100D.Thorlab_PM100D"]], "thorlabs_k10cr1 (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1"]], "thorlabs_kdc101 (class in qcodes_contrib_drivers.drivers.thorlabs.kdc101)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.KDC101.Thorlabs_KDC101"]], "thorlabs_kls1550 (class in qcodes_contrib_drivers.drivers.thorlabs.kls1550)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.KLS1550.Thorlabs_KLS1550"]], "thorlabs_mff10x (class in qcodes_contrib_drivers.drivers.thorlabs.mff10x)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x"]], "thorlabs_prm1z8 (class in qcodes_contrib_drivers.drivers.thorlabs.prm1z8)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8"]], "thorlabs_tdc001 (class in qcodes_contrib_drivers.drivers.thorlabs.tdc001)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.TDC001.Thorlabs_TDC001"]], "apt (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.apt"]], "apt (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.apt"]], "apt (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.apt"]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 method)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x method)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 method)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.get_idn"]], "model (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.model"]], "model (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.model"]], "model (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.model"]], "qcodes_contrib_drivers.drivers.thorlabs": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs"]], "qcodes_contrib_drivers.drivers.thorlabs.k10cr1": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"]], "qcodes_contrib_drivers.drivers.thorlabs.kdc101": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.KDC101"]], "qcodes_contrib_drivers.drivers.thorlabs.kls1550": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.KLS1550"]], "qcodes_contrib_drivers.drivers.thorlabs.mff10x": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"]], "qcodes_contrib_drivers.drivers.thorlabs.pm100d": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.PM100D"]], "qcodes_contrib_drivers.drivers.thorlabs.prm1z8": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"]], "qcodes_contrib_drivers.drivers.thorlabs.tdc001": [[42, "module-qcodes_contrib_drivers.drivers.Thorlabs.TDC001"]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.serial_number"]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.serial_number"]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.serial_number"]], "version (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.version"]], "version (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.version"]], "version (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[42, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.version"]], "bbd10x (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BBD10x"]], "bdc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BDC101"]], "bsc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC001"]], "bsc002 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC002"]], "bsc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.BSC101"]], "dcc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.DCC001"]], "k10cr1 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.K10CR1"]], "kdc101 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.KDC101"]], "l490mz (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.L490MZ"]], "ltsxxx (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.LTSxxx"]], "mff10x (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.MFF10x"]], "mst601 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.MST601"]], "odc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.ODC001"]], "ost001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.OST001"]], "prm1z8 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.PRM1Z8"]], "scc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.SCC001"]], "tdc001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.TDC001"]], "tst001 (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabshwtype attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType.TST001"]], "thorlabsexception": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsException"]], "thorlabshwtype (class in qcodes_contrib_drivers.drivers.thorlabs.private.apt)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.ThorlabsHWType"]], "thorlabs_apt (class in qcodes_contrib_drivers.drivers.thorlabs.private.apt)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT"]], "apt_clean_up() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.apt_clean_up"]], "apt_init() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.apt_init"]], "disable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.disable_hw_channel"]], "dll (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.dll"]], "enable_event_dlg() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.enable_event_dlg"]], "enable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.enable_hw_channel"]], "error_check() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.error_check"]], "get_hw_info() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.get_hw_info"]], "get_hw_serial_num_ex() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.get_hw_serial_num_ex"]], "init_hw_device() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.init_hw_device"]], "list_available_devices() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.list_available_devices"]], "mot_get_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_home_parameters"]], "mot_get_position() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_position"]], "mot_get_status_bits() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_status_bits"]], "mot_get_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_get_velocity_parameters"]], "mot_move_absolute_ex() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_absolute_ex"]], "mot_move_home() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_home"]], "mot_move_jog() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_jog"]], "mot_move_velocity() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_move_velocity"]], "mot_set_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_set_home_parameters"]], "mot_set_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_set_velocity_parameters"]], "mot_stop_profiled() (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt method)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.mot_stop_profiled"]], "qcodes_contrib_drivers.drivers.thorlabs.private": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private"]], "qcodes_contrib_drivers.drivers.thorlabs.private.apt": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.APT"]], "qcodes_contrib_drivers.drivers.thorlabs.private.cc": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.CC"]], "qcodes_contrib_drivers.drivers.thorlabs.private.ls": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.LS"]], "qcodes_contrib_drivers.drivers.thorlabs.private.kinesis": [[43, "module-qcodes_contrib_drivers.drivers.Thorlabs.private.kinesis"]], "verbose (qcodes_contrib_drivers.drivers.thorlabs.private.apt.thorlabs_apt attribute)": [[43, "qcodes_contrib_drivers.drivers.Thorlabs.private.APT.Thorlabs_APT.verbose"]], "lda (in module qcodes_contrib_drivers.drivers.vaunix.lda)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LDA"]], "ldaattenuation (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation"]], "ldachannel (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaChannel"]], "ldaparameter (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter"]], "ldaworkingfrequency (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency"]], "vaunix_lda (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA"]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.__init__"]], "close() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.close"]], "dll_path (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda attribute)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.dll_path"]], "get_idn() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.get_idn"]], "get_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.get_raw"]], "get_validator() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency class method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.get_validator"]], "qcodes_contrib_drivers.drivers.vaunix": [[44, "module-qcodes_contrib_drivers.drivers.Vaunix"]], "qcodes_contrib_drivers.drivers.vaunix.lda": [[44, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"]], "save_settings() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.save_settings"]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaattenuation attribute)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation.scaling"]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter attribute)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.scaling"]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency attribute)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.scaling"]], "set_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[44, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.set_raw"]], "compilererror": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.CompilerError"]], "hf2li (class in qcodes_contrib_drivers.drivers.zurichinstruments.hf2li)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI"]], "output_mapping (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li attribute)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.OUTPUT_MAPPING"]], "zihdawg8 (class in qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8"]], "__init__() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.__init__"]], "create_parameters_from_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.create_parameters_from_node_tree"]], "disable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.disable_channel"]], "download_device_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.download_device_node_tree"]], "enable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.enable_channel"]], "generate_csv_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 static method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.generate_csv_sequence_program"]], "qcodes_contrib_drivers.drivers.zurichinstruments": [[45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"]], "qcodes_contrib_drivers.drivers.zurichinstruments.hf2li": [[45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"]], "qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8": [[45, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "sample() (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.sample"]], "set_channel_grouping() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.set_channel_grouping"]], "snapshot() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot"]], "snapshot_base() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot_base"]], "start_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.start_awg"]], "stop_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.stop_awg"]], "upload_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_sequence_program"]], "upload_waveform() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_waveform"]], "waveform_to_csv() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_csv"]], "waveform_to_wave() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[45, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_wave"]]}})